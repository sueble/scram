<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>main.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_11bc0974ce736ce9a6fadebbeb7a8314.xhtml">gui</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">main.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="main_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2015-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// The main entrance to the SCRAM GUI.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;exception&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;QApplication&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;QCoreApplication&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;QIcon&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;QLibraryInfo&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;QMessageBox&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;QSettings&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;QString&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;QTranslator&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;boost/exception/diagnostic_information.hpp&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;boost/program_options.hpp&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="language_8h.xhtml">language.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mainwindow_8h.xhtml">mainwindow.h</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;src/error.h&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;src/version.h&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>po = boost::program_options;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// Parses the command-line arguments.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// @param[in] argc  Count of arguments.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/// @param[in] argv  Values of arguments.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/// @param[out] vm  Variables map of program options.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/// @returns 0 for success.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// @returns 1 for errored state.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// @returns -1 for information only state like help and version.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span><span class="keywordtype">int</span> parseArguments(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[], po::variables_map *vm) noexcept</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *usage = <span class="stringliteral">&quot;Usage:    scram-gui [options] [input-files]...&quot;</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    po::options_description desc(<span class="stringliteral">&quot;Options&quot;</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// clang-format off</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    desc.add_options()</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            (<span class="stringliteral">&quot;help&quot;</span>, <span class="stringliteral">&quot;Display this help message&quot;</span>)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            (<span class="stringliteral">&quot;config-file&quot;</span>, po::value&lt;std::string&gt;()-&gt;value_name(<span class="stringliteral">&quot;path&quot;</span>),</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;             <span class="stringliteral">&quot;Project configuration file&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// clang-format on</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        po::store(po::parse_command_line(argc, argv, desc), *vm);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    } <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception &amp;err) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Option error: &quot;</span> &lt;&lt; err.what() &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                  &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                  &lt;&lt; desc &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    po::notify(*vm);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Process command-line arguments.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (vm-&gt;count(<span class="stringliteral">&quot;help&quot;</span>)) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        std::cout &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; desc &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    desc.add_options()(<span class="stringliteral">&quot;input-files&quot;</span>, po::value&lt;std::vector&lt;std::string&gt;&gt;());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    po::positional_options_description p;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    p.add(<span class="stringliteral">&quot;input-files&quot;</span>, -1);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    po::store(</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        po::command_line_parser(argc, argv).options(desc).positional(p).run(),</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        *vm);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    po::notify(*vm);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">/// Produces critical notification dialog</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">/// for errors that are not expected to crash the application.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> notifyError(<span class="keyword">const</span> QString &amp;title, <span class="keyword">const</span> QString &amp;text,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                 <span class="keyword">const</span> QString &amp;detail = {}) noexcept</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    QMessageBox message(QMessageBox::Critical, title, text, QMessageBox::Ok);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    message.setDetailedText(detail);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    message.exec();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">/// Guards the application from crashes on escaped internal exceptions.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"></span><span class="keyword">class </span>GuardedApplication : <span class="keyword">public</span> QApplication</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">using</span> QApplication::QApplication;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">bool</span> notify(QObject *receiver, QEvent *event)<span class="keyword"> override</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">try</span> {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">return</span> QApplication::notify(receiver, event);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        } <span class="keywordflow">catch</span> (<span class="keyword">const</span> scram::Error &amp;err) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            std::string message = boost::diagnostic_information(err);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            qCritical(<span class="stringliteral">&quot;%s&quot;</span>, message.c_str());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            notifyError(QStringLiteral(<span class="stringliteral">&quot;Internal SCRAM Error&quot;</span>),</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        QStringLiteral(<span class="stringliteral">&quot;Uncaught exception.&quot;</span>),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        QString::fromStdString(message));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        } <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception &amp;err) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            qCritical(<span class="stringliteral">&quot;%s&quot;</span>, err.what());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            notifyError(QStringLiteral(<span class="stringliteral">&quot;Internal Exception Error&quot;</span>),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        QStringLiteral(<span class="stringliteral">&quot;Uncaught foreign exception.&quot;</span>),</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        QString::fromUtf8(err.what()));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        } <span class="keywordflow">catch</span> (...) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            qCritical(<span class="stringliteral">&quot;Unknown exception type.&quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            notifyError(QStringLiteral(<span class="stringliteral">&quot;Internal Exception Error&quot;</span>),</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        QStringLiteral(<span class="stringliteral">&quot;Unknown exception type.&quot;</span>));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/// Installs translators to the main application.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/// @param[in,out] app  The application to register translators.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">/// @pre No application window has been created.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> installTranslators(GuardedApplication *app)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    QString language = QSettings().value(QStringLiteral(<span class="stringliteral">&quot;language&quot;</span>)).toString();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> (language.isEmpty())</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        language = QLocale::system().name();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span> (language.startsWith(QStringLiteral(<span class="stringliteral">&quot;en&quot;</span>)))</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span>; <span class="comment">// The default language.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">auto</span> loadTs = [&amp;app, &amp;language](<span class="keyword">const</span> <span class="keywordtype">char</span> *domain, <span class="keyword">const</span> QString &amp;tsPath) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">auto</span> *translator = <span class="keyword">new</span> QTranslator(app);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span> (translator-&gt;load(QStringLiteral(<span class="stringliteral">&quot;%1_%2&quot;</span>).arg(</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                 QString::fromLatin1(domain), language),</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                             tsPath)) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            app-&gt;installTranslator(translator);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">delete</span> translator;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        qCritical(<span class="stringliteral">&quot;Missing translations: %s_%s&quot;</span>, domain,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                  language.toStdString().data());</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    };</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">auto</span> scramTsPath = QString::fromStdString(scram::gui::translationsPath());</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span> (!loadTs(<span class="stringliteral">&quot;scramgui&quot;</span>, scramTsPath))</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">return</span>; <span class="comment">// The language is not available or installed.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    QString qtTsPath = QLibraryInfo::location(QLibraryInfo::TranslationsPath);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    loadTs(<span class="stringliteral">&quot;qtbase&quot;</span>, qtTsPath);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    loadTs(<span class="stringliteral">&quot;qt&quot;</span>, qtTsPath);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">/// Command-line SCRAM GUI entrance.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">/// @param[in] argc  Argument count.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">/// @param[in] argv  Argument vector (including Qt args).</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">/// @returns 0 for success.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">/// @note There are implicit Qt-specific options</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">///       (e.g., -style, -stylesheet, -platform, -widgetcount, -reverse).</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">///       These options are not listed in the help/usage of SCRAM GUI,</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">///       but they can be invoked for debugging or advanced GUI customization.</span></div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="main_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">  184</a></span>&#160;<span class="comment"></span><span class="keywordtype">int</span> <a class="code" href="main_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Keep the following commented code!</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// In some static build configurations,</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// the resources may fail to load.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// However, the most distributions are expected to be shared builds,</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// so the explicit load should not be used, but it is kept for debugging.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">/* Q_INIT_RESOURCE(res); */</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    GuardedApplication app(argc, argv);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    QCoreApplication::setOrganizationName(QStringLiteral(<span class="stringliteral">&quot;scram&quot;</span>));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    QCoreApplication::setOrganizationDomain(QStringLiteral(<span class="stringliteral">&quot;scram-pra.org&quot;</span>));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    QCoreApplication::setApplicationName(QStringLiteral(<span class="stringliteral">&quot;scram&quot;</span>));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    QCoreApplication::setApplicationVersion(</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        QString::fromLatin1(scram::version::core()));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">if</span> (QIcon::themeName().isEmpty())</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        QIcon::setThemeName(QStringLiteral(<span class="stringliteral">&quot;tango&quot;</span>));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    installTranslators(&amp;app);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classscram_1_1gui_1_1MainWindow.xhtml">scram::gui::MainWindow</a> w;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    w.show();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (argc &gt; 1) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        po::variables_map vm;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordtype">int</span> ret = parseArguments(argc, argv, &amp;vm);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">if</span> (ret == 1)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">if</span> (ret == -1)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        std::vector&lt;std::string&gt; inputFiles;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">try</span> {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;input-files&quot;</span>))</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                inputFiles = vm[<span class="stringliteral">&quot;input-files&quot;</span>].as&lt;std::vector&lt;std::string&gt;&gt;();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;config-file&quot;</span>)) {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                w.<a class="code" href="classscram_1_1gui_1_1MainWindow.xhtml#a19cf5f94f4b040cf6f2ba685ff439b59">setConfig</a>(vm[<span class="stringliteral">&quot;config-file&quot;</span>].as&lt;std::string&gt;(), inputFiles);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                w.<a class="code" href="classscram_1_1gui_1_1MainWindow.xhtml#ad25ffda8b13e4743312f9a3cad96d271">addInputFiles</a>(inputFiles);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        } <span class="keywordflow">catch</span> (<span class="keyword">const</span> boost::exception &amp;) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            assert(<span class="keyword">false</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> app.exec();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="ttc" id="language_8h_xhtml"><div class="ttname"><a href="language_8h.xhtml">language.h</a></div><div class="ttdoc">Localization and translation facilities. </div></div>
<div class="ttc" id="classscram_1_1gui_1_1MainWindow_xhtml_a19cf5f94f4b040cf6f2ba685ff439b59"><div class="ttname"><a href="classscram_1_1gui_1_1MainWindow.xhtml#a19cf5f94f4b040cf6f2ba685ff439b59">scram::gui::MainWindow::setConfig</a></div><div class="ttdeci">bool setConfig(const std::string &amp;configPath, std::vector&lt; std::string &gt; inputFiles={})</div><div class="ttdoc">Loads a model and analysis configuration from a file. </div><div class="ttdef"><b>Definition:</b> <a href="mainwindow_8cpp_source.xhtml#l00261">mainwindow.cpp:261</a></div></div>
<div class="ttc" id="mainwindow_8h_xhtml"><div class="ttname"><a href="mainwindow_8h.xhtml">mainwindow.h</a></div><div class="ttdoc">The main application window. </div></div>
<div class="ttc" id="classscram_1_1gui_1_1MainWindow_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1MainWindow.xhtml">scram::gui::MainWindow</a></div><div class="ttdef"><b>Definition:</b> <a href="mainwindow_8h_source.xhtml#l00055">mainwindow.h:55</a></div></div>
<div class="ttc" id="main_8cpp_xhtml_a0ddf1224851353fc92bfbff6f499fa97"><div class="ttname"><a href="main_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a></div><div class="ttdeci">int main(int argc, char *argv[])</div><div class="ttdoc">Command-line SCRAM GUI entrance. </div><div class="ttdef"><b>Definition:</b> <a href="main_8cpp_source.xhtml#l00184">main.cpp:184</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1MainWindow_xhtml_ad25ffda8b13e4743312f9a3cad96d271"><div class="ttname"><a href="classscram_1_1gui_1_1MainWindow.xhtml#ad25ffda8b13e4743312f9a3cad96d271">scram::gui::MainWindow::addInputFiles</a></div><div class="ttdeci">bool addInputFiles(const std::vector&lt; std::string &gt; &amp;inputFiles)</div><div class="ttdoc">Adds a new set of model elements from input files. </div><div class="ttdef"><b>Definition:</b> <a href="mainwindow_8cpp_source.xhtml#l00287">mainwindow.cpp:287</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:46 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
