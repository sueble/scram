<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>model.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_11bc0974ce736ce9a6fadebbeb7a8314.xhtml">gui</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">model.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="model_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Wrapper Model classes for the MEF data.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/hashed_index.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/mem_fun.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index_container.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;QObject&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;QString&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;QUndoCommand&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;QVariant&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;src/event.h&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;src/ext/multi_index.h&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;src/model.h&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="command_8h.xhtml">command.h</a>&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1gui_1_1model.xhtml">scram::gui::model</a> {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// Fault tree container element management assuming normalized model.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="model_8h.xhtml#ab218caae665db7afb70e535abd62e68a">   47</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <span class="keyword">remove</span>(mef::Event *, mef::FaultTree *)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="model_8h.xhtml#a85aa4ffaacb99f6570505a5b52a2b73e">   50</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <span class="keyword">remove</span>(mef::Gate *gate, mef::FaultTree *faultTree)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    faultTree-&gt;Remove(gate);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">   54</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">add</a>(mef::Event *, mef::FaultTree *)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="model_8h.xhtml#a9f4493d18f7667d462cf70d9a24bec4c">   57</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">add</a>(mef::Gate *gate, mef::FaultTree *faultTree)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    faultTree-&gt;Add(gate);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/// The base proxy Element model for mef::Element.</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element.xhtml">   64</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a> : <span class="keyword">public</span> QObject</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    Q_OBJECT</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span>, <span class="keyword">class</span>&gt;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a>; <span class="comment">// Gets access to the data.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    /// @returns A unique ID string for element within the element type-group.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">    /// @pre The element is public.</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">   75</a></span>&#160;<span class="comment"></span>    QString <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">id</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> QString::fromStdString(m_data-&gt;name()); }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /// @returns The additional description for the element.</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a6d4704b8160d88d8a49f76096ee45677">   78</a></span>&#160;<span class="comment"></span>    QString <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a6d4704b8160d88d8a49f76096ee45677">label</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> QString::fromStdString(m_data-&gt;label()); }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">    /// Sets the label of an Element.</span></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml">   81</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml">SetLabel</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">        /// Stores an element and its new label.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#ac899e6f3eea7f5cb847bdcf5362ab6f5">SetLabel</a>(<a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a> *element, QString <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a6d4704b8160d88d8a49f76096ee45677">label</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Applies changes.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        QString m_label;    <span class="comment">///&lt; The label to be applied.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a> *m_element; <span class="comment">///&lt; The target element.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    /// Sets the name of an Element.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">    /// @tparam T  The proxy type.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">    /// @pre The name format is valid for the MEF Elements.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">    /// @pre The name does not belong to another element of the same type.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /// @todo Generalize for non-Event types.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml">  103</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml">SetId</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">        /// Stores an element, its new name and parent containers.</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml#ac9bedc69194a1c4f40cd00c369b3034e">  107</a></span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml#ac9bedc69194a1c4f40cd00c369b3034e">SetId</a>(T *event, QString name, mef::Model *model,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;              mef::FaultTree *faultTree = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            : <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a>(QObject::tr(<span class="stringliteral">&quot;Rename event &#39;%1&#39; to &#39;%2&#39;&quot;</span>)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                             .arg(event-&gt;<a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">id</a>(), name)),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;              m_name(std::move(name)), m_event(event), m_model(model),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;              m_faultTree(faultTree)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">        /// Applies the new name to the element.</span></div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml#a4399dee61e3f769bf47f30873fd5cd8a">  117</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml#a4399dee61e3f769bf47f30873fd5cd8a">redo</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            QString cur_name = m_event-&gt;id();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">if</span> (m_name == cur_name)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">if</span> (m_faultTree)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keyword">remove</span>(m_event-&gt;data(), m_faultTree);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">auto</span> ptr = m_model-&gt;Remove(m_event-&gt;data());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            m_event-&gt;data()-&gt;id(m_name.toStdString());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span> (m_faultTree)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <a class="code" href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">add</a>(m_event-&gt;data(), m_faultTree);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            m_model-&gt;Add(std::move(ptr));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            emit m_event-&gt;idChanged(m_name);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            m_name = std::move(cur_name);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        QString m_name;              <span class="comment">///&lt; The name string to be applied.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span>        T *m_event;                  <span class="comment">///&lt; The proxy element.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span>        mef::Model *m_model;         <span class="comment">///&lt; The top model container.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>        mef::FaultTree *m_faultTree; <span class="comment">///&lt; The parent fault tree container.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;signals:<span class="comment"></span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">    /// @param[in] label  The new label of the element.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a4c7055b012fe4fdd5772acd7c9d6c58d">labelChanged</a>(<span class="keyword">const</span> QString &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a6d4704b8160d88d8a49f76096ee45677">label</a>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">    /// @param[in] id  The new ID of the element.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#ad3a0378c2f765705286b393613606337">idChanged</a>(<span class="keyword">const</span> QString &amp;<span class="keywordtype">id</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">    /// Stores the reference to the original MEF Element to manage.</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a89e4a1871e595575425cce763a9f6b74">  149</a></span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a89e4a1871e595575425cce763a9f6b74">Element</a>(mef::Element *element) : m_data(element) {}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    mef::Element *<span class="keyword">const</span> m_data; <span class="comment">///&lt; The MEF element in the MEF model.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">/// Provides the type and data of the origin for Proxy Elements.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">/// @tparam E  The Element class.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// @tparam T  The MEF class.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> E, <span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">  160</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#aa7813be3e367179c336ae16bfa7b3e5c">  163</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#aa7813be3e367179c336ae16bfa7b3e5c">Origin</a> = T; <span class="comment">///&lt; The MEF type.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">    /// @returns The original data managed by the proxy.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#a9302e19d5f845a33bdc31e13b09731c4">  167</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> T *<a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#a9302e19d5f845a33bdc31e13b09731c4">data</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>E *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;m_data);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#aefa3db0b6a37351d9967a6307d0e6256">  171</a></span>&#160;    T *<a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#aefa3db0b6a37351d9967a6307d0e6256">data</a>()</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>T *<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a> *<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;data());</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">/// The proxy to manage mef::BasicEvent.</span></div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">  179</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a>&lt;BasicEvent, mef::BasicEvent&gt;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    Q_OBJECT</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">    /// Basic event flavors.</span></div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">  185</a></span>&#160;<span class="comment"></span>    <span class="keyword">enum</span> <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> { Basic = 0, Undeveloped, Conditional };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">    /// Converts a basic event flavor to a UI string.</span></div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#aea601a1adce8e1fcfe4a43db4b370077">  188</a></span>&#160;<span class="comment"></span>    <span class="keyword">static</span> QString <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#aea601a1adce8e1fcfe4a43db4b370077">flavorToString</a>(<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> flavor)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">switch</span> (flavor) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> Basic:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;Basic&quot;</span>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> Undeveloped:</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;Undeveloped&quot;</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">case</span> Conditional:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="comment">//: Actually, this is &#39;conditioning&#39;</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">//: since the event is the condition for some sub-tree.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;Conditional&quot;</span>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        assert(<span class="keyword">false</span>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">    /// Initializes proxy with the MEF basic event and its implicit flavor.</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a>(mef::BasicEvent *basicEvent);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">    /// @returns The flavor of the basic event.</span></div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a827dd95218bb3eece34e5777d487a590">  207</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a827dd95218bb3eece34e5777d487a590">flavor</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_flavor; }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">    /// @returns The current expression of this basic event.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">    ///          nullptr if no expression has been set.</span></div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a4252873cbeb2ec908843a8aa222804a4">  211</a></span>&#160;<span class="comment"></span>    mef::Expression *<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a4252873cbeb2ec908843a8aa222804a4">expression</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">return</span> data()-&gt;HasExpression() ? &amp;data()-&gt;expression() : <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    /// @returns The probability value of the event.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    /// @pre The basic event has expression or the type has null state.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keywordtype">double</span>&gt;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#ab7f31b7b0f9210d2fe64eea3e1c027a4">  220</a></span>&#160;    T <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#ab7f31b7b0f9210d2fe64eea3e1c027a4">probability</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, QVariant&gt;) {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">return</span> data()-&gt;HasExpression() ? QVariant(data()-&gt;p()) : QVariant();</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">return</span> data()-&gt;p();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">    /// Sets the basic event expression.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">    /// @pre The expression is valid for mef::BasicEvent.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">    /// @note Currently, the expression change</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">    ///       is detected with address comparison,</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">    ///       which may fail if the current expression has been changed.</span></div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetExpression.xhtml">  237</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetExpression.xhtml">SetExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">        /// @param[in] basicEvent  The basic event to receive an expression.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">        /// @param[in] expression  The valid expression for the basic event.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">        ///                        nullptr to unset the expression.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetExpression.xhtml">SetExpression</a>(<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> *basicEvent, mef::Expression *expression);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Applies the expression changes.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        mef::Expression *m_expression; <span class="comment">///&lt; The valid expression to apply.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> *m_basicEvent;      <span class="comment">///&lt; The receiver basic event.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">    /// Sets the flavor of the basic event.</span></div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetFlavor.xhtml">  253</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetFlavor.xhtml">SetFlavor</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">        /// Stores the basic event and its new flavor.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetFlavor.xhtml">SetFlavor</a>(<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> *basicEvent, <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> flavor);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Applies the flavor changes.</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> m_flavor;          <span class="comment">///&lt; The basic event flavor.</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> *m_basicEvent; <span class="comment">///&lt; The target basic event.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;signals:<span class="comment"></span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">    /// @param[in] expression  The new expression of the basic event.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> expressionChanged(mef::Expression *expression);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">    /// @param[in] flavor  The new flavor of the basic event.</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> flavorChanged(<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> flavor);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">Flavor</a> m_flavor; <span class="comment">///&lt; The current flavor of the basic event.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">/// Converts Boolean value to a UI string.</span></div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="model_8h.xhtml#a7fb055e96982ca4cfbf9890bcec60b30">  278</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> QString <a class="code" href="model_8h.xhtml#a7fb055e96982ca4cfbf9890bcec60b30">boolToString</a>(<span class="keywordtype">bool</span> value)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> value ? QObject::tr(<span class="stringliteral">&quot;True&quot;</span>) : QObject::tr(<span class="stringliteral">&quot;False&quot;</span>);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">/// The proxy to manage mef::HouseEvent.</span></div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">  284</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">HouseEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a>&lt;HouseEvent, mef::HouseEvent&gt;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    Q_OBJECT</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">    /// @param[in,out] houseEvent  The MEF house event.</span></div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml#ab5c9d5bdbb706310ee87b543f262993b">  290</a></span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml#ab5c9d5bdbb706310ee87b543f262993b">HouseEvent</a>(mef::HouseEvent *houseEvent) : <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a>(houseEvent) {}</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">    /// @returns The state data of the house event.</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keywordtype">bool</span>&gt;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml#a5d7cf6bceaeb71186648ee0e30bb9710">  294</a></span>&#160;    T <a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml#a5d7cf6bceaeb71186648ee0e30bb9710">state</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, QString&gt;) {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="model_8h.xhtml#a7fb055e96982ca4cfbf9890bcec60b30">boolToString</a>(state());</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">return</span> data()-&gt;state();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">    /// Flips the house event state.</span></div><div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1HouseEvent_1_1SetState.xhtml">  305</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent_1_1SetState.xhtml">SetState</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">        /// Stores the house event and its new state.</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent_1_1SetState.xhtml">SetState</a>(<a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">HouseEvent</a> *houseEvent, <span class="keywordtype">bool</span> state);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Applies the new state to the house event.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordtype">bool</span> m_state;             <span class="comment">///&lt; The new state.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">HouseEvent</a> *m_houseEvent; <span class="comment">///&lt; The target house event.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;signals:<span class="comment"></span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">    /// @param[in] value  The value of the house event&#39;s new state.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> stateChanged(<span class="keywordtype">bool</span> value);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;};</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">/// The proxy to manage mef::Gate.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">/// @pre The gate formula is flat.</span></div><div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">  326</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a>&lt;Gate, mef::Gate&gt;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;{</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    Q_OBJECT</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">    /// @param[in,out] gate  The MEF gate with a flat formula.</span></div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a4b1d111ebca41747e6f0a8606ecbc89b">  332</a></span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a4b1d111ebca41747e6f0a8606ecbc89b">Gate</a>(mef::Gate *gate) : <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a>(gate) {}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">    /// @returns The current operator type of the gate.</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = mef::Operator&gt;</div><div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#af6bdef0f594fd764a96912a4df8eb2f2">  336</a></span>&#160;    T <a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#af6bdef0f594fd764a96912a4df8eb2f2">type</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, QString&gt;) {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordflow">switch</span> (type()) {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">case</span> mef::kAnd:</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;and&quot;</span>);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">case</span> mef::kOr:</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;or&quot;</span>);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keywordflow">case</span> mef::kVote:</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="comment">//: Also named as &#39;vote&#39;, &#39;voting or&#39;, &#39;combination&#39;, &#39;combo&#39;.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;at-least %1&quot;</span>).arg(voteNumber());</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">case</span> mef::kXor:</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;xor&quot;</span>);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">case</span> mef::kNot:</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;not&quot;</span>);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">case</span> mef::kNull:</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                <span class="comment">//: This is &#39;pass-through&#39; or &#39;no-action&#39; gate type.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;null&quot;</span>);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">case</span> mef::kNand:</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="comment">//: not and.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;nand&quot;</span>);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            <span class="keywordflow">case</span> mef::kNor:</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                <span class="comment">//: not or.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keywordflow">return</span> tr(<span class="stringliteral">&quot;nor&quot;</span>);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            assert(<span class="keyword">false</span>);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">return</span> data()-&gt;formula().type();</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">    /// @returns The number of gate arguments.</span></div><div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a3db45049d1326cfd214197bfd3aaf007">  369</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">int</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a3db45049d1326cfd214197bfd3aaf007">numArgs</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data()-&gt;formula().num_args(); }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">    /// @returns The vote number of the gate formula.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">    /// @pre The vote number is appropriate for the formula type.</span></div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a2b68382b9c692bac26eb4775ebb366c9">  374</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">int</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a2b68382b9c692bac26eb4775ebb366c9">voteNumber</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data()-&gt;formula().vote_number(); }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">    /// @returns Event arguments of the gate.</span></div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a14671d156e58b060ac84a58410543f64">  377</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> std::vector&lt;mef::Formula::EventArg&gt; &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a14671d156e58b060ac84a58410543f64">args</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">return</span> data()-&gt;formula().event_args();</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">    /// Formula modification commands.</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">    /// @pre The formula is valid for mef::Gate.</span></div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Gate_1_1SetFormula.xhtml">  385</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Gate_1_1SetFormula.xhtml">SetFormula</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">        /// Stores the gate and its new formula.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Gate_1_1SetFormula.xhtml">SetFormula</a>(<a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> *gate, mef::FormulaPtr formula);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Applies the gate formula changes.</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        mef::FormulaPtr m_formula; <span class="comment">///&lt; The new formula.</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> *m_gate;              <span class="comment">///&lt; The receiver gate for the formula.</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;signals:<span class="comment"></span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">    /// Indicates gate formula changes or resets.</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> formulaChanged();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;};</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">/// Table of proxy elements uniquely wrapping the core model element.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">/// @tparam T  The proxy type.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> M = <span class="keyword">typename</span> T::Origin, <span class="keyword">class</span> P = Proxy&lt;T, M&gt;&gt;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="keyword">using</span> <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable</a> = boost::multi_index_container&lt;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    std::unique_ptr&lt;T&gt;,</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    boost::multi_index::indexed_by&lt;boost::multi_index::hashed_unique&lt;</div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">  410</a></span>&#160;        boost::multi_index::const_mem_fun&lt;P, const M *, &amp;P::data&gt;&gt;&gt;&gt;;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">/// The wrapper around the MEF Model.</span></div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model.xhtml">  413</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">Proxy</a>&lt;Model, mef::Model&gt;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;{</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    Q_OBJECT</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">    /// @param[in] model  The analysis model with all constructs.</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a>(mef::Model *model);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">    /// The proxy element tables of the model.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model.xhtml#afa74624b4e4b7e996d07541e9951b228">  423</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;HouseEvent&gt;</a> &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml#afa74624b4e4b7e996d07541e9951b228">houseEvents</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_houseEvents; }</div><div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model.xhtml#ab2765dbdbbecacce8685c74c60228377">  424</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;BasicEvent&gt;</a> &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml#ab2765dbdbbecacce8685c74c60228377">basicEvents</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_basicEvents; }</div><div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model.xhtml#a49da2565500081e227483c22ff7012a6">  425</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;Gate&gt;</a> &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml#a49da2565500081e227483c22ff7012a6">gates</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_gates; }</div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model.xhtml#a4818a52843b98d6ea4fcbde026405ffe">  426</a></span>&#160;    <span class="keyword">const</span> mef::ElementTable&lt;mef::FaultTreePtr&gt; &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml#a4818a52843b98d6ea4fcbde026405ffe">faultTrees</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="keywordflow">return</span> m_model-&gt;fault_trees();</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">    /// Generic access to event tables.</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model.xhtml#a52a0fb432e34411d76e2f91c5eaf9362">  434</a></span>&#160;    <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;T&gt;</a> &amp;<a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml#a52a0fb432e34411d76e2f91c5eaf9362">table</a>()</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, Gate&gt;) {</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="keywordflow">return</span> m_gates;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, BasicEvent&gt;) {</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">return</span> m_basicEvents;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            static_assert(std::is_same_v&lt;T, HouseEvent&gt;, <span class="stringliteral">&quot;Unknown type.&quot;</span>);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="keywordflow">return</span> m_houseEvents;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">    /// @param[in] event  The event defined/registered in the model.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">    /// @returns The parent gates of an event.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment"></span>    std::vector&lt;Gate *&gt; parents(mef::Formula::EventArg event) <span class="keyword">const</span>;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">    /// Sets the optional name of the model.</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">    /// @pre The name format is valid for mef::Model.</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">    /// @note Empty name string resets the model name to a default one.</span></div><div class="line"><a name="l00458"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1SetName.xhtml">  458</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1SetName.xhtml">SetName</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">        /// Stores the model and its new name.</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1SetName.xhtml">SetName</a>(QString name, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Applies the new name to the model.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *m_model; <span class="comment">///&lt; The current model.</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment"></span>        QString m_name; <span class="comment">///&lt; The new name string for the model.</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">    /// Adds a fault tree into a model.</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">    /// @pre The fault tree is not a duplicate of any existing fault tree.</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">    /// @todo Provide a proxy class for the fault tree.</span></div><div class="line"><a name="l00476"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml">  476</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml">AddFaultTree</a> : <span class="keyword">public</span> QUndoCommand</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">        /// Stores the new fault tree and the target model.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml">AddFaultTree</a>(mef::FaultTreePtr faultTree, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">redo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Adds the fault tree.</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml#aaa815e4ad30b18fa20d202889b74dc10">undo</a>() <span class="keyword">override</span>; <span class="comment">///&lt; Removes the fault tree.</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">        /// Sets up the removal state.</span></div><div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml#a0020bdcd1aa4458963332cfa77f22455">  487</a></span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml#a0020bdcd1aa4458963332cfa77f22455">AddFaultTree</a>(mef::FaultTree *address, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model, QString description)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            : QUndoCommand(std::move(description)), m_model(model),</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;              m_address(address)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *m_model; <span class="comment">///&lt; The model for the fault tree addition.</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"></span>        mef::FaultTree *<span class="keyword">const</span> m_address; <span class="comment">///&lt; The data MEF fault tree.</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"></span>        mef::FaultTreePtr m_faultTree;   <span class="comment">///&lt; The proxy of the MEF fault tree.</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">    /// Removes a fault tree from the model.</span></div><div class="line"><a name="l00500"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveFaultTree.xhtml">  500</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveFaultTree.xhtml">RemoveFaultTree</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Inverse.xhtml">Inverse</a>&lt;AddFaultTree&gt;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">        /// Stores the model and existing fault tree for removal.</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveFaultTree.xhtml">RemoveFaultTree</a>(mef::FaultTree *faultTree, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    };</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">    /// Adds an event to the model.</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">    /// @tparam T  The proxy event type.</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">    /// @pre The event is not a duplicate of any existing event.</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">    /// @todo Generalize for all element types.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml">  515</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml">AddEvent</a> : <span class="keyword">public</span> QUndoCommand</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">        /// Stores the newly defined event and its destination container.</span></div><div class="line"><a name="l00519"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a50e6b4c4475392cbbbdf8b870b89aa32">  519</a></span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a50e6b4c4475392cbbbdf8b870b89aa32">AddEvent</a>(std::unique_ptr&lt;typename T::Origin&gt; event, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                 mef::FaultTree *faultTree = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            : QUndoCommand(QObject::tr(<span class="stringliteral">&quot;Add event &#39;%1&#39;&quot;</span>)</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                               .arg(QString::fromStdString(event-&gt;<a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">id</a>()))),</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;              m_model(model), m_proxy(std::make_unique&lt;T&gt;(event.get())),</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;              m_address(event.get()), m_event(std::move(event)),</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;              m_faultTree(faultTree)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">        /// Adds the event to the containers.</span></div><div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a886bf317b9b89f092eec812b7f9c3624">  530</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a886bf317b9b89f092eec812b7f9c3624">redo</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            m_model-&gt;m_model-&gt;Add(std::move(m_event));</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keyword">auto</span> it = m_model-&gt;table&lt;T&gt;().emplace(std::move(m_proxy)).first;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            emit m_model-&gt;added(it-&gt;get());</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="keywordflow">if</span> (m_faultTree)</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <a class="code" href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">add</a>(m_address, m_faultTree);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">        /// Removes the event from the containers.</span></div><div class="line"><a name="l00541"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a43e171cefe0fd152bf49882eff5214a5">  541</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a43e171cefe0fd152bf49882eff5214a5">undo</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            m_event = m_model-&gt;m_model-&gt;Remove(m_address);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            m_proxy = ext::extract(m_address, &amp;m_model-&gt;table&lt;T&gt;());</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            emit m_model-&gt;removed(m_proxy.get());</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">if</span> (m_faultTree)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                <span class="keyword">remove</span>(m_address, m_faultTree);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">        /// Sets up the removal state.</span></div><div class="line"><a name="l00553"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#ac3f942811ed36fc4e9c21ccce86245cd">  553</a></span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#ac3f942811ed36fc4e9c21ccce86245cd">AddEvent</a>(T *event, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model, mef::FaultTree *faultTree,</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                 QString description)</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            : QUndoCommand(std::move(description)), m_model(model),</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;              m_address(event-&gt;data()), m_faultTree(faultTree)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        {</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *m_model;             <span class="comment">///&lt; The top container for the event.</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment"></span>        std::unique_ptr&lt;T&gt; m_proxy; <span class="comment">///&lt; The proxy managing the event data.</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment"></span>        <span class="keyword">typename</span> T::Origin *<span class="keyword">const</span> m_address;         <span class="comment">///&lt; The MEF data.</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment"></span>        std::unique_ptr&lt;typename T::Origin&gt; m_event; <span class="comment">///&lt; The MEF event.</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment"></span>        mef::FaultTree *m_faultTree;                 <span class="comment">///&lt; Optional container.</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">    /// Removes an existing event from the model.</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">    /// @tparam T  The proxy event type.</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">    /// @pre The event has no dependent/parent gates.</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00574"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent.xhtml">  574</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent.xhtml">RemoveEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1gui_1_1Inverse.xhtml">Inverse</a>&lt;AddEvent&lt;T&gt;&gt;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    {</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        static_assert(std::is_base_of_v&lt;Element, T&gt;);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">        /// Stores model containers and the existing event for removal.</span></div><div class="line"><a name="l00580"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent.xhtml#adfbabe3ca749828b359f28c3b494f30c">  580</a></span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent.xhtml#adfbabe3ca749828b359f28c3b494f30c">RemoveEvent</a>(T *event, <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model, mef::FaultTree *faultTree = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            : <a class="code" href="classscram_1_1gui_1_1Inverse.xhtml">Inverse</a>&lt;<a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml">AddEvent</a>&lt;T&gt;&gt;(</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                  event, model, faultTree,</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                  QObject::tr(<span class="stringliteral">&quot;Remove event &#39;%1&#39;&quot;</span>).arg(event-&gt;<a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">id</a>()))</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        {</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    };</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">    /// Changes the event type.</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">    /// @tparam E  The type of the existing Model Event.</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">    /// @tparam T  The type of the new (target) Event.</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span> E, <span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00593"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml">  593</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml">ChangeEventType</a> : <span class="keyword">public</span> QUndoCommand</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        static_assert(!std::is_same_v&lt;E, T&gt;);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        static_assert(std::is_base_of_v&lt;Element, E&gt;);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        static_assert(std::is_base_of_v&lt;Element, T&gt;);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">        /// Assumes that events have the same ID.</span></div><div class="line"><a name="l00601"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#a82384848e1cd30716585f09ae76d7cd3">  601</a></span>&#160;<span class="comment"></span>        <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#a82384848e1cd30716585f09ae76d7cd3">ChangeEventType</a>(E *currentEvent,</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                        std::unique_ptr&lt;typename T::Origin&gt; newEvent,</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                        <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *model, mef::FaultTree *faultTree = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            : QUndoCommand(QObject::tr(<span class="stringliteral">&quot;Change the type of event &#39;%1&#39;&quot;</span>)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                               .arg(currentEvent-&gt;<a class="code" href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">id</a>())),</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;              m_switchTo{currentEvent, std::make_unique&lt;T&gt;(newEvent.get()),</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                         std::move(newEvent)},</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;              m_model(model), m_faultTree(faultTree),</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;              m_gates(model-&gt;parents(currentEvent-&gt;data()))</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">        /// Switches event type to the target one.</span></div><div class="line"><a name="l00614"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#acbeabece08338086015f8869477a27bc">  614</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#acbeabece08338086015f8869477a27bc">redo</a>()<span class="keyword"> override </span>{ m_switchFrom = m_switchTo(*<span class="keyword">this</span>); }</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">        /// Switches back the event type to the original one.</span></div><div class="line"><a name="l00617"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#ac4f38b52430e987a9849033ae5691ae1">  617</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#ac4f38b52430e987a9849033ae5691ae1">undo</a>()<span class="keyword"> override </span>{ m_switchTo = m_switchFrom(*<span class="keyword">this</span>); }</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">        /// Switches event type from the current one to the next one.</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment"></span>        <span class="keyword">template</span> &lt;<span class="keyword">class</span> Current, <span class="keyword">class</span> Next&gt;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keyword">struct </span>Switch</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        {<span class="comment"></span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">            /// @param[in] self  The provider of access to the model data.</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">            ///</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">            /// @returns The reverse operation to switch types to the origin.</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment"></span>            Switch&lt;Next, Current&gt; operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml">ChangeEventType</a> &amp;<span class="keyword">self</span>)</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            {</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                std::unique_ptr&lt;typename Current::Origin&gt; curEvent =</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                    <span class="keyword">self</span>.m_model-&gt;m_model-&gt;Remove(m_address-&gt;data());</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                std::unique_ptr&lt;Current&gt; curProxy =</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                    ext::extract(m_address-&gt;data(),</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                                 &amp;<span class="keyword">self</span>.m_model-&gt;template table&lt;Current&gt;());</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                emit <span class="keyword">self</span>.m_model-&gt;removed(m_address);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                Next *nextAddress = m_proxy.get();</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                <span class="keyword">self</span>.m_model-&gt;m_model-&gt;Add(std::move(m_event));</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                <span class="keyword">self</span>.m_model-&gt;template table&lt;Next&gt;().emplace(</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                    std::move(m_proxy));</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                emit <span class="keyword">self</span>.m_model-&gt;added(nextAddress);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="keywordflow">if</span> (<span class="keyword">self</span>.m_faultTree) {</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                    <span class="keyword">remove</span>(m_address-&gt;data(), <span class="keyword">self</span>.m_faultTree);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <a class="code" href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">add</a>(nextAddress-&gt;data(), <span class="keyword">self</span>.m_faultTree);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                }</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> *gate : <span class="keyword">self</span>.m_gates) {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    gate-&gt;data()-&gt;formula().RemoveArgument(m_address-&gt;data());</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    gate-&gt;data()-&gt;formula().AddArgument(nextAddress-&gt;data());</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                }</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> *gate : <span class="keyword">self</span>.m_gates)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    emit gate-&gt;formulaChanged();</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                <span class="keywordflow">return</span> {nextAddress, std::move(curProxy), std::move(curEvent)};</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            }</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            Current *m_address;            <span class="comment">///&lt; The proxy in the model.</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment"></span>            std::unique_ptr&lt;Next&gt; m_proxy; <span class="comment">///&lt; The substitute target proxy.</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment"></span>            std::unique_ptr&lt;typename Next::Origin&gt; m_event; <span class="comment">///&lt; The target.</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment"></span>        };</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        Switch&lt;E, T&gt; m_switchTo;   <span class="comment">///&lt; The forward switch.</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment"></span>        Switch&lt;T, E&gt; m_switchFrom; <span class="comment">///&lt; The backward switch.</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <a class="code" href="classscram_1_1gui_1_1model_1_1Model.xhtml">Model</a> *m_model;              <span class="comment">///&lt; The proxy to manage the model.</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment"></span>        mef::FaultTree *m_faultTree; <span class="comment">///&lt; The optional fault tree container.</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment"></span>        std::vector&lt;Gate *&gt; m_gates; <span class="comment">///&lt; The parent gates of the event.</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;signals:<span class="comment"></span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">    /// @param[in] name  The new name of the model.</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> modelNameChanged(QString name);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment">    /// Signals the addition of new elements into the model.</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> added(mef::FaultTree *faultTree);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordtype">void</span> added(<a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">HouseEvent</a> *houseEvent);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordtype">void</span> added(<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> *basicEvent);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordtype">void</span> added(<a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> *gate);<span class="comment"></span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment">    /// Signals the removal of existing elements of the model.</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> removed(mef::FaultTree *faultTree);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordtype">void</span> removed(<a class="code" href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">HouseEvent</a> *houseEvent);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keywordtype">void</span> removed(<a class="code" href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">BasicEvent</a> *basicEvent);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordtype">void</span> removed(<a class="code" href="classscram_1_1gui_1_1model_1_1Gate.xhtml">Gate</a> *gate);<span class="comment"></span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">    /// Normalizes the model to the GUI expectations.</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment">    /// @param[in,out] model  The valid and fully initialized MEF model.</span></div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment">    /// @post No house events or basic events in fault tree containers.</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment">    /// @todo Remove normalization upon full container support for elements.</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> normalize(mef::Model *model);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    mef::Model *m_model; <span class="comment">///&lt; The MEF model with data.</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment">    /// Proxy element tables.</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="comment"></span>    <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;HouseEvent&gt;</a> m_houseEvents;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;BasicEvent&gt;</a> m_basicEvents;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">ProxyTable&lt;Gate&gt;</a> m_gates;<span class="comment"></span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;} <span class="comment">// namespace scram::gui::model</span></div><div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_xhtml_a14671d156e58b060ac84a58410543f64"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a14671d156e58b060ac84a58410543f64">scram::gui::model::Gate::args</a></div><div class="ttdeci">const std::vector&lt; mef::Formula::EventArg &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00377">model.h:377</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml">scram::gui::model::BasicEvent</a></div><div class="ttdoc">The proxy to manage mef::BasicEvent. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00179">model.h:179</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType_xhtml_a82384848e1cd30716585f09ae76d7cd3"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#a82384848e1cd30716585f09ae76d7cd3">scram::gui::model::Model::ChangeEventType::ChangeEventType</a></div><div class="ttdeci">ChangeEventType(E *currentEvent, std::unique_ptr&lt; typename T::Origin &gt; newEvent, Model *model, mef::FaultTree *faultTree=nullptr)</div><div class="ttdoc">Assumes that events have the same ID. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00601">model.h:601</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_1_1SetId_xhtml_ac9bedc69194a1c4f40cd00c369b3034e"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml#ac9bedc69194a1c4f40cd00c369b3034e">scram::gui::model::Element::SetId::SetId</a></div><div class="ttdeci">SetId(T *event, QString name, mef::Model *model, mef::FaultTree *faultTree=nullptr)</div><div class="ttdoc">Stores an element, its new name and parent containers. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00107">model.h:107</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Proxy_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Proxy.xhtml">scram::gui::model::Proxy</a></div><div class="ttdoc">Provides the type and data of the origin for Proxy Elements. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00160">model.h:160</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent_xhtml_ac3f942811ed36fc4e9c21ccce86245cd"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#ac3f942811ed36fc4e9c21ccce86245cd">scram::gui::model::Model::AddEvent::AddEvent</a></div><div class="ttdeci">AddEvent(T *event, Model *model, mef::FaultTree *faultTree, QString description)</div><div class="ttdoc">Sets up the removal state. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00553">model.h:553</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml">scram::gui::model::Model::AddEvent</a></div><div class="ttdoc">Adds an event to the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00515">model.h:515</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_1_1SetFormula_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate_1_1SetFormula.xhtml">scram::gui::model::Gate::SetFormula</a></div><div class="ttdoc">Formula modification commands. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00385">model.h:385</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Inverse_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1Inverse.xhtml">scram::gui::Inverse</a></div><div class="ttdoc">A command that is an inverse of another command. </div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00073">command.h:73</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml">scram::gui::model::Model::ChangeEventType</a></div><div class="ttdoc">Changes the event type. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00593">model.h:593</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_xhtml_ad3a0378c2f765705286b393613606337"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element.xhtml#ad3a0378c2f765705286b393613606337">scram::gui::model::Element::idChanged</a></div><div class="ttdeci">void idChanged(const QString &amp;id)</div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_xhtml_a827dd95218bb3eece34e5777d487a590"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a827dd95218bb3eece34e5777d487a590">scram::gui::model::BasicEvent::flavor</a></div><div class="ttdeci">Flavor flavor() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00207">model.h:207</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml">scram::gui::model::HouseEvent</a></div><div class="ttdoc">The proxy to manage mef::HouseEvent. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00284">model.h:284</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Proxy_xhtml_aefa3db0b6a37351d9967a6307d0e6256"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#aefa3db0b6a37351d9967a6307d0e6256">scram::gui::model::Proxy::data</a></div><div class="ttdeci">T * data()</div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00171">model.h:171</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent_xhtml_a43e171cefe0fd152bf49882eff5214a5"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a43e171cefe0fd152bf49882eff5214a5">scram::gui::model::Model::AddEvent::undo</a></div><div class="ttdeci">void undo() override</div><div class="ttdoc">Removes the event from the containers. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00541">model.h:541</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent_xhtml_a886bf317b9b89f092eec812b7f9c3624"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a886bf317b9b89f092eec812b7f9c3624">scram::gui::model::Model::AddEvent::redo</a></div><div class="ttdeci">void redo() override</div><div class="ttdoc">Adds the event to the containers. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00530">model.h:530</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_xhtml_a89e4a1871e595575425cce763a9f6b74"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element.xhtml#a89e4a1871e595575425cce763a9f6b74">scram::gui::model::Element::Element</a></div><div class="ttdeci">Element(mef::Element *element)</div><div class="ttdoc">Stores the reference to the original MEF Element to manage. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00149">model.h:149</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1HouseEvent_xhtml_ab5c9d5bdbb706310ee87b543f262993b"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml#ab5c9d5bdbb706310ee87b543f262993b">scram::gui::model::HouseEvent::HouseEvent</a></div><div class="ttdeci">HouseEvent(mef::HouseEvent *houseEvent)</div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00290">model.h:290</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Proxy_xhtml_aa7813be3e367179c336ae16bfa7b3e5c"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#aa7813be3e367179c336ae16bfa7b3e5c">scram::gui::model::Proxy&lt; Model, mef::Model &gt;::Origin</a></div><div class="ttdeci">mef::Model Origin</div><div class="ttdoc">The MEF type. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00163">model.h:163</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_xhtml_a82e8bcd852ded4bb3c7e30148c0b18c6"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element.xhtml#a82e8bcd852ded4bb3c7e30148c0b18c6">scram::gui::model::Element::id</a></div><div class="ttdeci">QString id() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00075">model.h:75</a></div></div>
<div class="ttc" id="model_8h_xhtml_a7fb055e96982ca4cfbf9890bcec60b30"><div class="ttname"><a href="model_8h.xhtml#a7fb055e96982ca4cfbf9890bcec60b30">scram::gui::model::boolToString</a></div><div class="ttdeci">QString boolToString(bool value)</div><div class="ttdoc">Converts Boolean value to a UI string. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00278">model.h:278</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_xhtml_a4c7055b012fe4fdd5772acd7c9d6c58d"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element.xhtml#a4c7055b012fe4fdd5772acd7c9d6c58d">scram::gui::model::Element::labelChanged</a></div><div class="ttdeci">void labelChanged(const QString &amp;label)</div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_xhtml_aea601a1adce8e1fcfe4a43db4b370077"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#aea601a1adce8e1fcfe4a43db4b370077">scram::gui::model::BasicEvent::flavorToString</a></div><div class="ttdeci">static QString flavorToString(Flavor flavor)</div><div class="ttdoc">Converts a basic event flavor to a UI string. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00188">model.h:188</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_1_1SetId_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml">scram::gui::model::Element::SetId</a></div><div class="ttdoc">Sets the name of an Element. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00103">model.h:103</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_1_1SetId_xhtml_a4399dee61e3f769bf47f30873fd5cd8a"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element_1_1SetId.xhtml#a4399dee61e3f769bf47f30873fd5cd8a">scram::gui::model::Element::SetId::redo</a></div><div class="ttdeci">void redo() override</div><div class="ttdoc">Applies the new name to the element. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00117">model.h:117</a></div></div>
<div class="ttc" id="model_8h_xhtml_a36d9d2ca037e04518b0e6442ca58b50e"><div class="ttname"><a href="model_8h.xhtml#a36d9d2ca037e04518b0e6442ca58b50e">scram::gui::model::add</a></div><div class="ttdeci">void add(mef::Event *, mef::FaultTree *)</div><div class="ttdoc">Fault tree container element management assuming normalized model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00054">model.h:54</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType_xhtml_ac4f38b52430e987a9849033ae5691ae1"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#ac4f38b52430e987a9849033ae5691ae1">scram::gui::model::Model::ChangeEventType::undo</a></div><div class="ttdeci">void undo() override</div><div class="ttdoc">Switches back the event type to the original one. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00617">model.h:617</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_xhtml_a3db45049d1326cfd214197bfd3aaf007"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a3db45049d1326cfd214197bfd3aaf007">scram::gui::model::Gate::numArgs</a></div><div class="ttdeci">int numArgs() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00369">model.h:369</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1HouseEvent_1_1SetState_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1HouseEvent_1_1SetState.xhtml">scram::gui::model::HouseEvent::SetState</a></div><div class="ttdoc">Flips the house event state. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00305">model.h:305</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType_xhtml_acbeabece08338086015f8869477a27bc"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1ChangeEventType.xhtml#acbeabece08338086015f8869477a27bc">scram::gui::model::Model::ChangeEventType::redo</a></div><div class="ttdeci">void redo() override</div><div class="ttdoc">Switches event type to the target one. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00614">model.h:614</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel_xhtml_a3ef4cffa2ba4d8878da5784dc878dc89"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#a3ef4cffa2ba4d8878da5784dc878dc89">scram::gui::model::Element::SetLabel::redo</a></div><div class="ttdeci">void redo() override</div><div class="ttdoc">Applies changes. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cpp_source.xhtml#l00037">model.cpp:37</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetExpression_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetExpression.xhtml">scram::gui::model::BasicEvent::SetExpression</a></div><div class="ttdoc">Sets the basic event expression. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00237">model.h:237</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_xhtml_af6bdef0f594fd764a96912a4df8eb2f2"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate.xhtml#af6bdef0f594fd764a96912a4df8eb2f2">scram::gui::model::Gate::type</a></div><div class="ttdeci">T type() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00336">model.h:336</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent_xhtml_adfbabe3ca749828b359f28c3b494f30c"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent.xhtml#adfbabe3ca749828b359f28c3b494f30c">scram::gui::model::Model::RemoveEvent::RemoveEvent</a></div><div class="ttdeci">RemoveEvent(T *event, Model *model, mef::FaultTree *faultTree=nullptr)</div><div class="ttdoc">Stores model containers and the existing event for removal. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00580">model.h:580</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_xhtml_a4818a52843b98d6ea4fcbde026405ffe"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model.xhtml#a4818a52843b98d6ea4fcbde026405ffe">scram::gui::model::Model::faultTrees</a></div><div class="ttdeci">const mef::ElementTable&lt; mef::FaultTreePtr &gt; &amp; faultTrees() const </div><div class="ttdoc">The proxy element tables of the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00426">model.h:426</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_xhtml_a4b1d111ebca41747e6f0a8606ecbc89b"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a4b1d111ebca41747e6f0a8606ecbc89b">scram::gui::model::Gate::Gate</a></div><div class="ttdeci">Gate(mef::Gate *gate)</div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00332">model.h:332</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_xhtml_a49da2565500081e227483c22ff7012a6"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model.xhtml#a49da2565500081e227483c22ff7012a6">scram::gui::model::Model::gates</a></div><div class="ttdeci">const ProxyTable&lt; Gate &gt; &amp; gates() const </div><div class="ttdoc">The proxy element tables of the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00425">model.h:425</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Proxy_xhtml_a9302e19d5f845a33bdc31e13b09731c4"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Proxy.xhtml#a9302e19d5f845a33bdc31e13b09731c4">scram::gui::model::Proxy::data</a></div><div class="ttdeci">const T * data() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00167">model.h:167</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree_xhtml_a0020bdcd1aa4458963332cfa77f22455"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml#a0020bdcd1aa4458963332cfa77f22455">scram::gui::model::Model::AddFaultTree::AddFaultTree</a></div><div class="ttdeci">AddFaultTree(mef::FaultTree *address, Model *model, QString description)</div><div class="ttdoc">Sets up the removal state. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00487">model.h:487</a></div></div>
<div class="ttc" id="command_8h_xhtml"><div class="ttname"><a href="command_8h.xhtml">command.h</a></div><div class="ttdoc">Undo-redo helper facilities based on the Qt Undo framework. </div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model.xhtml">scram::gui::model::Model</a></div><div class="ttdoc">The wrapper around the MEF Model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00413">model.h:413</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_xhtml_a2b68382b9c692bac26eb4775ebb366c9"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate.xhtml#a2b68382b9c692bac26eb4775ebb366c9">scram::gui::model::Gate::voteNumber</a></div><div class="ttdeci">int voteNumber() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00374">model.h:374</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml">scram::gui::model::Element::SetLabel</a></div><div class="ttdoc">Sets the label of an Element. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00081">model.h:81</a></div></div>
<div class="ttc" id="model_8h_xhtml_a1c45a19c0c0216e20d0fd6cd2702b576"><div class="ttname"><a href="model_8h.xhtml#a1c45a19c0c0216e20d0fd6cd2702b576">scram::gui::model::ProxyTable</a></div><div class="ttdeci">boost::multi_index_container&lt; std::unique_ptr&lt; T &gt;, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; P, const M *,&amp;P::data &gt;&gt;&gt;&gt; ProxyTable</div><div class="ttdoc">Table of proxy elements uniquely wrapping the core model element. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00410">model.h:410</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel_xhtml_ac899e6f3eea7f5cb847bdcf5362ab6f5"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element_1_1SetLabel.xhtml#ac899e6f3eea7f5cb847bdcf5362ab6f5">scram::gui::model::Element::SetLabel::SetLabel</a></div><div class="ttdeci">SetLabel(Element *element, QString label)</div><div class="ttdoc">Stores an element and its new label. </div><div class="ttdef"><b>Definition:</b> <a href="model_8cpp_source.xhtml#l00030">model.cpp:30</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_xhtml_ab2765dbdbbecacce8685c74c60228377"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model.xhtml#ab2765dbdbbecacce8685c74c60228377">scram::gui::model::Model::basicEvents</a></div><div class="ttdeci">const ProxyTable&lt; BasicEvent &gt; &amp; basicEvents() const </div><div class="ttdoc">The proxy element tables of the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00424">model.h:424</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_xhtml_a4252873cbeb2ec908843a8aa222804a4"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a4252873cbeb2ec908843a8aa222804a4">scram::gui::model::BasicEvent::expression</a></div><div class="ttdeci">mef::Expression * expression() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00211">model.h:211</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element.xhtml">scram::gui::model::Element</a></div><div class="ttdoc">The base proxy Element model for mef::Element. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00064">model.h:64</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_xhtml_afa74624b4e4b7e996d07541e9951b228"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model.xhtml#afa74624b4e4b7e996d07541e9951b228">scram::gui::model::Model::houseEvents</a></div><div class="ttdeci">const ProxyTable&lt; HouseEvent &gt; &amp; houseEvents() const </div><div class="ttdoc">The proxy element tables of the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00423">model.h:423</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent_xhtml_a50e6b4c4475392cbbbdf8b870b89aa32"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddEvent.xhtml#a50e6b4c4475392cbbbdf8b870b89aa32">scram::gui::model::Model::AddEvent::AddEvent</a></div><div class="ttdeci">AddEvent(std::unique_ptr&lt; typename T::Origin &gt; event, Model *model, mef::FaultTree *faultTree=nullptr)</div><div class="ttdoc">Stores the newly defined event and its destination container. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00519">model.h:519</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Involution_xhtml_aaa815e4ad30b18fa20d202889b74dc10"><div class="ttname"><a href="classscram_1_1gui_1_1Involution.xhtml#aaa815e4ad30b18fa20d202889b74dc10">scram::gui::Involution::undo</a></div><div class="ttdeci">void undo() final</div><div class="ttdoc">The redo is always called first; therefore, undo is implemented in terms of redo. ...</div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00064">command.h:64</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_xhtml_a52a0fb432e34411d76e2f91c5eaf9362"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model.xhtml#a52a0fb432e34411d76e2f91c5eaf9362">scram::gui::model::Model::table</a></div><div class="ttdeci">ProxyTable&lt; T &gt; &amp; table()</div><div class="ttdoc">Generic access to event tables. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00434">model.h:434</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Involution_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1Involution.xhtml">scram::gui::Involution</a></div><div class="ttdoc">The function inverse is the function itself (i.e., f(f(x)) = id(x)). </div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00057">command.h:57</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1AddFaultTree.xhtml">scram::gui::model::Model::AddFaultTree</a></div><div class="ttdoc">Adds a fault tree into a model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00476">model.h:476</a></div></div>
<div class="ttc" id="namespacescram_1_1gui_1_1model_xhtml"><div class="ttname"><a href="namespacescram_1_1gui_1_1model.xhtml">scram::gui::model</a></div><div class="ttdef"><b>Definition:</b> <a href="elementcontainermodel_8cpp_source.xhtml#l00030">elementcontainermodel.cpp:30</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Element_xhtml_a6d4704b8160d88d8a49f76096ee45677"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Element.xhtml#a6d4704b8160d88d8a49f76096ee45677">scram::gui::model::Element::label</a></div><div class="ttdeci">QString label() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00078">model.h:78</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveEvent.xhtml">scram::gui::model::Model::RemoveEvent</a></div><div class="ttdoc">Removes an existing event from the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00574">model.h:574</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_xhtml_ab7f31b7b0f9210d2fe64eea3e1c027a4"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#ab7f31b7b0f9210d2fe64eea3e1c027a4">scram::gui::model::BasicEvent::probability</a></div><div class="ttdeci">T probability() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00220">model.h:220</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_xhtml_a83e39d8225b8a2d4e1a8a00cf5e7f76e"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent.xhtml#a83e39d8225b8a2d4e1a8a00cf5e7f76e">scram::gui::model::BasicEvent::Flavor</a></div><div class="ttdeci">Flavor</div><div class="ttdoc">Basic event flavors. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00185">model.h:185</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1RemoveFaultTree_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1RemoveFaultTree.xhtml">scram::gui::model::Model::RemoveFaultTree</a></div><div class="ttdoc">Removes a fault tree from the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00500">model.h:500</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetFlavor_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1BasicEvent_1_1SetFlavor.xhtml">scram::gui::model::BasicEvent::SetFlavor</a></div><div class="ttdoc">Sets the flavor of the basic event. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00253">model.h:253</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1HouseEvent_xhtml_a5d7cf6bceaeb71186648ee0e30bb9710"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1HouseEvent.xhtml#a5d7cf6bceaeb71186648ee0e30bb9710">scram::gui::model::HouseEvent::state</a></div><div class="ttdeci">T state() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00294">model.h:294</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Model_1_1SetName_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Model_1_1SetName.xhtml">scram::gui::model::Model::SetName</a></div><div class="ttdoc">Sets the optional name of the model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00458">model.h:458</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1model_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1model_1_1Gate.xhtml">scram::gui::model::Gate</a></div><div class="ttdoc">The proxy to manage mef::Gate. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00326">model.h:326</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:46 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
