<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>command.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_11bc0974ce736ce9a6fadebbeb7a8314.xhtml">gui</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">command.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="command_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Undo-redo helper facilities based on the Qt Undo framework.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/// Undo-redo facilities assume the following contract:</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">/// 0. The facilities are special purpose to work with the undo-redo stack.</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">/// 1. The redo is always called first.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/// 2. The undo-redo functions are not required to be idempotent.</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">///    Calling the redo (or undo) consecutively yields undefined behavior.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">///    In other words, the redo can only be followed by the undo,</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">///    and the undo can only be followed by the redo.</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">/// 3. The system state is only changed with the undo-redo facilities.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/// 4. As a consequence of contract #2 and #3,</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">///    the implementation can and should optimize the state storage</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">///    to hold only single snapshot data (no duplication of the state).</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">///    That is, the redo stage saves the past (by overwriting the future),</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">///    and the undo stage saves the future by overwriting the saved past.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/// 5. Objects (undo-redo arguments) must be alive and have stable addresses for</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">///    at least as long as there&#39;s a referencing undo-redo command in the stack.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">///    Constructive/destructive commands extend</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">///    the life-time of an object for this reason.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">///    That is, destructive commands do not destroy/deallocate at redo</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">///    or re-construct/allocate at undo (vice-versa for the constructive).</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">///    The object is destroyed/deallocated</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">///    after its corresponding constructive/destructive commands are destroyed</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">///    (e.g., by being popped/removed from the undo stack).</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;QUndoCommand&gt;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1gui.xhtml">scram::gui</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// The function inverse is the function itself (i.e., f(f(x)) = id(x)).</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/// In other words, undo and redo codes are exactly the same,</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// but the arguments are different (one&#39;s output is the other&#39;s argument).</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// In this case, the argument is the state of the object or system.</span></div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1Involution.xhtml">   57</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1Involution.xhtml">Involution</a> : <span class="keyword">public</span> QUndoCommand</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">using</span> QUndoCommand::QUndoCommand;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /// The redo is always called first;</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    /// therefore, undo is implemented in terms of redo.</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1Involution.xhtml#aaa815e4ad30b18fa20d202889b74dc10">   64</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1Involution.xhtml#aaa815e4ad30b18fa20d202889b74dc10">undo</a>() final { <span class="keywordflow">return</span> redo(); }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;};</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// A command that is an inverse of another command.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// @tparam T  The undo-redo command type.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// @pre T command can tolerate the undo before the redo.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1Inverse.xhtml">   73</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1gui_1_1Inverse.xhtml">Inverse</a> : <span class="keyword">public</span> T</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    static_assert(std::is_base_of_v&lt;QUndoCommand, T&gt;);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// Applies the command.</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1Inverse.xhtml#afaa39ce1a70840c9adcab58b3261a70a">   79</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1Inverse.xhtml#afaa39ce1a70840c9adcab58b3261a70a">redo</a>() final { T::undo(); }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /// Reverses the command.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classscram_1_1gui_1_1Inverse.xhtml#af6704abf13b79f84c84e7ba1ba60c1d9">   82</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="classscram_1_1gui_1_1Inverse.xhtml#af6704abf13b79f84c84e7ba1ba60c1d9">undo</a>() final { T::redo(); }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">using</span> T::T;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;} <span class="comment">// namespace scram::gui</span></div><div class="ttc" id="classscram_1_1gui_1_1Inverse_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1Inverse.xhtml">scram::gui::Inverse</a></div><div class="ttdoc">A command that is an inverse of another command. </div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00073">command.h:73</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Involution_xhtml_aaa815e4ad30b18fa20d202889b74dc10"><div class="ttname"><a href="classscram_1_1gui_1_1Involution.xhtml#aaa815e4ad30b18fa20d202889b74dc10">scram::gui::Involution::undo</a></div><div class="ttdeci">void undo() final</div><div class="ttdoc">The redo is always called first; therefore, undo is implemented in terms of redo. ...</div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00064">command.h:64</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Inverse_xhtml_af6704abf13b79f84c84e7ba1ba60c1d9"><div class="ttname"><a href="classscram_1_1gui_1_1Inverse.xhtml#af6704abf13b79f84c84e7ba1ba60c1d9">scram::gui::Inverse::undo</a></div><div class="ttdeci">void undo() final</div><div class="ttdoc">Reverses the command. </div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00082">command.h:82</a></div></div>
<div class="ttc" id="namespacescram_1_1gui_xhtml"><div class="ttname"><a href="namespacescram_1_1gui.xhtml">scram::gui</a></div><div class="ttdef"><b>Definition:</b> <a href="align_8h_source.xhtml#l00025">align.h:25</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Involution_xhtml"><div class="ttname"><a href="classscram_1_1gui_1_1Involution.xhtml">scram::gui::Involution</a></div><div class="ttdoc">The function inverse is the function itself (i.e., f(f(x)) = id(x)). </div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00057">command.h:57</a></div></div>
<div class="ttc" id="classscram_1_1gui_1_1Inverse_xhtml_afaa39ce1a70840c9adcab58b3261a70a"><div class="ttname"><a href="classscram_1_1gui_1_1Inverse.xhtml#afaa39ce1a70840c9adcab58b3261a70a">scram::gui::Inverse::redo</a></div><div class="ttdeci">void redo() final</div><div class="ttdoc">Applies the command. </div><div class="ttdef"><b>Definition:</b> <a href="command_8h_source.xhtml#l00079">command.h:79</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:46 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
