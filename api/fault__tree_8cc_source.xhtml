<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>fault_tree.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fault_tree.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fault__tree_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of fault tree and component containers.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree_8h.xhtml">fault_tree.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">   27</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">Component::Component</a>(std::string name, std::string base_path,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                     <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::move(name)), <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(role, std::move(base_path)) {}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">   31</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate) { AddEvent(gate, &amp;gates_); }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#abc79a1cde0e4773543ccd25743c44a7f">   33</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* basic_event) {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  AddEvent(basic_event, &amp;basic_events_);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#af901b99ff262cdea54d489f54c1fb7ed">   37</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>* house_event) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  AddEvent(house_event, &amp;house_events_);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#aa9538976982788735cf95ec860d1b71e">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* parameter) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  mef::AddElement&lt;ValidityError&gt;(parameter, &amp;parameters_,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                 <span class="stringliteral">&quot;Duplicate parameter: &quot;</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a4fd4a9b195b92c8061149da20f5bd3f0">   46</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">if</span> (ccf_groups_.count(ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>())) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Duplicate CCF group &quot;</span> + ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* member : ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">members</a>()) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = member-&gt;name();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">if</span> (gates_.count(name) || basic_events_.count(name) ||</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        house_events_.count(name)) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Duplicate event &quot;</span> + name + <span class="stringliteral">&quot; from CCF group &quot;</span> +</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()));</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; member : ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">members</a>())</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    basic_events_.insert(member);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  ccf_groups_.insert(ccf_group);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a24d2dd4d7b3cbd4edf11a1f17acaaab3">   63</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Component::Add</a>(std::unique_ptr&lt;Component&gt; component) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordflow">if</span> (components_.count(component-&gt;name())) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Duplicate component &quot;</span> + component-&gt;name()));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  components_.insert(std::move(component));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// Helper function to remove events from component containers.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">void</span> RemoveEvent(T* event, <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;T*&gt;</a>* table) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keyword">auto</span> it = table-&gt;find(event-&gt;name());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">if</span> (it == table-&gt;end())</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="structscram_1_1mef_1_1UndefinedElement.xhtml">UndefinedElement</a>(<span class="stringliteral">&quot;Event &quot;</span> + event-&gt;id() + <span class="stringliteral">&quot; is not in the component.&quot;</span>));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">if</span> (*it != event)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1UndefinedElement.xhtml">UndefinedElement</a>(<span class="stringliteral">&quot;Duplicate event &quot;</span> + event-&gt;id() +</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                 <span class="stringliteral">&quot; does not belong to the component.&quot;</span>));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  table-&gt;erase(it);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#ab9230b43d6903a2e26bf55f7584a1f56">   87</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ab9230b43d6903a2e26bf55f7584a1f56">Component::Remove</a>(<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>* element) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordflow">return</span> RemoveEvent(element, &amp;house_events_);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a1947110658c102a436b3120295ef88be">   91</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ab9230b43d6903a2e26bf55f7584a1f56">Component::Remove</a>(<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* element) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">return</span> RemoveEvent(element, &amp;basic_events_);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a345ea5cb8c020588409e60fc94d21d61">   95</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ab9230b43d6903a2e26bf55f7584a1f56">Component::Remove</a>(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* element) { <span class="keywordflow">return</span> RemoveEvent(element, &amp;gates_); }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">   97</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">Component::GatherGates</a>(std::unordered_set&lt;Gate*&gt;* <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">gates</a>) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  gates-&gt;insert(gates_.begin(), gates_.end());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a>&amp; component : components_)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    component-&gt;GatherGates(gates);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Container&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">void</span> Component::AddEvent(T* event, Container* container) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = <span class="keyword">event</span>-&gt;name();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keywordflow">if</span> (gates_.count(name) || basic_events_.count(name) ||</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      house_events_.count(name)) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Duplicate event &quot;</span> + name));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  container-&gt;insert(event);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">  113</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">FaultTree::FaultTree</a>(<span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>) : <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>(name) {}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">  115</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">FaultTree::CollectTopEvents</a>() {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  top_events_.clear();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  std::unordered_set&lt;Gate*&gt; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">gates</a>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">Component::GatherGates</a>(&amp;gates);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="comment">// Detects top events.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : gates)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    MarkNonTopGates(gate, gates);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : gates) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;mark()) {  <span class="comment">// Not a top event.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      gate-&gt;mark(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">NodeMark::kClear</a>);  <span class="comment">// Cleaning up.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      top_events_.push_back(gate);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keywordtype">void</span> FaultTree::MarkNonTopGates(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">gates</a>) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>())</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  MarkNonTopGates(gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(), <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">gates</a>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keywordtype">void</span> FaultTree::MarkNonTopGates(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; formula,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; gates) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a>&amp; event_arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>()) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* <span class="keyword">const</span>* gate = std::get_if&lt;Gate*&gt;(&amp;event_arg)) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="keywordflow">if</span> (gates.count(*gate)) {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        MarkNonTopGates(*gate, gates);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        (*gate)-&gt;mark(NodeMark::kPermanent);  <span class="comment">// Any non clear mark can be used.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>()) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    MarkNonTopGates(*arg, gates);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00036">fault_tree.h:36</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a29871b1caf2fb961509b42872e6b5213"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">scram::mef::Component::Add</a></div><div class="ttdeci">void Add(Gate *element)</div><div class="ttdoc">Adds MEF constructs into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00031">fault_tree.cc:31</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_ad246305a79904f65b36157096464703b"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">scram::mef::Component::gates</a></div><div class="ttdeci">const ElementTable&lt; Gate * &gt; &amp; gates() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00060">fault_tree.h:60</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml"><div class="ttname"><a href="fault__tree_8h.xhtml">fault_tree.h</a></div><div class="ttdoc">Fault Tree and Component containers. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00173">event.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a06dd05cabcbeddf42090536f6a47a184"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">scram::mef::CcfGroup::members</a></div><div class="ttdeci">const std::vector&lt; BasicEvent * &gt; &amp; members() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00093">ccf_group.h:93</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a358b7ba8bf8488abfcd22516474b2ad5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">scram::mef::Formula::EventArg</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00230">event.h:230</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a63441da08667fe6826f3ae0c0a5a94fe"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">scram::mef::Component::GatherGates</a></div><div class="ttdeci">void GatherGates(std::unordered_set&lt; Gate * &gt; *gates)</div><div class="ttdoc">Recursively traverses components to gather gates relevant to the whole component. ...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00097">fault_tree.cc:97</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml">scram::mef::HouseEvent</a></div><div class="ttdoc">Representation of a house event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00049">event.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_ae433446a44a3ae40ec411b08916ec4ca"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">scram::mef::NodeMark::mark</a></div><div class="ttdeci">Mark mark() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00290">element.h:290</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a4e86a729bae4629de0217c9f8c6960a0"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">scram::mef::Formula::event_args</a></div><div class="ttdeci">const std::vector&lt; EventArg &gt; &amp; event_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00258">event.h:258</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1572ca4bef5e3095daa07536ec422ac7"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">scram::mef::Component::Component</a></div><div class="ttdeci">Component(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructs a component assuming that it exists within some fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00027">fault_tree.cc:27</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_a9535bd49edb4598ead887faf8dadd9f2"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">scram::mef::FaultTree::CollectTopEvents</a></div><div class="ttdeci">void CollectTopEvents()</div><div class="ttdoc">Collects top event gates in this fault tree with components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00115">fault_tree.cc:115</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_ab090011090e3250c391886a78fd79720"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">scram::mef::FaultTree::FaultTree</a></div><div class="ttdeci">FaultTree(const std::string &amp;name)</div><div class="ttdoc">The main constructor of the Fault Tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00113">fault_tree.cc:113</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af3c5953f817cc202b5009cc4557c7d72"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">scram::mef::Formula::formula_args</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; formula_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00259">event.h:259</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">scram::mef::NodeMark::kClear</a></div><div class="ttdoc">Implicit conversion to Boolean false. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00284">element.h:284</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00153">element.h:153</a></div></div>
<div class="ttc" id="element_8h_xhtml_ab162a6f742c23405f33db706d5a927b4"><div class="ttname"><a href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">scram::mef::ElementTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Element, const std::string &amp;,&amp;Element::name &gt;&gt;&gt;&gt; ElementTable</div><div class="ttdoc">Table of elements with unique names. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00150">element.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00047">element.h:47</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_ad5409b17f257599c4dd852533a4f289a"><div class="ttname"><a href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">scram::mef::ComponentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Component &gt; ComponentPtr</div><div class="ttdoc">Unique system components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00133">fault_tree.h:133</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_ab9230b43d6903a2e26bf55f7584a1f56"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#ab9230b43d6903a2e26bf55f7584a1f56">scram::mef::Component::Remove</a></div><div class="ttdeci">void Remove(HouseEvent *element)</div><div class="ttdoc">Removes Event from the component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00087">fault_tree.cc:87</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00086">ccf_group.h:86</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00159">element.h:159</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1UndefinedElement_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1UndefinedElement.xhtml">scram::mef::UndefinedElement</a></div><div class="ttdoc">The error for undefined elements in a model. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00114">error.h:114</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml">scram::mef::Parameter</a></div><div class="ttdoc">This class provides a representation of a variable in basic event description. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00087">parameter.h:87</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
