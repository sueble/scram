<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>test_event.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">test_event.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="test__event_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Event tree analysis expressions to test functional and initiating events.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">src/expression.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/// The context for test-event expressions.</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Context.xhtml">   31</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Context.xhtml">Context</a> {</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Context.xhtml#ab6d0fe94126971cab2e11ac0c370e149">   32</a></span>&#160;  std::string <a class="code" href="structscram_1_1mef_1_1Context.xhtml#ab6d0fe94126971cab2e11ac0c370e149">initiating_event</a>;  <span class="comment">///&lt; The name of the initiating event.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span><span class="comment">  /// The functional event names and states.</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Context.xhtml#ada1f9196c906e76fd2e0caa2f59c518e">   34</a></span>&#160;<span class="comment"></span>  std::unordered_map&lt;std::string, std::string&gt; <a class="code" href="structscram_1_1mef_1_1Context.xhtml#ada1f9196c906e76fd2e0caa2f59c518e">functional_events</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;};</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// The abstract base class for non-deviate test-event expressions.</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestEvent.xhtml">   38</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml">TestEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">  /// @param[in] context  The event-tree walk context.</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestEvent.xhtml#a88ae252eb4219a688b5e097b3aa22a5f">   41</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml#a88ae252eb4219a688b5e097b3aa22a5f">TestEvent</a>(<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Context.xhtml">Context</a>* context) : context_(*context) {}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestEvent.xhtml#ab05dcb05c7663691207da1782c416782">   43</a></span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml#ab05dcb05c7663691207da1782c416782">interval</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> Interval::closed(0, 1); }</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestEvent.xhtml#a2ec0181306efc8eafcae561051358668">   44</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml#a2ec0181306efc8eafcae561051358668">IsDeviate</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestEvent.xhtml#a45e5aa3eebf21fd6f98592f4fa7d0a75">   47</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Context.xhtml">Context</a>&amp; <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml#a45e5aa3eebf21fd6f98592f4fa7d0a75">context_</a>;  <span class="comment">///&lt; The evaluation context.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordtype">double</span> DoSample() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// Upon event-tree walk, tests whether an initiating event has occurred.</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestInitiatingEvent.xhtml">   54</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1TestInitiatingEvent.xhtml">TestInitiatingEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml">TestEvent</a> {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  /// @copydoc TestEvent::TestEvent</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  /// @param[in] name  The public element name of the initiating event to test.</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestInitiatingEvent.xhtml#aeed83fd8afd5d68ea4bc0b53864ffec6">   58</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1TestInitiatingEvent.xhtml#aeed83fd8afd5d68ea4bc0b53864ffec6">TestInitiatingEvent</a>(std::string name, <span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Context.xhtml">Context</a>* context)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml">TestEvent</a>(context), name_(std::move(name)) {}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @returns true if the initiating event has occurred in the event-tree walk.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> value() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  std::string name_;  <span class="comment">///&lt; The name of the initiating event.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/// Upon event-tree walk, tests whether a functional event has occurred.</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestFunctionalEvent.xhtml">   69</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1TestFunctionalEvent.xhtml">TestFunctionalEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml">TestEvent</a> {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  /// @copydoc TestEvent::TestEvent</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  /// @param[in] name  The public element name of the functional event to test.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  /// @param[in] state  One of the valid states of the functional event.</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1TestFunctionalEvent.xhtml#a60142da1a6605b82facc5149d98d3f39">   74</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1TestFunctionalEvent.xhtml#a60142da1a6605b82facc5149d98d3f39">TestFunctionalEvent</a>(std::string name, std::string state,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                      <span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Context.xhtml">Context</a>* context)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1TestEvent.xhtml">TestEvent</a>(context), name_(std::move(name)), state_(std::move(state)) {}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// @returns true if the functional event has occurred and is in given state.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> value() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  std::string name_;  <span class="comment">///&lt; The name of the functional event.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>  std::string state_;  <span class="comment">///&lt; The state of the functional event.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="expression_8h_xhtml_afc9530f5ba8d4c2ccf0b40c7422a44c0"><div class="ttname"><a href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">scram::mef::Interval</a></div><div class="ttdeci">boost::icl::continuous_interval&lt; double &gt; Interval</div><div class="ttdoc">Validation domain interval for expression values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00035">expression.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestInitiatingEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1TestInitiatingEvent.xhtml">scram::mef::TestInitiatingEvent</a></div><div class="ttdoc">Upon event-tree walk, tests whether an initiating event has occurred. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00054">test_event.h:54</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Context_xhtml_ada1f9196c906e76fd2e0caa2f59c518e"><div class="ttname"><a href="structscram_1_1mef_1_1Context.xhtml#ada1f9196c906e76fd2e0caa2f59c518e">scram::mef::Context::functional_events</a></div><div class="ttdeci">std::unordered_map&lt; std::string, std::string &gt; functional_events</div><div class="ttdoc">The functional event names and states. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00034">test_event.h:34</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestEvent_xhtml_ab05dcb05c7663691207da1782c416782"><div class="ttname"><a href="classscram_1_1mef_1_1TestEvent.xhtml#ab05dcb05c7663691207da1782c416782">scram::mef::TestEvent::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00043">test_event.h:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1TestEvent.xhtml">scram::mef::TestEvent</a></div><div class="ttdoc">The abstract base class for non-deviate test-event expressions. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00038">test_event.h:38</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Context_xhtml_ab6d0fe94126971cab2e11ac0c370e149"><div class="ttname"><a href="structscram_1_1mef_1_1Context.xhtml#ab6d0fe94126971cab2e11ac0c370e149">scram::mef::Context::initiating_event</a></div><div class="ttdeci">std::string initiating_event</div><div class="ttdoc">The name of the initiating event. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00032">test_event.h:32</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestFunctionalEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1TestFunctionalEvent.xhtml">scram::mef::TestFunctionalEvent</a></div><div class="ttdoc">Upon event-tree walk, tests whether a functional event has occurred. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00069">test_event.h:69</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Context_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Context.xhtml">scram::mef::Context</a></div><div class="ttdoc">The context for test-event expressions. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00031">test_event.h:31</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestEvent_xhtml_a45e5aa3eebf21fd6f98592f4fa7d0a75"><div class="ttname"><a href="classscram_1_1mef_1_1TestEvent.xhtml#a45e5aa3eebf21fd6f98592f4fa7d0a75">scram::mef::TestEvent::context_</a></div><div class="ttdeci">const Context &amp; context_</div><div class="ttdoc">The evaluation context. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00047">test_event.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestEvent_xhtml_a88ae252eb4219a688b5e097b3aa22a5f"><div class="ttname"><a href="classscram_1_1mef_1_1TestEvent.xhtml#a88ae252eb4219a688b5e097b3aa22a5f">scram::mef::TestEvent::TestEvent</a></div><div class="ttdeci">TestEvent(const Context *context)</div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00041">test_event.h:41</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestFunctionalEvent_xhtml_a60142da1a6605b82facc5149d98d3f39"><div class="ttname"><a href="classscram_1_1mef_1_1TestFunctionalEvent.xhtml#a60142da1a6605b82facc5149d98d3f39">scram::mef::TestFunctionalEvent::TestFunctionalEvent</a></div><div class="ttdeci">TestFunctionalEvent(std::string name, std::string state, const Context *context)</div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00074">test_event.h:74</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestEvent_xhtml_a2ec0181306efc8eafcae561051358668"><div class="ttname"><a href="classscram_1_1mef_1_1TestEvent.xhtml#a2ec0181306efc8eafcae561051358668">scram::mef::TestEvent::IsDeviate</a></div><div class="ttdeci">bool IsDeviate() noexceptoverride</div><div class="ttdoc">Determines if the value of the expression contains deviate expressions. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00044">test_event.h:44</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1TestInitiatingEvent_xhtml_aeed83fd8afd5d68ea4bc0b53864ffec6"><div class="ttname"><a href="classscram_1_1mef_1_1TestInitiatingEvent.xhtml#aeed83fd8afd5d68ea4bc0b53864ffec6">scram::mef::TestInitiatingEvent::TestInitiatingEvent</a></div><div class="ttdeci">TestInitiatingEvent(std::string name, const Context *context)</div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00058">test_event.h:58</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
