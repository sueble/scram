<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>expression.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">expression.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="expression_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of the expression base class.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">expression.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#a1700295154b8db507896804ad4307c14">   30</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a1700295154b8db507896804ad4307c14">Expression::Expression</a>(std::vector&lt;Expression*&gt; args)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : args_(std::move(args)), sampled_value_(0), sampled_(false) {}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">   33</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Expression::Sample</a>() noexcept {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keywordflow">if</span> (!sampled_) {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    sampled_ = <span class="keyword">true</span>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    sampled_value_ = this-&gt;DoSample();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">return</span> sampled_value_;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">Expression::Reset</a>() noexcept {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">if</span> (!sampled_)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  sampled_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg : args_)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    arg-&gt;Reset();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#a058aef65da884a47ea3345bc31488b7a">   49</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a058aef65da884a47ea3345bc31488b7a">Expression::IsDeviate</a>() noexcept {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">return</span> ext::any_of(args_, [](<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg) { <span class="keywordflow">return</span> arg-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a058aef65da884a47ea3345bc31488b7a">IsDeviate</a>(); });</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">namespace </span>detail {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="expression_8cc.xhtml#aac4a2edaf2210ace71f0d39e50a3738b">   55</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8cc.xhtml#aac4a2edaf2210ace71f0d39e50a3738b">EnsureMultivariateArgs</a>(std::vector&lt;Expression*&gt; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a>) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordflow">if</span> (args.size() &lt; 2)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Expression requires 2 or more arguments.&quot;</span>));</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}  <span class="comment">// namespace detail</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">   62</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">EnsureProbability</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> std::string&amp; description,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">char</span>* type) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a> = expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordflow">if</span> (value &lt; 0 || value &gt; 1)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;Invalid &quot;</span> + std::string(type) + <span class="stringliteral">&quot; value for &quot;</span> +</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                            description));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="expression_8h.xhtml#a7b3a2de3be05128d51eaa76c01de99f6">IsProbability</a>(expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>()) == <span class="keyword">false</span>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;Invalid &quot;</span> + std::string(type) +</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                            <span class="stringliteral">&quot; sample domain for &quot;</span> + description));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="expression_8cc.xhtml#a0361a4eda6025e09ca91ec2d1447ad1b">   74</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8cc.xhtml#a0361a4eda6025e09ca91ec2d1447ad1b">EnsurePositive</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> std::string&amp; description) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">if</span> (expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(description + <span class="stringliteral">&quot; argument value must be positive.&quot;</span>));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="expression_8h.xhtml#a4962ab79380de2b807438620d16a098e">IsPositive</a>(expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>()) == <span class="keyword">false</span>)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(description + <span class="stringliteral">&quot; argument sample domain must be positive.&quot;</span>));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="expression_8cc.xhtml#a9b787fed653e7b5a1b6d6ace04643516">   82</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8cc.xhtml#a9b787fed653e7b5a1b6d6ace04643516">EnsureNonNegative</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> std::string&amp; description) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">if</span> (expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt; 0)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(description + <span class="stringliteral">&quot; argument value cannot be negative.&quot;</span>));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">IsNonNegative</a>(expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>()) == <span class="keyword">false</span>)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(description +</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                            <span class="stringliteral">&quot; argument sample cannot have negative values.&quot;</span>));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="expression_8cc.xhtml#aa5f8250f3fc162fc8c018bd57c877a0e">   91</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8cc.xhtml#aa5f8250f3fc162fc8c018bd57c877a0e">EnsureWithin</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a>&amp; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">char</span>* type) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordtype">double</span> arg_value = expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">Contains</a>(interval, arg_value)) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    ss &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot; argument value [&quot;</span> &lt;&lt; arg_value &lt;&lt; <span class="stringliteral">&quot;] must be in &quot;</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;       &lt;&lt; interval &lt;&lt; <span class="stringliteral">&quot;.&quot;</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(ss.str()));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> arg_interval = expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordflow">if</span> (!boost::icl::within(arg_interval, interval)) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    ss &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot; argument sample domain &quot;</span> &lt;&lt; arg_interval &lt;&lt; <span class="stringliteral">&quot; must be in &quot;</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;       &lt;&lt; interval &lt;&lt; <span class="stringliteral">&quot;.&quot;</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(ss.str()));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="expression_8h_xhtml_afc9530f5ba8d4c2ccf0b40c7422a44c0"><div class="ttname"><a href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">scram::mef::Interval</a></div><div class="ttdeci">boost::icl::continuous_interval&lt; double &gt; Interval</div><div class="ttdoc">Validation domain interval for expression values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00035">expression.h:35</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a3876b976ae2dd7f37465f916315829a1"><div class="ttname"><a href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">scram::mef::Contains</a></div><div class="ttdeci">bool Contains(const Interval &amp;interval, double value)</div><div class="ttdoc">Returns true if a given interval contains a given value. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00041">expression.h:41</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a2c0a639b694ccfdf4b7d6913d8a635de"><div class="ttname"><a href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">scram::mef::EnsureProbability</a></div><div class="ttdeci">void EnsureProbability(Expression *expression, const std::string &amp;description, const char *type)</div><div class="ttdoc">Ensures that expression can be used for probability ([0, 1]). </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00062">expression.cc:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ab6d31c4ddb5d4a827727829cbd4e4449"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">scram::mef::Expression::Reset</a></div><div class="ttdeci">void Reset() noexcept</div><div class="ttdoc">This routine resets the sampling to get new values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00041">expression.cc:41</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="expression_8h_xhtml_a4962ab79380de2b807438620d16a098e"><div class="ttname"><a href="expression_8h.xhtml#a4962ab79380de2b807438620d16a098e">scram::mef::IsPositive</a></div><div class="ttdeci">bool IsPositive(const Interval &amp;interval)</div><div class="ttdoc">Checks if all values in a given interval are positive. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00056">expression.h:56</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_aac4a2edaf2210ace71f0d39e50a3738b"><div class="ttname"><a href="expression_8cc.xhtml#aac4a2edaf2210ace71f0d39e50a3738b">scram::mef::detail::EnsureMultivariateArgs</a></div><div class="ttdeci">void EnsureMultivariateArgs(std::vector&lt; Expression * &gt; args)</div><div class="ttdoc">Ensures the number of args for multivariate expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00055">expression.cc:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00078">expression.h:78</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a0361a4eda6025e09ca91ec2d1447ad1b"><div class="ttname"><a href="expression_8cc.xhtml#a0361a4eda6025e09ca91ec2d1447ad1b">scram::mef::EnsurePositive</a></div><div class="ttdeci">void EnsurePositive(Expression *expression, const std::string &amp;description)</div><div class="ttdoc">Ensures that expression yields positive (&gt; 0) values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00074">expression.cc:74</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_aa5f8250f3fc162fc8c018bd57c877a0e"><div class="ttname"><a href="expression_8cc.xhtml#aa5f8250f3fc162fc8c018bd57c877a0e">scram::mef::EnsureWithin</a></div><div class="ttdeci">void EnsureWithin(Expression *expression, const Interval &amp;interval, const char *type)</div><div class="ttdoc">Ensures that expression values are within the interval. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00091">expression.cc:91</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a9b787fed653e7b5a1b6d6ace04643516"><div class="ttname"><a href="expression_8cc.xhtml#a9b787fed653e7b5a1b6d6ace04643516">scram::mef::EnsureNonNegative</a></div><div class="ttdeci">void EnsureNonNegative(Expression *expression, const std::string &amp;description)</div><div class="ttdoc">Ensures that expression yields non-negative (&gt;= 0) values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00082">expression.cc:82</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a7b3a2de3be05128d51eaa76c01de99f6"><div class="ttname"><a href="expression_8h.xhtml#a7b3a2de3be05128d51eaa76c01de99f6">scram::mef::IsProbability</a></div><div class="ttdeci">bool IsProbability(const Interval &amp;interval)</div><div class="ttdoc">Checks if a given interval is within the probability domain. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00046">expression.h:46</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a179b21e75df522673e6d51b784d10e86"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">scram::mef::Expression::interval</a></div><div class="ttdeci">virtual Interval interval() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00091">expression.h:91</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a058aef65da884a47ea3345bc31488b7a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a058aef65da884a47ea3345bc31488b7a">scram::mef::Expression::IsDeviate</a></div><div class="ttdeci">virtual bool IsDeviate() noexcept</div><div class="ttdoc">Determines if the value of the expression contains deviate expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00049">expression.cc:49</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a5682dd6fbc6d7dd33ebf8b5665006b99"><div class="ttname"><a href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">scram::mef::IsNonNegative</a></div><div class="ttdeci">bool IsNonNegative(const Interval &amp;interval)</div><div class="ttdoc">Checks if all values in a given interval are non-negative. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00051">expression.h:51</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1DomainError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DomainError.xhtml">scram::mef::DomainError</a></div><div class="ttdoc">Invalid domain for values or arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00124">error.h:124</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a1700295154b8db507896804ad4307c14"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a1700295154b8db507896804ad4307c14">scram::mef::Expression::Expression</a></div><div class="ttdeci">Expression(std::vector&lt; Expression * &gt; args={})</div><div class="ttdoc">Constructor for use by derived classes to register their arguments. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00030">expression.cc:30</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af4c1a5cb29e8f45623a99742b7ba8bc5"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">scram::mef::Expression::value</a></div><div class="ttdeci">virtual double value() noexcept=0</div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
