<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>bdd.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">bdd.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="bdd_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2015-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Fault tree analysis with the Binary Decision Diagram algorithms.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;forward_list&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/functional/hash.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;boost/smart_ptr/intrusive_ptr.hpp&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="pdag_8h.xhtml">pdag.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="settings_8h.xhtml">settings.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// The default management of BDD vertices.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">   45</a></span>&#160;<span class="keyword">using</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr</a> = boost::intrusive_ptr&lt;T&gt;;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml">   48</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a>;  <span class="comment">// Manager of its own entry in the unique table.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// Provides pointer and reference cast wrappers for intrusive Vertex pointers.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// @tparam W  The wrapper type to cast to.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> W = T&gt;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml">   55</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml">IntrusivePtrCast</a> {<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  /// @param[in] vertex  Pointer to a Vertex known to be convertible to W.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  /// @returns The cast reference-counted pointer to the vertex,</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  ///          or the cast reference (without count increment!) to the vertex.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @pre static_cast&lt;W&gt;(Vertex&lt;T&gt;) is successful.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">   64</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;W&gt;</a> <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">Ptr</a>(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr</a>&lt;<a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex&lt;T&gt;</a>&gt;&amp; vertex) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> boost::static_pointer_cast&lt;W&gt;(vertex);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">   67</a></span>&#160;  <span class="keyword">static</span> W&amp; <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ref</a>(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr</a>&lt;<a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex&lt;T&gt;</a>&gt;&amp; vertex) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>W&amp;<span class="keyword">&gt;</span>(*vertex);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// A weak pointer to store in BDD unique tables.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/// This weak pointer is unique pointer as well</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">/// because vertices should not be easily shared among multiple BDDs.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">   79</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr</a> final : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a>&lt;T&gt;;  <span class="comment">// Communicates the destruction of the vertex.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// Default constructor is to allow initialization in tables.</span></div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#adead8b84bdfbe59f8fda129ccd284bf8">   84</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#adead8b84bdfbe59f8fda129ccd284bf8">WeakIntrusivePtr</a>() noexcept : vertex_(<span class="keywordtype">nullptr</span>) {}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  /// Constructs from the shared pointer.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// However, there is no weak-to-shared constructor.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @param[in] ptr  Fully initialized intrusive pointer.</span></div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a586864623762d731cf2f106524e19e4d">   90</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a586864623762d731cf2f106524e19e4d">WeakIntrusivePtr</a>(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;T&gt;</a>&amp; ptr) noexcept</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      : vertex_(ptr.get()) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    assert(vertex_-&gt;table_ptr_ == <span class="keyword">nullptr</span> &amp;&amp; <span class="stringliteral">&quot;Non-unique table pointers.&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    vertex_-&gt;table_ptr_ = <span class="keyword">this</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// Copy assignment from shared pointers</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  /// for convenient initialization with operator[] in hash tables.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  /// @param[in] ptr  Fully initialized intrusive pointer.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  /// @returns Reference to this.</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ac61be22f153df8c584a61402c511a01d">  102</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr</a>&amp; <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ac61be22f153df8c584a61402c511a01d">operator=</a>(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;T&gt;</a>&amp; ptr) noexcept {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    this-&gt;~<a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr</a>();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">new</span> (<span class="keyword">this</span>) <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr</a>(ptr);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// Communicates the pointer destruction to the vertex.</span></div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a01afd2bb2d5079d2391b376bc1f94871">  109</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a01afd2bb2d5079d2391b376bc1f94871">~WeakIntrusivePtr</a>() noexcept {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (vertex_)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      vertex_-&gt;table_ptr_ = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  /// @returns true if the managed vertex is deleted or not initialized.</span></div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a7c782e61588664e379a54ad68b6a0c39">  115</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a7c782e61588664e379a54ad68b6a0c39">expired</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !vertex_; }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  /// @returns The intrusive pointer of the vertex.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">  ///          nullptr if the vertex is deleted or not initialized.</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ad1e3be6267e1316cbc4fb440fc08dde1">  119</a></span>&#160;<span class="comment"></span>  <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;T&gt;</a> <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ad1e3be6267e1316cbc4fb440fc08dde1">lock</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;T&gt;</a>(vertex_); }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @returns The raw pointer to the vertex.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">  ///          nullptr if the vertex is deleted or not initialized.</span></div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#aab3c5185bf6506448e5dde733d868af4">  123</a></span>&#160;<span class="comment"></span>  T* <span class="keyword">get</span>() <span class="keyword">const</span> { <span class="keywordflow">return</span> vertex_; }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  T* vertex_;  <span class="comment">///&lt; A communication pointer with the vertex.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Terminal.xhtml">  130</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal</a>;  <span class="comment">// Forward declaration for Vertex to manage.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">/// Representation of a vertex in BDD graphs.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">/// This is a base class for all BDD vertices;</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/// however, it is NOT polymorphic for performance reasons.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">/// @pre Vertices are managed by reference counted pointers</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">///      provided by this class&#39; interface.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">/// @pre Vertices are not shared among separate BDD instances.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr</a>&lt;T&gt;;  <span class="comment">// Mutual friendship to manage table entry.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// Increases the reference count for new intrusive pointers.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  /// @param[in] ptr  Vertex pointer managed by intrusive pointers.</span></div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#add5d00a3443e542b5181f0a240783623">  148</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#add5d00a3443e542b5181f0a240783623">intrusive_ptr_add_ref</a>(<a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex&lt;T&gt;</a>* ptr) noexcept {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    ptr-&gt;use_count_++;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">  /// Decrements the reference count for removed intrusive pointers.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">  /// If no more intrusive pointers left,</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">  /// the object is deleted.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">  /// @param[in] ptr  Vertex pointer managed by intrusive pointers.</span></div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#abad71a092753aee2a536c78ce6205097">  157</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#abad71a092753aee2a536c78ce6205097">intrusive_ptr_release</a>(<a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex&lt;T&gt;</a>* ptr) noexcept {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    assert(ptr-&gt;use_count_ &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Missing reference counts.&quot;</span>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">if</span> (--ptr-&gt;use_count_ == 0) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      <span class="keywordflow">if</span> (!ptr-&gt;terminal()) {  <span class="comment">// Likely.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keyword">delete</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(ptr);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keyword">delete</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;T&gt;</a>*<span class="keyword">&gt;</span>(ptr);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @param[in] id  Identifier of the BDD graph.</span></div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#a9b730097c7f6b18e490856759038c540">  170</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#a9b730097c7f6b18e490856759038c540">Vertex</a>(<span class="keywordtype">int</span> <span class="keywordtype">id</span>) : id_(id), use_count_(0), table_ptr_(nullptr) {}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// @returns Identifier of the BDD graph rooted by this vertex.</span></div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#a8a4a6e9871c7b80b9951fea57617d438">  173</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#a8a4a6e9871c7b80b9951fea57617d438">id</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> id_; }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  /// @returns true if this vertex is terminal.</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#acfa7d6caa5bc11bc95cb35012169ab15">  176</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#acfa7d6caa5bc11bc95cb35012169ab15">terminal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> id_ &lt; 2; }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// @returns The number of registered intrusive pointers.</span></div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#af3232e7d5bd5903e657d13b4b35da7ab">  179</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#af3232e7d5bd5903e657d13b4b35da7ab">use_count</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> use_count_; }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  /// @returns true if there is only one registered shared pointer.</span></div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#a416e83f405d623db72859fabdabbcdaf">  182</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#a416e83f405d623db72859fabdabbcdaf">unique</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    assert(use_count_ &amp;&amp; <span class="stringliteral">&quot;No registered shared pointers.&quot;</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> use_count_ == 1;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">  /// Communicates the destruction</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// via the pointer to the unique table entry</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  /// if there&#39;s any.</span></div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Vertex.xhtml#ae65df1f155adc61793c19f8849297630">  191</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#ae65df1f155adc61793c19f8849297630">~Vertex</a>() noexcept {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">if</span> (table_ptr_)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      table_ptr_-&gt;vertex_ = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keywordtype">int</span> id_;  <span class="comment">///&lt; Unique identifier of the BDD graph with this vertex.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> use_count_;  <span class="comment">///&lt; Reference count for the intrusive pointer.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr&lt;T&gt;</a>* table_ptr_;  <span class="comment">///&lt; Entry in the unique table.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">/// Representation of terminal vertices in BDD graphs.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">/// It is expected</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">/// that in reduced BDD graphs,</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">/// there are at most two terminal vertices of value 1 or 0.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">/// If the BDD graph has attributed edges,</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">/// only single terminal vertex is expected with value 1.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a>&lt;T&gt;, <span class="keyword">public</span> <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml">IntrusivePtrCast</a>&lt;T, Terminal&lt;T&gt;&gt; {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">  /// @param[in] value  True or False (1 or 0) terminal.</span></div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Terminal.xhtml#a2239662bb53cff4a20a964b4606efe12">  214</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a2239662bb53cff4a20a964b4606efe12">Terminal</a>(<span class="keywordtype">bool</span> value) : <a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a>&lt;T&gt;(value) {}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">  /// @returns The value of the terminal vertex.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  /// @note The value serves as an id for this terminal vertex.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  ///       Non-terminal if-then-else vertices should never have</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  ///       identifications of value 0 or 1.</span></div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">  221</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml#a8a4a6e9871c7b80b9951fea57617d438">Vertex&lt;T&gt;::id</a>(); }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;};</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">/// Representation of non-terminal vertices in BDD graphs.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">/// This class is a base class for various BDD-specific vertices.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">/// however, as Vertex, NonTerminal is not polymorphic.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml">  230</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml">NonTerminal</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a>&lt;T&gt;, <span class="keyword">public</span> <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml">IntrusivePtrCast</a>&lt;T&gt; {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keyword">using</span> VertexPtr = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;Vertex&lt;T&gt;</a>&gt;;  <span class="comment">///&lt; Convenient change point.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// Default logic for getting signature high and low ids.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// @param[in] vertex  Non-terminal vertex.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  /// @returns Numbers that can be used to uniquely identify the arg vertex.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#afb58989f9673f9a3c4e3503ab882167c">  239</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#afb58989f9673f9a3c4e3503ab882167c">get_high_id</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml">NonTerminal&lt;T&gt;</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> vertex.high_-&gt;id();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  }</div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#a2348426339749765428343999e7d45df">  242</a></span>&#160;  <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a2348426339749765428343999e7d45df">get_low_id</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml">NonTerminal&lt;T&gt;</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> vertex.low_-&gt;id();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">  /// @param[in] index  Index of this non-terminal vertex.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">  /// @param[in] order  Specific ordering number for BDD graphs.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">  /// @param[in] id  Unique identifier of the ROBDD graph.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">  ///                The identifier should not collide</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">  ///                with the identifiers (0/1) of terminal nodes.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">  /// @param[in] high  A vertex for the (1/True/then/left) branch.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">  /// @param[in] low  A vertex for the (0/False/else/right) branch.</span></div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#aa2bf4709641f22f80fb9e2577a00fa6a">  255</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aa2bf4709641f22f80fb9e2577a00fa6a">NonTerminal</a>(<span class="keywordtype">int</span> index, <span class="keywordtype">int</span> order, <span class="keywordtype">int</span> <span class="keywordtype">id</span>, <span class="keyword">const</span> VertexPtr&amp; high,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;              <span class="keyword">const</span> VertexPtr&amp; low)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      : <a class="code" href="classscram_1_1core_1_1Vertex.xhtml">Vertex</a>&lt;T&gt;(id),</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        high_(high),</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        low_(low),</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        order_(order),</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        index_(index),</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        module_(false),</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        coherent_(false),</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        mark_(false) {}</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">  /// @returns The index of this vertex.</span></div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">  267</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> index_; }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// @returns The order of the vertex.</span></div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">  270</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    assert(order_ &gt; 0);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> order_;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  /// @returns true if this vertex represents a module gate.</span></div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">  276</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> module_; }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">  /// Sets this vertex for representation of a module.</span></div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#a22dcee106710fd2e80cbc60cc28cfe7e">  279</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a22dcee106710fd2e80cbc60cc28cfe7e">module</a>(<span class="keywordtype">bool</span> flag) { module_ = flag; }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">  /// @returns true if the vertex represents a coherent module.</span></div><div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">  282</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">coherent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> coherent_; }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">  /// Sets the flag for coherent modules.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">  /// @param[in] flag  true for coherent modules.</span></div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#a2e2582f28d0ede49c566b3a6b6007422">  287</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a2e2582f28d0ede49c566b3a6b6007422">coherent</a>(<span class="keywordtype">bool</span> flag) {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    assert(!(coherent_ &amp;&amp; !flag) &amp;&amp; <span class="stringliteral">&quot;Inverting existing coherence.&quot;</span>);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    coherent_ = flag;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  /// @returns (1/True/then/left) branch if-then-else vertex.</span></div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">  293</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> VertexPtr&amp; <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> high_; }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">  /// @returns (0/False/else/right) branch vertex.</span></div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">  296</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> VertexPtr&amp; <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> low_; }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">  /// @returns The mark of this vertex.</span></div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">  299</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> mark_; }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">  /// Marks this vertex.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">  /// @param[in] flag  A flag with the meaning for the user of marks.</span></div><div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NonTerminal.xhtml#acf07d0fac040733bae80727e11f4de75">  304</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#acf07d0fac040733bae80727e11f4de75">mark</a>(<span class="keywordtype">bool</span> flag) { mark_ = flag; }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  ~<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml">NonTerminal</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  VertexPtr high_;  <span class="comment">///&lt; 1 (True/then) branch in the Shannon decomposition.</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"></span>  VertexPtr low_;  <span class="comment">///&lt; O (False/else) branch in the Shannon decomposition.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> order_;  <span class="comment">///&lt; Order of the variable.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> index_;  <span class="comment">///&lt; Index of the variable.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> module_;  <span class="comment">///&lt; Mark for module variables.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> coherent_;  <span class="comment">///&lt; Mark for coherence.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> mark_;  <span class="comment">///&lt; Traversal mark.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">/// Representation of non-terminal if-then-else vertices in BDD graphs.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">/// This class is designed to help construct and manipulate BDD graphs.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">/// This class provides one attributed complement edge.</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">/// The attributed edge applies to the low/false/0 branch of the vertex.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">/// However, there is no logic to check</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">/// if the complement edge manipulations are valid.</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">/// Consistency is the responsibility of BDD algorithms and users.</span></div><div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml">  327</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml">NonTerminal</a>&lt;Ite&gt; {<span class="comment"></span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  /// Special handling of the complement flag in computing low id signature.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">  /// @param[in] ite  Ite vertex.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">  /// @returns The signed number for complement low id.</span></div><div class="line"><a name="l00333"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#a3fe6c9068212c03492b8104d732aeb0c">  333</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#a3fe6c9068212c03492b8104d732aeb0c">get_low_id</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a>&amp; ite) noexcept {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">return</span> ite.complement_edge_ ? -ite.low()-&gt;id() : ite.low()-&gt;id();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aa2bf4709641f22f80fb9e2577a00fa6a">NonTerminal::NonTerminal</a>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">  /// @returns true if the low edge is complement.</span></div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#afc14becd66d22adf37cf1177671d5a2c">  341</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#afc14becd66d22adf37cf1177671d5a2c">complement_edge</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> complement_edge_; }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">  /// Sets the complement flag for the low edge.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">  /// @param[in] flag  Indicator to treat the low branch as a complement.</span></div><div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#a7d8c27c695ee3638c4a62cb60c9f48de">  346</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#a7d8c27c695ee3638c4a62cb60c9f48de">complement_edge</a>(<span class="keywordtype">bool</span> flag) { complement_edge_ = flag; }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">  /// @returns The probability of the function graph.</span></div><div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#ac059e4ac83547ef311c55b7ab1954a57">  349</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#ac059e4ac83547ef311c55b7ab1954a57">p</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> p_; }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">  /// Sets the probability of the function graph.</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">  /// @param[in] value  Calculated value for the probability.</span></div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#af85551f6f5bd0c3afa93e8d001b999d4">  354</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#af85551f6f5bd0c3afa93e8d001b999d4">p</a>(<span class="keywordtype">double</span> value) { p_ = value; }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">  /// @returns Saved results of importance factor calculations.</span></div><div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#a72ac21f2d1545dc570131867ea5396ff">  357</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#a72ac21f2d1545dc570131867ea5396ff">factor</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> factor_; }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">  /// Memorized results of importance factor calculations.</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">  /// @param[in] value  Calculation results for importance factor.</span></div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Ite.xhtml#a8d99d4fdac33f8c3a9fd685a69be64da">  362</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml#a8d99d4fdac33f8c3a9fd685a69be64da">factor</a>(<span class="keywordtype">double</span> value) { factor_ = value; }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="keywordtype">bool</span> complement_edge_ = <span class="keyword">false</span>;  <span class="comment">///&lt; Flag for complement edge.</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> p_ = 0;  <span class="comment">///&lt; Probability of the function graph.</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> factor_ = 0;  <span class="comment">///&lt; Importance factor calculation results.</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">  370</a></span>&#160;<span class="keyword">using</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;Ite&gt;</a>;  <span class="comment">///&lt; Shared if-then-else vertices.</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">/// Prime number generation for hash tables.</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">/// @param[in] n  The starting candidate for a prime number.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">/// @returns Probable prime number &gt;= n.</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"></span><span class="keywordtype">int</span> <a class="code" href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">GetPrimeNumber</a>(<span class="keywordtype">int</span> n);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">/// A hash table for keeping BDD reduced.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">/// The management of the hash table is intrusive;</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">/// that is, it relies on BDD vertices to provide necessary information.</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">/// Each vertex must have a unique signature</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">/// consisting of its index, special high and low ids.</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">/// This signature is the key of the hash table;</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">/// however, it is not duplicated in the table.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">/// The key is retrieved from the vertex as needed.</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">/// High and low ids are retrieved through unqualified calls</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">/// to get_high_id(const T&amp;) and get_low_id(const T&amp;).</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">/// This allows specialization of id calculations with attributed edges</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">/// where simple calls for high/low ids may miss the edge information.</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">/// @tparam T  The type of the main functional BDD vertex.</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1UniqueTable.xhtml">  396</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml">UniqueTable</a> {<span class="comment"></span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">  /// Convenient aliases and customization points.</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> Bucket = std::forward_list&lt;WeakIntrusivePtr&lt;T&gt;&gt;;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keyword">using</span> Table = std::vector&lt;Bucket&gt;;<span class="comment"></span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">  /// Constructor for small graphs.</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">  /// @param[in] init_capacity  The starting capacity for the table.</span></div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1UniqueTable.xhtml#acb9d0a4ca8e0dc5c8997b3ec95aa8866">  407</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml#acb9d0a4ca8e0dc5c8997b3ec95aa8866">UniqueTable</a>(<span class="keywordtype">int</span> init_capacity = 1000)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      : capacity_(core::<a class="code" href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">GetPrimeNumber</a>(init_capacity)),</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        size_(0),</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        max_load_factor_(0.75),</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        table_(capacity_) {}</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">  /// @returns The current number of entries.</span></div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1UniqueTable.xhtml#a85b645c3f3dbfb84cb25bf47c5132fce">  414</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml#a85b645c3f3dbfb84cb25bf47c5132fce">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_; }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">  /// Erases all entries.</span></div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1UniqueTable.xhtml#a2f681d411dc72f783ebaeba3bd4eda85">  417</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml#a2f681d411dc72f783ebaeba3bd4eda85">clear</a>() {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">for</span> (Bucket&amp; chain : table_)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      chain.clear();</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    size_ = 0;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// Releases all the memory associated with managing this table with BDD.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">  /// @post No use after release.</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"></span>  <span class="comment">//</span><span class="comment"></span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">  /// @note The call for release is not mandatory.</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">  ///       This functionality is experimental</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">  ///       to discover best points that minimize memory usage</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">  ///       considering the responsibilities of the BDD.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">  ///       The release keeps the data about the table,</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">  ///       such as its size and capacity.</span></div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1UniqueTable.xhtml#a05bfe1a43afa705aaa23bbb9c94e7e51">  433</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml#a05bfe1a43afa705aaa23bbb9c94e7e51">Release</a>() { table_ = Table(); }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">  /// Finds an existing BDD vertex or</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">  /// inserts a default constructed weak pointer for a new vertex.</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">  /// Proper initialization of the new vertex is responsibility of the BDD.</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">  /// Insertion operation may trigger resizing and rehashing.</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">  /// Rehashing eliminates expired weak pointers.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">  /// Collision resolution may also (opportunistically) remove</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">  /// expired pointers in the chain.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">  /// @param[in] index  Index of the variable.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">  /// @param[in] high_id  The id of the high vertex.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">  /// @param[in] low_id  The id of the low vertex.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">  /// @returns Reference to the weak pointer.</span></div><div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1UniqueTable.xhtml#af48512a537e4e264379db67a0a284538">  450</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr&lt;T&gt;</a>&amp; <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml#af48512a537e4e264379db67a0a284538">FindOrAdd</a>(<span class="keywordtype">int</span> index, <span class="keywordtype">int</span> high_id, <span class="keywordtype">int</span> low_id) noexcept {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordflow">if</span> (size_ &gt;= (max_load_factor_ * capacity_))</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;      Rehash(GetNextCapacity(capacity_));</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordtype">int</span> bucket_number = Hash(index, high_id, low_id) % capacity_;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    Bucket&amp; chain = table_[bucket_number];</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">auto</span> it_prev = chain.before_begin();  <span class="comment">// Parent.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it_cur = chain.begin(), it_end = chain.end(); it_cur != it_end;) {</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      <span class="keywordflow">if</span> (it_cur-&gt;expired()) {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        it_cur = chain.erase_after(it_prev);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        --size_;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        T* vertex = it_cur-&gt;get();</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">if</span> (index == vertex-&gt;index() &amp;&amp; high_id == get_high_id(*vertex) &amp;&amp;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            low_id == get_low_id(*vertex)) {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;          <span class="keywordflow">return</span> *it_cur;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        it_prev = it_cur;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        ++it_cur;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;      }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    ++size_;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">return</span> *chain.emplace_after(it_prev);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment">  /// Rehashes the table for the new number of buckets.</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">  /// Upon rehashing the expired nodes are not moved to the new table.</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">  /// @param[in] new_capacity  The desired number of buckets.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Rehash(<span class="keywordtype">int</span> new_capacity) {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keywordtype">int</span> new_size = 0;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    Table new_table(new_capacity);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">for</span> (Bucket&amp; chain : table_) {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span> it_prev = chain.before_begin(), it_cur = chain.begin(),</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                it_end = chain.end();</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;           it_cur != it_end;) {</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">if</span> (it_cur-&gt;expired()) {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;          it_prev = it_cur;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;          ++it_cur;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;          <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        ++new_size;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        T* vertex = it_cur-&gt;get();</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="keywordtype">int</span> bucket_number =</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            Hash(vertex-&gt;index(), get_high_id(*vertex), get_low_id(*vertex)) %</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            new_capacity;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        Bucket&amp; new_chain = new_table[bucket_number];</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        new_chain.splice_after(new_chain.before_begin(), chain, it_prev,</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                               ++it_cur);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;      }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    table_.swap(new_table);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    size_ = new_size;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    capacity_ = new_capacity;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  }</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">  /// Computes the hash value of the key.</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">  /// @param[in] index  Index of the variable.</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">  /// @param[in] high_id  The id of the high vertex.</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">  /// @param[in] low_id  The id of the low vertex.</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">  /// @returns The combined hash value of the argument numbers.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"></span>  std::size_t Hash(<span class="keywordtype">int</span> index, <span class="keywordtype">int</span> high_id, <span class="keywordtype">int</span> low_id) {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    std::size_t seed = 0;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    boost::hash_combine(seed, index);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    boost::hash_combine(seed, high_id);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    boost::hash_combine(seed, low_id);</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">return</span> seed;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  }</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">  /// Computes a new capacity for resizing.</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment">  /// @param[in] prev_capacity  The current capacity.</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">  /// @returns The new capacity scaled by the growth factor function.</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">  /// @note The growth tries to take into account the growth patterns of BDD.</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> GetNextCapacity(<span class="keywordtype">int</span> prev_capacity) {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kMaxScaleCapacity = 1e8;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordtype">int</span> scale_power = 1;  <span class="comment">// The default power after the max scale capacity.</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">if</span> (prev_capacity &lt; kMaxScaleCapacity) {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;      scale_power += std::log10(kMaxScaleCapacity / prev_capacity);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    }</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordtype">int</span> growth_factor = std::pow(2, scale_power);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordtype">int</span> new_capacity = prev_capacity * growth_factor;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordflow">return</span> core::GetPrimeNumber(new_capacity);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  }</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;  <span class="keywordtype">int</span> capacity_;  <span class="comment">///&lt; The total number of buckets in the table.</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> size_;  <span class="comment">///&lt; The total number of elements in the table.</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> max_load_factor_;  <span class="comment">///&lt; The limit on the avg. # of elements per bucket.</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="comment">  /// A table of unique vertices is stored with weak pointers</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">  /// so that this hash table does not interfere</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">  /// with BDD node management with shared pointers.</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"></span>  Table table_;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;};</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment">/// A hash table without collision resolution.</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment">/// Instead of resolving the collision,</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">/// the existing value is purged and replaced by the new entry.</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">/// This hash table is designed to store computation results of BDD Apply.</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment">/// The implementation of the table</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="comment">/// is very much coupled with the BDD use cases.</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment">/// @tparam V  The type of the value/result of BDD Apply.</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment">///            The type must provide swap(), reset(), and operator bool().</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">/// @note The API is designed after STL maps as drop-in replacement for BDD.</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">///       This approach allows performance testing with the baseline.</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">///       However, only necessary and sufficient functions are provided.</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">/// @warning The behavior is very different from standard maps.</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">///          References can easily be invalidated upon rehashing or insertion.</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> V&gt;</div><div class="line"><a name="l00568"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml">  568</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1CacheTable.xhtml">CacheTable</a> {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">  /// Public typedefs similar to the standard maps.</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00573"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#a2d70148c45468ac65bfe45f616e4f5ef">  573</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a2d70148c45468ac65bfe45f616e4f5ef">key_type</a> = std::pair&lt;int, int&gt;;</div><div class="line"><a name="l00574"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#adb7f6a651da788ffcd4400449059bddb">  574</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#adb7f6a651da788ffcd4400449059bddb">mapped_type</a> = V;</div><div class="line"><a name="l00575"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">  575</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">value_type</a> = std::pair&lt;key_type, mapped_type&gt;;</div><div class="line"><a name="l00576"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#a761015b0243e6a485e5b3f38eddcd1dc">  576</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a761015b0243e6a485e5b3f38eddcd1dc">container_type</a> = std::vector&lt;value_type&gt;;</div><div class="line"><a name="l00577"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#aa393d81283ccf4a42c50d53d782b564a">  577</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#aa393d81283ccf4a42c50d53d782b564a">iterator</a> = <span class="keyword">typename</span> container_type::iterator;<span class="comment"></span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">  /// Constructor with average expectations for computations.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment">  /// @param[in] init_capacity</span></div><div class="line"><a name="l00583"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#afabe5452514656316f69b74a28309a80">  583</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#afabe5452514656316f69b74a28309a80">CacheTable</a>(<span class="keywordtype">int</span> init_capacity = 1000)</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;      : size_(0),</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        max_load_factor_(0.75),</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        table_(core::<a class="code" href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">GetPrimeNumber</a>(init_capacity)) {}</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">  /// @returns The number of entires in the table.</span></div><div class="line"><a name="l00589"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#a371345f30fc0280f2f8b45c3602d0b76">  589</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a371345f30fc0280f2f8b45c3602d0b76">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> size_; }</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">  /// Removes all entries from the table.</span></div><div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#ac6ada895d3ac6ba8f042b171de850da2">  592</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#ac6ada895d3ac6ba8f042b171de850da2">clear</a>() {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">value_type</a>&amp; entry : table_) {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;      <span class="keywordflow">if</span> (entry.second)</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        entry.second.reset();</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    }</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    size_ = 0;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  }</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">  /// Prepares the table for more entries.</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">  /// @param[in] n  The number of expected entries.</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">  /// @post If n is 0 and the table is empty,</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">  ///       the memory is freed as much as possible.</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">  ///       Using after release of memory is undefined.</span></div><div class="line"><a name="l00607"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#a53efbf8c170ca5f0dd0122d655dca012">  607</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a53efbf8c170ca5f0dd0122d655dca012">reserve</a>(<span class="keywordtype">int</span> n) {</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">if</span> (size_ == 0 &amp;&amp; n == 0) {</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;      table_ = decltype(table_)();</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    }</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordflow">if</span> (n &lt;= size_)</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    Rehash(core::GetPrimeNumber(n / max_load_factor_ + 1));</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;  }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">  /// Searches for existing entry.</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment">  /// @param[in] key  Ordered unique ids of BDD Apply argument vertices.</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">  /// @returns Iterator pointing to the found entry.</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">  /// @returns end() if no entry with the given key is found.</span></div><div class="line"><a name="l00623"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#aeedfea1a4c3284a5f4274cda70fcd9f0">  623</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#aa393d81283ccf4a42c50d53d782b564a">iterator</a> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#aeedfea1a4c3284a5f4274cda70fcd9f0">find</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a2d70148c45468ac65bfe45f616e4f5ef">key_type</a>&amp; key) {</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordtype">int</span> index = boost::hash_value(key) % table_.size();</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">value_type</a>&amp; entry = table_[index];</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">if</span> (!entry.second || entry.first != key)</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;      <span class="keywordflow">return</span> table_.end();</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordflow">return</span> table_.begin() + index;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;  }</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">  /// @returns Iterator to the end.</span></div><div class="line"><a name="l00632"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#ae7c715b04659e99d0c33a005432a53ae">  632</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#aa393d81283ccf4a42c50d53d782b564a">iterator</a> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#ae7c715b04659e99d0c33a005432a53ae">end</a>() { <span class="keywordflow">return</span> table_.end(); }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">  /// Emplaces a new entry.</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">  /// @param[in] key  Ordered unique ids of BDD Apply argument vertices.</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">  /// @param[in] value  Non-empty result of BDD Apply computations.</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">  /// @warning API deviation from STL maps.</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">  ///          This function does not return an iterator</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">  ///          because it is not needed by computations in BDD.</span></div><div class="line"><a name="l00642"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CacheTable.xhtml#ae97b2ee82cab1f6944e8bb7c973575d6">  642</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#ae97b2ee82cab1f6944e8bb7c973575d6">emplace</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a2d70148c45468ac65bfe45f616e4f5ef">key_type</a>&amp; key, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#adb7f6a651da788ffcd4400449059bddb">mapped_type</a>&amp; value) {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    assert(value &amp;&amp; <span class="stringliteral">&quot;Empty computation results!&quot;</span>);</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">if</span> (size_ &gt;= (max_load_factor_ * table_.size()))</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;      Rehash(core::GetPrimeNumber(table_.size() * 2));</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordtype">int</span> index = boost::hash_value(key) % table_.size();</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">value_type</a>&amp; entry = table_[index];</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">if</span> (!entry.second)</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;      ++size_;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    entry.first = key;  <span class="comment">// Key equality is unlikely for the use case.</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    entry.second = value;  <span class="comment">// Might be purging another value.</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment">  /// Rehashes the table with a new capacity.</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="comment">  /// @param[in] new_capacity  Desired size of the underlying container.</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Rehash(<span class="keywordtype">int</span> new_capacity) {</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordtype">int</span> new_size = 0;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    std::vector&lt;value_type&gt; new_table(new_capacity);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">value_type</a>&amp; entry : table_) {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;      <span class="keywordflow">if</span> (!entry.second)</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;      <span class="keywordtype">int</span> new_index = boost::hash_value(entry.first) % new_table.size();</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;      <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">value_type</a>&amp; new_entry = new_table[new_index];</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;      new_entry.first = entry.first;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;      <span class="keywordflow">if</span> (!new_entry.second)</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        ++new_size;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;      new_entry.second.swap(entry.second);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    size_ = new_size;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    table_.swap(new_table);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;  }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;  <span class="keywordtype">int</span> size_;  <span class="comment">///&lt; The total number of elements in the table.</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> max_load_factor_;  <span class="comment">///&lt; The limit on (size / capacity) ratio.</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment"></span>  std::vector&lt;value_type&gt; table_;  <span class="comment">///&lt; The main container.</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>;  <span class="comment">// For analysis purposes.</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">/// Analysis of PDAGs with Binary Decision Diagrams.</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment">/// This binary decision diagram data structure</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment">/// represents Reduced Ordered BDD with attributed edges.</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">/// @note The low/else edge is chosen to have the attribute for an ITE vertex.</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment">///       There is only one terminal vertex of value 1/True.</span></div><div class="line"><a name="l00690"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml">  690</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00692"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">  692</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a> = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;Vertex&lt;Ite&gt;</a>&gt;;  <span class="comment">///&lt; BDD vertex base.</span></div><div class="line"><a name="l00693"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#aca10ac3fcc9919ecd9e817b2d4ac840c">  693</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#aca10ac3fcc9919ecd9e817b2d4ac840c">TerminalPtr</a> = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;Terminal&lt;Ite&gt;</a>&gt;;  <span class="comment">///&lt; Terminal vertices.</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment">  /// Holder of computation resultant functions and gate representations.</span></div><div class="line"><a name="l00696"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">  696</a></span>&#160;<span class="comment"></span>  <span class="keyword">struct </span><a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> {</div><div class="line"><a name="l00697"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">  697</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a>;  <span class="comment">///&lt; The interpretation of the function.</span></div><div class="line"><a name="l00698"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">  698</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>;  <span class="comment">///&lt; The root vertex of the BDD function graph.</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">    /// @returns true if the function is initialized.</span></div><div class="line"><a name="l00701"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a09bb15c2ab6687112fb60858dd8f86c5">  701</a></span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <span class="keyword">operator</span> bool()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> vertex != <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="comment">    /// Clears the function&#39;s root vertex pointer.</span></div><div class="line"><a name="l00704"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#ae34eea3bbe1aac7af2f53a041e2f6e72">  704</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#ae34eea3bbe1aac7af2f53a041e2f6e72">reset</a>() { vertex = <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="comment">    /// Swaps with another function.</span></div><div class="line"><a name="l00707"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#abed3bea3547fa39e96f4dee788311e00">  707</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#abed3bea3547fa39e96f4dee788311e00">swap</a>(<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; other) noexcept {</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;      std::swap(complement, other.complement);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;      vertex.swap(other.vertex);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    }</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;  };</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">  /// Provides access to consensus calculation private facilities.</span></div><div class="line"><a name="l00714"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd_1_1Consensus.xhtml">  714</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Bdd_1_1Consensus.xhtml">Consensus</a> {</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>;  <span class="comment">// Access for calculation of prime implicants.</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment">    /// Calculates consensus of high and low of an if-then-else BDD vertex.</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment">    /// @param[in,out] bdd  The host BDD.</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment">    /// @param[in] ite  The BDD vertex with the input.</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment">    /// @param[in] complement  Interpretation of the BDD vertex.</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment">    /// @returns The consensus BDD function.</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment"></span>    <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> operator()(<a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd, <span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement) noexcept {</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;      <span class="keywordflow">return</span> bdd-&gt;CalculateConsensus(ite, complement);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    }</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;  };</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment">  /// Constructor with the analysis target.</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment">  /// Reduced Ordered BDD is produced from a PDAG.</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment">  /// @param[in] graph  Preprocessed and partially normalized PDAG.</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="comment">  /// @param[in] settings  The analysis settings.</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="comment">  /// @pre The PDAG has variable ordering.</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="comment">  /// @note BDD construction may take considerable time.</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment">  /// To handle incomplete ZBDD type with unique pointers.</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment"></span>  ~<a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>() noexcept;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment">  /// @returns The root function of the ROBDD.</span></div><div class="line"><a name="l00744"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#a0af8ef6ac7ad780283420102505216af">  744</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a0af8ef6ac7ad780283420102505216af">root</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> root_; }</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment">  /// @returns Mapping of PDAG modules and BDD graph vertices.</span></div><div class="line"><a name="l00747"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#a084e72279927831ec728a1542861dfec">  747</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::unordered_map&lt;int, Function&gt;&amp; <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a084e72279927831ec728a1542861dfec">modules</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> modules_; }</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">  /// @returns Mapping of variable indices to their orders.</span></div><div class="line"><a name="l00750"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#ab9c3fc3bb67484a80233f9345c79d4f1">  750</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::unordered_map&lt;int, int&gt;&amp; <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#ab9c3fc3bb67484a80233f9345c79d4f1">index_to_order</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keywordflow">return</span> index_to_order_;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;  }</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment">  /// @returns true if the BDD has been constructed from a coherent PDAG.</span></div><div class="line"><a name="l00755"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#ad8824502634e7e5578cccbf62f71d491">  755</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#ad8824502634e7e5578cccbf62f71d491">coherent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> coherent_; }</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment">  /// Helper function to clear and set vertex marks.</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment">  /// @param[in] mark  Desired mark for BDD vertices.</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment">  /// @note Marks will propagate to modules as well.</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment">  /// @warning If the graph is discontinuously and partially marked,</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment">  ///          this function will not help with the mess.</span></div><div class="line"><a name="l00765"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">  765</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(<span class="keywordtype">bool</span> mark) { <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(root_.vertex, mark); }</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment">  /// Runs the Qualitative analysis</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment">  /// with the representation of a PDAG as ROBDD.</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment">  /// @param[in] graph  The optional PDAG with non-declarative substitutions.</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Analyze(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph = <span class="keyword">nullptr</span>) noexcept;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment">  /// @returns Products generated by the analysis.</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="comment">  /// @pre Analysis is done.</span></div><div class="line"><a name="l00776"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#af43b1c269c1885bac9ef9ff62cf1eeed">  776</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#af43b1c269c1885bac9ef9ff62cf1eeed">products</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    assert(zbdd_ &amp;&amp; <span class="stringliteral">&quot;Analysis is not done.&quot;</span>);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="keywordflow">return</span> *zbdd_;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;  }</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">IteWeakPtr</a> = <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr&lt;Ite&gt;</a>;  <span class="comment">///&lt; Pointer in containers.</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml">ComputeTable</a> = <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml">CacheTable&lt;Function&gt;</a>;  <span class="comment">///&lt; Computation results.</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="comment">  /// Finds or adds a unique if-then-else vertex in BDD.</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment">  /// All vertices in the BDD must be created with this functions.</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment">  /// Otherwise, the BDD may not be reduced.</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="comment">  /// @param[in] index  Positive index of the variable.</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="comment">  /// @param[in] high  The high vertex.</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment">  /// @param[in] low  The low vertex.</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment">  /// @param[in] complement_edge  Interpretation of the low vertex.</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment">  /// @param[in] order The order for the vertex variable.</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="comment">  /// @returns If-then-else node with the given parameters.</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="comment">  /// @pre Non-expired pointers in the unique table are</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="comment">  ///      either in the BDD or in the computation table.</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="comment"></span>  <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> FindOrAddVertex(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; high, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; low,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                         <span class="keywordtype">bool</span> complement_edge, <span class="keywordtype">int</span> order) noexcept;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="comment">  /// Finds or adds a replacement for an existing node</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="comment">  /// or a new node based on an existing node.</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">  /// @param[in] ite  An existing vertex.</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment">  /// @param[in] high  The new high vertex.</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">  /// @param[in] low  The new low vertex.</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment">  /// @param[in] complement_edge  Interpretation of the low vertex.</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="comment">  /// @returns Ite for a replacement.</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment">  /// @warning This function is not aware of reduction rules.</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment"></span>  <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> FindOrAddVertex(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; low, <span class="keywordtype">bool</span> complement_edge) noexcept;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment">  /// Find or adds a BDD ITE vertex using information from gates.</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment">  /// @param[in] gate  Gate with index, order, and other information.</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="comment">  /// @param[in] high  The new high vertex.</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="comment">  /// @param[in] low  The new low vertex.</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment">  /// @param[in] complement_edge  Interpretation of the low vertex.</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">  /// @returns Ite for a replacement.</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment">  /// @pre The gate is a module.</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment">  /// @warning This function is not aware of reduction rules.</span></div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"></span>  <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> FindOrAddVertex(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; low, <span class="keywordtype">bool</span> complement_edge) noexcept;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment">  /// Converts all gates in the PDAG</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment">  /// into function BDD graphs.</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment">  /// Registers processed gates.</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment">  /// @param[in] gate  The root or current parent gate of the graph.</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment">  /// @param[in,out] gates  Processed gates with use counts.</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="comment">  /// @returns The BDD function representing the gate.</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment">  /// @pre The memoization container is not used outside of this function.</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="comment"></span>  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> ConvertGraph(</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;      <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;      std::unordered_map&lt;<span class="keywordtype">int</span>, std::pair&lt;Function, int&gt;&gt;* <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>) noexcept;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">  /// Computes minimum and maximum ids for keys in computation tables.</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument function graph.</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument function graph.</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment">  /// @param[in] complement_one  Interpretation of arg_one as complement.</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment">  /// @param[in] complement_two  Interpretation of arg_two as complement.</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment">  /// @returns A pair of min and max integers with a sign for a complement.</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">  /// @pre The arguments are not be the same function.</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment">  ///      Equal ID functions are handled by the reduction.</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment">  /// @pre Even though the arguments are not ItePtr type,</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment">  ///      they are if-then-else vertices.</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment"></span>  std::pair&lt;int, int&gt; GetMinMaxId(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                  <span class="keywordtype">bool</span> complement_two) noexcept;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="comment">  /// Applies Boolean operation to BDD graphs.</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment">  /// This is the main function for the operation.</span></div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="comment">  /// The application is specialized with the operator.</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment">  /// @tparam Type  The operator enum.</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument function graph.</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument function graph.</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment">  /// @param[in] complement_one  Interpretation of arg_one as complement.</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment">  /// @param[in] complement_two  Interpretation of arg_two as complement.</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">  /// @returns The BDD function as a result of operation.</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment">  /// @note The order of arguments does not matter for two variable operators.</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;Operator Type&gt;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> Apply(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                 <span class="keywordtype">bool</span> complement_one, <span class="keywordtype">bool</span> complement_two) noexcept;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment">  /// Applies Boolean operation to BDD ITE graphs.</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment">  /// @tparam Type  The operator enum.</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment">  /// @param[in] ite_one  First argument function graph.</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="comment">  /// @param[in] ite_two  Second argument function graph.</span></div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="comment">  /// @param[in] complement_one  Interpretation of arg_one as complement.</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment">  /// @param[in] complement_two  Interpretation of arg_two as complement.</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="comment">  /// @returns The BDD function as a result of operation.</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;Operator Type&gt;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> Apply(<a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> ite_one, <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> ite_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                 <span class="keywordtype">bool</span> complement_two) noexcept;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="comment">  /// Applies Boolean operation to BDD graphs.</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">  /// This is a convenience function</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">  /// if the operator type cannot be determined at compile time.</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="comment">  /// @param[in] type  The operator or type of the gate.</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument function graph.</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument function graph.</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment">  /// @param[in] complement_one  Interpretation of arg_one as complement.</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment">  /// @param[in] complement_two  Interpretation of arg_two as complement.</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment">  /// @returns The BDD function as a result of operation.</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment">  /// @pre The operator is either AND or OR.</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment">  /// @note The order of arguments does not matter for two variable operators.</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment"></span>  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> Apply(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                 <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                 <span class="keywordtype">bool</span> complement_two) noexcept;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment">  /// Calculates consensus of high and low of an if-then-else BDD vertex.</span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="comment">  /// @param[in] ite  The BDD vertex with the input.</span></div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment">  /// @param[in] complement  Interpretation of the BDD vertex.</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="comment">  /// @returns The consensus BDD function.</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="comment"></span>  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> CalculateConsensus(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement) noexcept;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment">  /// Counts the number of if-then-else nodes.</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">  /// @param[in] vertex  The starting root vertex of BDD.</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">  /// @returns The number of ITE nodes in the BDD.</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">  /// @pre Non-terminal node marks are clear (false).</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> CountIteNodes(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; vertex) noexcept;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">  /// Clears marks of vertices in BDD graph.</span></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment">  /// @param[in] vertex  The starting root vertex of the graph.</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment">  /// @param[in] mark  The desired mark for the vertices.</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment">  /// @note Marks will propagate to modules as well.</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ClearMarks(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> mark) noexcept;</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="comment">  /// Checks BDD graphs for errors in the structure.</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="comment">  /// Errors are assertions that fail at runtime.</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of BDD.</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment">  /// @pre Non-terminal node marks are clear (false).</span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> TestStructure(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; vertex) noexcept;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="comment">  /// Clears all memoization tables.</span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ClearTables() noexcept {</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    and_table_.clear();</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    or_table_.clear();</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;  }</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment">  /// Freezes the graph.</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment">  /// Releases all possible memory from memoization and unique tables.</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">  /// @pre No more graph modifications after the freeze.</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Freeze() noexcept {</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    unique_table_.Release();</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    ClearTables();</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    and_table_.reserve(0);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    or_table_.reserve(0);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;  }</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a> kSettings_;  <span class="comment">///&lt; Analysis settings.</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="comment"></span>  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> root_;  <span class="comment">///&lt; The root function of this BDD.</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> coherent_;  <span class="comment">///&lt; Inherited coherence from PDAG.</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">  /// Table of unique if-then-else nodes denoting function graphs.</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="comment">  /// The key consists of ite(index, id_high, id_low),</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;<span class="comment">  /// where IDs are unique (id_high != id_low) identifications of</span></div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="comment">  /// unique reduced-ordered function graphs.</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml">UniqueTable&lt;Ite&gt;</a> unique_table_;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment">  /// Tables of processed computations over functions.</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment">  /// The argument functions are recorded with their IDs (not vertex indices).</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment">  /// In order to keep only unique computations,</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment">  /// the argument IDs must be ordered.</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">  /// The key is {min_id, max_id}.</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml">ComputeTable</a> and_table_;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  <a class="code" href="classscram_1_1core_1_1CacheTable.xhtml">ComputeTable</a> or_table_;<span class="comment"></span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;  std::unordered_map&lt;int, Function&gt; modules_;  <span class="comment">///&lt; Module graphs.</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="comment"></span>  std::unordered_map&lt;int, int&gt; index_to_order_;  <span class="comment">///&lt; Indices and orders.</span></div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#aca10ac3fcc9919ecd9e817b2d4ac840c">TerminalPtr</a> kOne_;  <span class="comment">///&lt; Terminal True.</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> function_id_;  <span class="comment">///&lt; Identification assignment for new function graphs.</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;Zbdd&gt; zbdd_;  <span class="comment">///&lt; ZBDD as a result of analysis.</span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml">scram::core::Vertex</a></div><div class="ttdoc">Representation of a vertex in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00048">bdd.h:48</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_adead8b84bdfbe59f8fda129ccd284bf8"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#adead8b84bdfbe59f8fda129ccd284bf8">scram::core::WeakIntrusivePtr::WeakIntrusivePtr</a></div><div class="ttdeci">WeakIntrusivePtr() noexcept</div><div class="ttdoc">Default constructor is to allow initialization in tables. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00084">bdd.h:84</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml_a85b645c3f3dbfb84cb25bf47c5132fce"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml#a85b645c3f3dbfb84cb25bf47c5132fce">scram::core::UniqueTable::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00414">bdd.h:414</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a084e72279927831ec728a1542861dfec"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a084e72279927831ec728a1542861dfec">scram::core::Bdd::modules</a></div><div class="ttdeci">const std::unordered_map&lt; int, Function &gt; &amp; modules() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00747">bdd.h:747</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_ac6ada895d3ac6ba8f042b171de850da2"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#ac6ada895d3ac6ba8f042b171de850da2">scram::core::CacheTable::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdoc">Removes all entries from the table. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00592">bdd.h:592</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_afc14becd66d22adf37cf1177671d5a2c"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#afc14becd66d22adf37cf1177671d5a2c">scram::core::Ite::complement_edge</a></div><div class="ttdeci">bool complement_edge() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00341">bdd.h:341</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_a761015b0243e6a485e5b3f38eddcd1dc"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#a761015b0243e6a485e5b3f38eddcd1dc">scram::core::CacheTable&lt; Function &gt;::container_type</a></div><div class="ttdeci">std::vector&lt; value_type &gt; container_type</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00576">bdd.h:576</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_adeb100923176ebd5f820c75b79280796"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">scram::core::NonTerminal::low</a></div><div class="ttdeci">const VertexPtr &amp; low() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00296">bdd.h:296</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_abad71a092753aee2a536c78ce6205097"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#abad71a092753aee2a536c78ce6205097">scram::core::Vertex::intrusive_ptr_release</a></div><div class="ttdeci">friend void intrusive_ptr_release(Vertex&lt; T &gt; *ptr) noexcept</div><div class="ttdoc">Decrements the reference count for removed intrusive pointers. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00157">bdd.h:157</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a2348426339749765428343999e7d45df"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a2348426339749765428343999e7d45df">scram::core::NonTerminal::get_low_id</a></div><div class="ttdeci">friend int get_low_id(const NonTerminal&lt; T &gt; &amp;vertex) noexcept</div><div class="ttdoc">Default logic for getting signature high and low ids. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00242">bdd.h:242</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a0af8ef6ac7ad780283420102505216af"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a0af8ef6ac7ad780283420102505216af">scram::core::Bdd::root</a></div><div class="ttdeci">const Function &amp; root() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00744">bdd.h:744</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_ab9c3fc3bb67484a80233f9345c79d4f1"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#ab9c3fc3bb67484a80233f9345c79d4f1">scram::core::Bdd::index_to_order</a></div><div class="ttdeci">const std::unordered_map&lt; int, int &gt; &amp; index_to_order() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00750">bdd.h:750</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml">scram::core::Zbdd</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagrams for set manipulations. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00130">zbdd.h:130</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml_a2f681d411dc72f783ebaeba3bd4eda85"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml#a2f681d411dc72f783ebaeba3bd4eda85">scram::core::UniqueTable::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdoc">Erases all entries. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00417">bdd.h:417</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a85ca781ff5bec86a44c217fb4b26ff76"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">scram::core::Bdd::ClearMarks</a></div><div class="ttdeci">void ClearMarks(bool mark)</div><div class="ttdoc">Helper function to clear and set vertex marks. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00765">bdd.h:765</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml">scram::core::Bdd</a></div><div class="ttdoc">Analysis of PDAGs with Binary Decision Diagrams. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00690">bdd.h:690</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml_a05bfe1a43afa705aaa23bbb9c94e7e51"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml#a05bfe1a43afa705aaa23bbb9c94e7e51">scram::core::UniqueTable::Release</a></div><div class="ttdeci">void Release()</div><div class="ttdoc">Releases all the memory associated with managing this table with BDD. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00433">bdd.h:433</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_af85551f6f5bd0c3afa93e8d001b999d4"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#af85551f6f5bd0c3afa93e8d001b999d4">scram::core::Ite::p</a></div><div class="ttdeci">void p(double value)</div><div class="ttdoc">Sets the probability of the function graph. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00354">bdd.h:354</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_afabe5452514656316f69b74a28309a80"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#afabe5452514656316f69b74a28309a80">scram::core::CacheTable::CacheTable</a></div><div class="ttdeci">CacheTable(int init_capacity=1000)</div><div class="ttdoc">Constructor with average expectations for computations. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00583">bdd.h:583</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in a PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00281">pdag.h:281</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_a7c782e61588664e379a54ad68b6a0c39"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a7c782e61588664e379a54ad68b6a0c39">scram::core::WeakIntrusivePtr::expired</a></div><div class="ttdeci">bool expired() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00115">bdd.h:115</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_aca10ac3fcc9919ecd9e817b2d4ac840c"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#aca10ac3fcc9919ecd9e817b2d4ac840c">scram::core::Bdd::TerminalPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Terminal&lt; Ite &gt;&gt; TerminalPtr</div><div class="ttdoc">Terminal vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00693">bdd.h:693</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_adb7f6a651da788ffcd4400449059bddb"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#adb7f6a651da788ffcd4400449059bddb">scram::core::CacheTable&lt; Function &gt;::mapped_type</a></div><div class="ttdeci">Function mapped_type</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00574">bdd.h:574</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml_acb9d0a4ca8e0dc5c8997b3ec95aa8866"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml#acb9d0a4ca8e0dc5c8997b3ec95aa8866">scram::core::UniqueTable::UniqueTable</a></div><div class="ttdeci">UniqueTable(int init_capacity=1000)</div><div class="ttdoc">Constructor for small graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00407">bdd.h:407</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1IntrusivePtrCast_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1IntrusivePtrCast.xhtml">scram::core::IntrusivePtrCast</a></div><div class="ttdoc">Provides pointer and reference cast wrappers for intrusive Vertex pointers. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00055">bdd.h:55</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_1_1Consensus_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Bdd_1_1Consensus.xhtml">scram::core::Bdd::Consensus</a></div><div class="ttdoc">Provides access to consensus calculation private facilities. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00714">bdd.h:714</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml">scram::core::NonTerminal</a></div><div class="ttdoc">Representation of non-terminal vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00230">bdd.h:230</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml_a7a25b0b40498f4876571a5dac4e724c3"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">scram::core::Terminal::value</a></div><div class="ttdeci">bool value() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00221">bdd.h:221</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_a586864623762d731cf2f106524e19e4d"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a586864623762d731cf2f106524e19e4d">scram::core::WeakIntrusivePtr::WeakIntrusivePtr</a></div><div class="ttdeci">WeakIntrusivePtr(const IntrusivePtr&lt; T &gt; &amp;ptr) noexcept</div><div class="ttdoc">Constructs from the shared pointer. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00090">bdd.h:90</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_aeedfea1a4c3284a5f4274cda70fcd9f0"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#aeedfea1a4c3284a5f4274cda70fcd9f0">scram::core::CacheTable::find</a></div><div class="ttdeci">iterator find(const key_type &amp;key)</div><div class="ttdoc">Searches for existing entry. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00623">bdd.h:623</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml">scram::core::Terminal</a></div><div class="ttdoc">Representation of terminal vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00130">bdd.h:130</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">scram::core::Bdd::Function</a></div><div class="ttdoc">Holder of computation resultant functions and gate representations. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00696">bdd.h:696</a></div></div>
<div class="ttc" id="bdd_8h_xhtml_a3c1414c7067129c4689c40c7a2dab6de"><div class="ttname"><a href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">scram::core::IntrusivePtr</a></div><div class="ttdeci">boost::intrusive_ptr&lt; T &gt; IntrusivePtr</div><div class="ttdoc">The default management of BDD vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00045">bdd.h:45</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a9230422e92d086c34f67bcb864bfc8a9"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">scram::core::NonTerminal::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00276">bdd.h:276</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml_af48512a537e4e264379db67a0a284538"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml#af48512a537e4e264379db67a0a284538">scram::core::UniqueTable::FindOrAdd</a></div><div class="ttdeci">WeakIntrusivePtr&lt; T &gt; &amp; FindOrAdd(int index, int high_id, int low_id) noexcept</div><div class="ttdoc">Finds an existing BDD vertex or inserts a default constructed weak pointer for a new vertex...</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00450">bdd.h:450</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a22dcee106710fd2e80cbc60cc28cfe7e"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a22dcee106710fd2e80cbc60cc28cfe7e">scram::core::NonTerminal::module</a></div><div class="ttdeci">void module(bool flag)</div><div class="ttdoc">Sets this vertex for representation of a module. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00279">bdd.h:279</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_abac07f2126ed657d744a92e4f88415fd"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">scram::core::Bdd::VertexPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; VertexPtr</div><div class="ttdoc">BDD vertex base. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00692">bdd.h:692</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml">scram::core::CacheTable</a></div><div class="ttdoc">A hash table without collision resolution. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00568">bdd.h:568</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a7b184b2ba68a289aae9f3737f1d13b97"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">scram::core::NonTerminal::high</a></div><div class="ttdeci">const VertexPtr &amp; high() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00293">bdd.h:293</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_acf07d0fac040733bae80727e11f4de75"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#acf07d0fac040733bae80727e11f4de75">scram::core::NonTerminal::mark</a></div><div class="ttdeci">void mark(bool flag)</div><div class="ttdoc">Marks this vertex. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00304">bdd.h:304</a></div></div>
<div class="ttc" id="bdd_8h_xhtml_a2b39509bba3a81b0dc11f6e3acc98e25"><div class="ttname"><a href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">scram::core::ItePtr</a></div><div class="ttdeci">IntrusivePtr&lt; Ite &gt; ItePtr</div><div class="ttdoc">Shared if-then-else vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00370">bdd.h:370</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml">scram::core::Ite</a></div><div class="ttdoc">Representation of non-terminal if-then-else vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00327">bdd.h:327</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_a2b5daa48590ae16124dfd66271439c5e"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">scram::core::Bdd::Function::vertex</a></div><div class="ttdeci">VertexPtr vertex</div><div class="ttdoc">The root vertex of the BDD function graph. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00698">bdd.h:698</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_a8d99d4fdac33f8c3a9fd685a69be64da"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#a8d99d4fdac33f8c3a9fd685a69be64da">scram::core::Ite::factor</a></div><div class="ttdeci">void factor(double value)</div><div class="ttdoc">Memorized results of importance factor calculations. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00362">bdd.h:362</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_a2d70148c45468ac65bfe45f616e4f5ef"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#a2d70148c45468ac65bfe45f616e4f5ef">scram::core::CacheTable&lt; Function &gt;::key_type</a></div><div class="ttdeci">std::pair&lt; int, int &gt; key_type</div><div class="ttdoc">Public typedefs similar to the standard maps. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00573">bdd.h:573</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_a416e83f405d623db72859fabdabbcdaf"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#a416e83f405d623db72859fabdabbcdaf">scram::core::Vertex::unique</a></div><div class="ttdeci">bool unique() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00182">bdd.h:182</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_aeeaafd82ae5890a7ec3462c68ffc8628"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">scram::core::NonTerminal::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00267">bdd.h:267</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00817">pdag.cc:817</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_abed3bea3547fa39e96f4dee788311e00"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#abed3bea3547fa39e96f4dee788311e00">scram::core::Bdd::Function::swap</a></div><div class="ttdeci">void swap(Function &amp;other) noexcept</div><div class="ttdoc">Swaps with another function. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00707">bdd.h:707</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1IntrusivePtrCast_xhtml_adc53e5b89cace18e05bac95316da7d91"><div class="ttname"><a href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">scram::core::IntrusivePtrCast::Ptr</a></div><div class="ttdeci">static IntrusivePtr&lt; W &gt; Ptr(const IntrusivePtr&lt; Vertex&lt; T &gt;&gt; &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00064">bdd.h:64</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_a371345f30fc0280f2f8b45c3602d0b76"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#a371345f30fc0280f2f8b45c3602d0b76">scram::core::CacheTable::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00589">bdd.h:589</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml_a2239662bb53cff4a20a964b4606efe12"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml#a2239662bb53cff4a20a964b4606efe12">scram::core::Terminal::Terminal</a></div><div class="ttdeci">Terminal(bool value)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00214">bdd.h:214</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a7b70ab1b978f3197458c95e0891fd79c"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">scram::core::NonTerminal::mark</a></div><div class="ttdeci">bool mark() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00299">bdd.h:299</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_ad8824502634e7e5578cccbf62f71d491"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#ad8824502634e7e5578cccbf62f71d491">scram::core::Bdd::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00755">bdd.h:755</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_a01afd2bb2d5079d2391b376bc1f94871"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a01afd2bb2d5079d2391b376bc1f94871">scram::core::WeakIntrusivePtr::~WeakIntrusivePtr</a></div><div class="ttdeci">~WeakIntrusivePtr() noexcept</div><div class="ttdoc">Communicates the pointer destruction to the vertex. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00109">bdd.h:109</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_ac61be22f153df8c584a61402c511a01d"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ac61be22f153df8c584a61402c511a01d">scram::core::WeakIntrusivePtr::operator=</a></div><div class="ttdeci">WeakIntrusivePtr &amp; operator=(const IntrusivePtr&lt; T &gt; &amp;ptr) noexcept</div><div class="ttdoc">Copy assignment from shared pointers for convenient initialization with operator[] in hash tables...</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00102">bdd.h:102</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml">scram::core::UniqueTable</a></div><div class="ttdoc">A hash table for keeping BDD reduced. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00396">bdd.h:396</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_ae97b2ee82cab1f6944e8bb7c973575d6"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#ae97b2ee82cab1f6944e8bb7c973575d6">scram::core::CacheTable::emplace</a></div><div class="ttdeci">void emplace(const key_type &amp;key, const mapped_type &amp;value)</div><div class="ttdoc">Emplaces a new entry. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00642">bdd.h:642</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a2e2582f28d0ede49c566b3a6b6007422"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a2e2582f28d0ede49c566b3a6b6007422">scram::core::NonTerminal::coherent</a></div><div class="ttdeci">void coherent(bool flag)</div><div class="ttdoc">Sets the flag for coherent modules. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00287">bdd.h:287</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_a72ac21f2d1545dc570131867ea5396ff"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#a72ac21f2d1545dc570131867ea5396ff">scram::core::Ite::factor</a></div><div class="ttdeci">double factor() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00357">bdd.h:357</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_ac059e4ac83547ef311c55b7ab1954a57"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#ac059e4ac83547ef311c55b7ab1954a57">scram::core::Ite::p</a></div><div class="ttdeci">double p() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00349">bdd.h:349</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_a3fe6c9068212c03492b8104d732aeb0c"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#a3fe6c9068212c03492b8104d732aeb0c">scram::core::Ite::get_low_id</a></div><div class="ttdeci">friend int get_low_id(const Ite &amp;ite) noexcept</div><div class="ttdoc">Special handling of the complement flag in computing low id signature. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00333">bdd.h:333</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_aa2bf4709641f22f80fb9e2577a00fa6a"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#aa2bf4709641f22f80fb9e2577a00fa6a">scram::core::NonTerminal::NonTerminal</a></div><div class="ttdeci">NonTerminal(int index, int order, int id, const VertexPtr &amp;high, const VertexPtr &amp;low)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00255">bdd.h:255</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00260">pdag.h:260</a></div></div>
<div class="ttc" id="settings_8h_xhtml"><div class="ttname"><a href="settings_8h.xhtml">settings.h</a></div><div class="ttdoc">Builder for settings. </div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_aa0c4dba36b68a6a2ae496573346b887c"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">scram::core::Bdd::Function::complement</a></div><div class="ttdeci">bool complement</div><div class="ttdoc">The interpretation of the function. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00697">bdd.h:697</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">scram::core::WeakIntrusivePtr</a></div><div class="ttdoc">A weak pointer to store in BDD unique tables. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00079">bdd.h:79</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_a79d724c5571695a8aba08c0c7b729839"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#a79d724c5571695a8aba08c0c7b729839">scram::core::CacheTable&lt; Function &gt;::value_type</a></div><div class="ttdeci">std::pair&lt; key_type, mapped_type &gt; value_type</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00575">bdd.h:575</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_af3232e7d5bd5903e657d13b4b35da7ab"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#af3232e7d5bd5903e657d13b4b35da7ab">scram::core::Vertex::use_count</a></div><div class="ttdeci">int use_count() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00179">bdd.h:179</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_add5d00a3443e542b5181f0a240783623"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#add5d00a3443e542b5181f0a240783623">scram::core::Vertex::intrusive_ptr_add_ref</a></div><div class="ttdeci">friend void intrusive_ptr_add_ref(Vertex&lt; T &gt; *ptr) noexcept</div><div class="ttdoc">Increases the reference count for new intrusive pointers. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00148">bdd.h:148</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_afb58989f9673f9a3c4e3503ab882167c"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#afb58989f9673f9a3c4e3503ab882167c">scram::core::NonTerminal::get_high_id</a></div><div class="ttdeci">friend int get_high_id(const NonTerminal&lt; T &gt; &amp;vertex) noexcept</div><div class="ttdoc">Default logic for getting signature high and low ids. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00239">bdd.h:239</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_acfa7d6caa5bc11bc95cb35012169ab15"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#acfa7d6caa5bc11bc95cb35012169ab15">scram::core::Vertex::terminal</a></div><div class="ttdeci">bool terminal() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00176">bdd.h:176</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_adcdd0c5114aa6a1d32a03928adc07c49"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">scram::core::NonTerminal::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00282">bdd.h:282</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_ae34eea3bbe1aac7af2f53a041e2f6e72"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#ae34eea3bbe1aac7af2f53a041e2f6e72">scram::core::Bdd::Function::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdoc">Clears the function&amp;#39;s root vertex pointer. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00704">bdd.h:704</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_ae7c715b04659e99d0c33a005432a53ae"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#ae7c715b04659e99d0c33a005432a53ae">scram::core::CacheTable::end</a></div><div class="ttdeci">iterator end()</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00632">bdd.h:632</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_a8a4a6e9871c7b80b9951fea57617d438"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#a8a4a6e9871c7b80b9951fea57617d438">scram::core::Vertex::id</a></div><div class="ttdeci">int id() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00173">bdd.h:173</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1IntrusivePtrCast_xhtml_af153c12dc6133b7d9f9b7a57bba29f1d"><div class="ttname"><a href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">scram::core::IntrusivePtrCast::Ref</a></div><div class="ttdeci">static W &amp; Ref(const IntrusivePtr&lt; Vertex&lt; T &gt;&gt; &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00067">bdd.h:67</a></div></div>
<div class="ttc" id="bdd_8cc_xhtml_a585e12e2a71cabcfd8e90c53261060f7"><div class="ttname"><a href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">scram::core::GetPrimeNumber</a></div><div class="ttdeci">int GetPrimeNumber(int n)</div><div class="ttdoc">Prime number generation for hash tables. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8cc_source.xhtml#l00032">bdd.cc:32</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_af43b1c269c1885bac9ef9ff62cf1eeed"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#af43b1c269c1885bac9ef9ff62cf1eeed">scram::core::Bdd::products</a></div><div class="ttdeci">const Zbdd &amp; products() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00776">bdd.h:776</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_af5853746ad388f479a7aa45c5d843466"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">scram::core::NonTerminal::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00270">bdd.h:270</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_a9b730097c7f6b18e490856759038c540"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#a9b730097c7f6b18e490856759038c540">scram::core::Vertex::Vertex</a></div><div class="ttdeci">Vertex(int id)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00170">bdd.h:170</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_ad1e3be6267e1316cbc4fb440fc08dde1"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ad1e3be6267e1316cbc4fb440fc08dde1">scram::core::WeakIntrusivePtr::lock</a></div><div class="ttdeci">IntrusivePtr&lt; T &gt; lock() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00119">bdd.h:119</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_ae65df1f155adc61793c19f8849297630"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#ae65df1f155adc61793c19f8849297630">scram::core::Vertex::~Vertex</a></div><div class="ttdeci">~Vertex() noexcept</div><div class="ttdoc">Communicates the destruction via the pointer to the unique table entry if there&amp;#39;s any...</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00191">bdd.h:191</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_a53efbf8c170ca5f0dd0122d655dca012"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#a53efbf8c170ca5f0dd0122d655dca012">scram::core::CacheTable::reserve</a></div><div class="ttdeci">void reserve(int n)</div><div class="ttdoc">Prepares the table for more entries. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00607">bdd.h:607</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml">scram::core::Pdag</a></div><div class="ttdoc">PDAG is a propositional directed acyclic graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00780">pdag.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_a7d8c27c695ee3638c4a62cb60c9f48de"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#a7d8c27c695ee3638c4a62cb60c9f48de">scram::core::Ite::complement_edge</a></div><div class="ttdeci">void complement_edge(bool flag)</div><div class="ttdoc">Sets the complement flag for the low edge. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00346">bdd.h:346</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_aa393d81283ccf4a42c50d53d782b564a"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#aa393d81283ccf4a42c50d53d782b564a">scram::core::CacheTable&lt; Function &gt;::iterator</a></div><div class="ttdeci">typename container_type::iterator iterator</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00577">bdd.h:577</a></div></div>
<div class="ttc" id="pdag_8h_xhtml"><div class="ttname"><a href="pdag_8h.xhtml">pdag.h</a></div><div class="ttdoc">Classes and facilities to represent fault trees as PDAGs with event and gate indices instead of ID na...</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
