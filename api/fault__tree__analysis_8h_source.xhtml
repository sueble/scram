<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>fault_tree_analysis.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fault_tree_analysis.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fault__tree__analysis_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Fault Tree Analysis.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/iterator/iterator_facade.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/iterator/transform_iterator.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="analysis_8h.xhtml">analysis.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="pdag_8h.xhtml">pdag.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="preprocessor_8h.xhtml">preprocessor.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="settings_8h.xhtml">settings.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="zbdd_8h.xhtml">zbdd.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {  <span class="comment">// Decouple from the analysis code.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">class </span>Model;  <span class="comment">// Provider of substitutions.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span>Gate;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">class </span>BasicEvent;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// Event or its complement</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/// that may appear in products.</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Literal.xhtml">   48</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1core_1_1Literal.xhtml">Literal</a> {</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Literal.xhtml#a8cc746f6ce760d42e552446050c2eb58">   49</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="structscram_1_1core_1_1Literal.xhtml#a8cc746f6ce760d42e552446050c2eb58">complement</a>;  <span class="comment">///&lt; Indication of a complement event.</span></div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Literal.xhtml#a57f28025e4a697788da146a3eed5aa2f">   50</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">mef::BasicEvent</a>&amp; <a class="code" href="structscram_1_1core_1_1Literal.xhtml#a57f28025e4a697788da146a3eed5aa2f">event</a>;  <span class="comment">///&lt; The event in the product.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// Collection of unique literals.</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml">   54</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Product.xhtml">Product</a> {<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// Converter of indices in products to Literals.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>LiteralExtractor {<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    /// @param[in] index  The index in a result product.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /// @returns Literal representing the event with the index.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span>    <a class="code" href="structscram_1_1core_1_1Literal.xhtml">Literal</a> operator()(<span class="keywordtype">int</span> index)<span class="keyword"> const </span>{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      <span class="keywordflow">return</span> {index &lt; 0, *graph.basic_events()[std::abs(index)]};</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph;  <span class="comment">///&lt; The host graph.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  /// Initializes product literals.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  /// @param[in] data  The underlying set.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// @param[in] graph  The graph with indices to events map.</span></div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml#a44ecd0401d0b6647605a169157e8490e">   71</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Product.xhtml#a44ecd0401d0b6647605a169157e8490e">Product</a>(<span class="keyword">const</span> std::vector&lt;int&gt;&amp; data, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph) noexcept</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      : data_(data), graph_(graph) {}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">  /// @returns true for unity product with no literals.</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml#a76fc3f1f84ea87d601c5c268639137a9">   75</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml#a76fc3f1f84ea87d601c5c268639137a9">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data_.empty(); }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// @returns The number of literals in the product.</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml#a23c2873c9198ab74446508995c8925e2">   78</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml#a23c2873c9198ab74446508995c8925e2">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> data_.size(); }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  /// @returns The order of the product.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// @note An empty set indicates the Base/Unity set.</span></div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml#afdf5441ca100188ac618eb01cbc68007">   83</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml#afdf5441ca100188ac618eb01cbc68007">order</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> empty() ? 1 : size(); }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  /// @returns The product of the literal probabilities.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// @pre Events are initialized with expressions.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> p() <span class="keyword">const</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// @returns A read proxy iterator that points to the first element.</span></div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml#a22691f1e7fc53f193fb7920ddafd8a59">   91</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml#a22691f1e7fc53f193fb7920ddafd8a59">begin</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> boost::make_transform_iterator(data_.begin(),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                          LiteralExtractor{graph_});</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// @returns A sentinel iterator signifying the end of iteration.</span></div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Product.xhtml#a3c00b9727468aaa1385ce4b551106356">   97</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml#a3c00b9727468aaa1385ce4b551106356">end</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> boost::make_transform_iterator(data_.end(),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                          LiteralExtractor{graph_});</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keyword">const</span> std::vector&lt;int&gt;&amp; data_;  <span class="comment">///&lt; The collection of event indices.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph_;  <span class="comment">///&lt; The host graph.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/// A container of analysis result products with Literals.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">/// This is a wrapper of the analysis resultant ZBDD to work with Literals.</span></div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml">  109</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml">ProductContainer</a> {<span class="comment"></span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// Converter of analysis products with indices into products with literals.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>ProductExtractor {<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">    /// @param[in] product  The product with indices from analysis results.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    /// @returns The wrapped product of Literals.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1core_1_1Product.xhtml">Product</a> operator()(<span class="keyword">const</span> std::vector&lt;int&gt;&amp; product)<span class="keyword"> const </span>{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml">Product</a>(product, graph);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph;  <span class="comment">///&lt; The host graph.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">  /// The constructor also collects basic events in products.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  /// @param[in] products  Sets with indices of events from calculations.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  /// @param[in] graph  PDAG with basic event indices and pointers.</span></div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml#a3659ceecbf0e435a9e6ed90d21daee37">  126</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml#a3659ceecbf0e435a9e6ed90d21daee37">ProductContainer</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; products, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph) noexcept</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      : products_(products), graph_(graph) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classext_1_1index__map.xhtml">Pdag::IndexMap&lt;bool&gt;</a> filter(graph_.basic_events().size());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::vector&lt;int&gt;&amp; result_set : products_) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i : result_set) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        i = std::abs(i);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">if</span> (filter[i])</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;          <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        filter[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        product_events_.insert(graph_.basic_events()[i]);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @returns Collection of basic events that are in the products.</span></div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml#a4f01887850f3bf444d3e1c9ec5780b69">  141</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::unordered_set&lt;const mef::BasicEvent*&gt;&amp; <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml#a4f01887850f3bf444d3e1c9ec5780b69">product_events</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> product_events_;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// Begin and end iterators over products in the container.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml#ae3c4f3a13d162014a7e7bd35c12f4bcf">  147</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml#ae3c4f3a13d162014a7e7bd35c12f4bcf">begin</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">return</span> boost::make_transform_iterator(products_.begin(),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                          ProductExtractor{graph_});</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml#a4a9686486629c618012e41c004303540">  151</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml#a4a9686486629c618012e41c004303540">end</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> boost::make_transform_iterator(products_.end(),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                          ProductExtractor{graph_});</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">  /// @returns true if no products in the container.</span></div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml#ac48d179d37d1109d36bf2d36e02aebe7">  158</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml#ac48d179d37d1109d36bf2d36e02aebe7">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> products_.empty(); }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">  /// @returns The number of products in the container.</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProductContainer.xhtml#ac02fbe13144218abf07fdd6ba9c8b532">  161</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml#ac02fbe13144218abf07fdd6ba9c8b532">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> products_.size(); }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  /// @returns The product distribution by order.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span>  std::vector&lt;int&gt; Distribution() <span class="keyword">const</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; products_;  <span class="comment">///&lt; Container of analysis results.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph_;  <span class="comment">///&lt; The analysis graph.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span><span class="comment">  /// The set of events in the resultant products.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span>  std::unordered_set&lt;const mef::BasicEvent*&gt; product_events_;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;};</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">/// Prints a collection of products to the standard error.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">/// This is a helper function for easier debugging</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">/// and visual comparison of analysis results.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">/// Summary of the number of products and</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">/// its size distribution is printed first.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">/// Then, all products are grouped by size and sorted.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">/// The literals of a product are sorted by their names.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">/// @param[in] products  Valid, unique collection of analysis results.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="fault__tree__analysis_8cc.xhtml#af405213a7ee34a3dd833ce5298983b04">Print</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml">ProductContainer</a>&amp; products);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">/// Fault tree analysis functionality.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">/// The analysis must be done on</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/// a validated and fully initialized fault trees.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">/// After initialization of the analysis,</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">/// the fault tree under analysis should not change;</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">/// otherwise, the success of the analysis is not guaranteed,</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">/// and the results may be invalid.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">/// After the requested analysis is done,</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">/// the fault tree can be changed without restrictions.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">/// However, other analyses may rely on unchanged fault tree</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">/// to use the results of this fault tree analysis.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">/// To conduct a new analysis on the changed fault tree,</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">/// a new FaultTreeAnalysis object must be created.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">/// In general, rerunning the same analysis twice</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">/// will mess up the analysis and corrupt the previous results.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">/// @warning Run analysis only once.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">///          One analysis per FaultTreeAnalysis object.</span></div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">  203</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">FaultTreeAnalysis</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Analysis.xhtml">Analysis</a> {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">  /// Traverses a valid fault tree from the root gate</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">  /// to collect databases of events, gates,</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// and other members of the fault tree.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  /// The passed fault tree must be pre-validated without cycles,</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  /// and its events must be fully initialized.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  /// @param[in] root  The top event of the fault tree to analyze.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">  /// @param[in] settings  Analysis settings for all calculations.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">  /// @param[in] model  The Model containing substitutions if any.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">  /// @note It is assumed that analysis is done only once.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  /// @warning If the fault tree structure is changed,</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  ///          this analysis does not incorporate the changed structure.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  ///          Moreover, the analysis results may get corrupted.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">FaultTreeAnalysis</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">mef::Gate</a>&amp; root, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml">mef::Model</a>* model = <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">FaultTreeAnalysis</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">  /// @returns The top gate that is passed to the analysis.</span></div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a92d788d624b1d726fadf51960af052a9">  226</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">mef::Gate</a>&amp; <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a92d788d624b1d726fadf51960af052a9">top_event</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> top_event_; }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  /// Analyzes the fault tree and performs computations.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">  /// This function must be called</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">  /// only after initializing the fault tree</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  /// with or without its probabilities.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// @note This function is expected to be called only once.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// @warning If the original fault tree is invalid,</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">  ///          this function will not throw or indicate any errors.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  ///          The behavior is undefined for invalid fault trees.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">  /// @warning If the fault tree structure has changed</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">  ///          since the construction of the analysis,</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  ///          the analysis will be invalid or fail.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Analyze() noexcept;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">  /// @returns A collection of Boolean products as the analysis results.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">  /// @pre The analysis is done.</span></div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a2f72ce18bab118ab1949ae70f16d9203">  246</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1ProductContainer.xhtml">ProductContainer</a>&amp; <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a2f72ce18bab118ab1949ae70f16d9203">products</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    assert(products_ &amp;&amp; <span class="stringliteral">&quot;The analysis is not done!&quot;</span>);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">return</span> *products_;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">  /// @returns Pointer to the PDAG representing the fault tree.</span></div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#afb76572c7b6ed0e3063eec7e40dd0cce">  253</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#afb76572c7b6ed0e3063eec7e40dd0cce">graph</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> graph_.get(); }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">  /// Preprocesses a PDAG for future analysis with a specific algorithm.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">  /// @param[in,out] graph  A valid PDAG for analysis.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">  /// @post The graph transformation is semantically equivalent/isomorphic.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Preprocess(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept = 0;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">  /// Generates a sum of products from a preprocessed PDAG.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">  /// @param[in] graph  The analysis PDAG.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">  /// @returns The set of products.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// @pre The graph is specifically preprocessed for the algorithm.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">  /// @post The result ZBDD lives as long as the host analysis.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; GenerateProducts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept = 0;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// Stores resultant sets of products for future reporting.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">  /// @param[in] products  Sets with indices of events from calculations.</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  /// @param[in] graph  PDAG with basic event indices and pointers.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Store(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; products, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph) noexcept;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">mef::Gate</a>&amp; top_event_;  <span class="comment">///&lt; The root of the graph under analysis.</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml">mef::Model</a>* model_;  <span class="comment">///&lt; The optional Model with substitutions.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;Pdag&gt; graph_;  <span class="comment">///&lt; PDAG of the fault tree.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;const ProductContainer&gt; products_;  <span class="comment">///&lt; Container of results.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">/// Fault tree analysis facility with specific algorithms.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">/// This class is meant to be specialized by fault tree analysis algorithms.</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">/// @tparam Algorithm  Fault tree analysis algorithm.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Algorithm&gt;</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">  291</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">FaultTreeAnalyzer</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">FaultTreeAnalysis</a> {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keyword">using</span> FaultTreeAnalysis::FaultTreeAnalysis;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keyword">using</span> FaultTreeAnalysis::graph;  <span class="comment">// Provide access to other analyses.</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">  /// @returns The analysis algorithm for use by other analyses.</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml#a306ce3db289e08e34def4337360b117b">  298</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="settings_8h.xhtml#a7df85ec0a62c870427f0590141cf14fa">Algorithm</a>* <a class="code" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml#a306ce3db289e08e34def4337360b117b">algorithm</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> algorithm_.get(); }</div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml#aedae0c884539dab245018194771f5021">  299</a></span>&#160;  <a class="code" href="settings_8h.xhtml#a7df85ec0a62c870427f0590141cf14fa">Algorithm</a>* <a class="code" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml#aedae0c884539dab245018194771f5021">algorithm</a>() { <span class="keywordflow">return</span> algorithm_.get(); }<span class="comment"></span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordtype">void</span> Preprocess(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classscram_1_1core_1_1CustomPreprocessor.xhtml">CustomPreprocessor&lt;Algorithm&gt;</a>{graph}();</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; GenerateProducts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    algorithm_ = std::make_unique&lt;Algorithm&gt;(graph, Analysis::settings());</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    algorithm_-&gt;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aac27b9279de1ee1a63822896daeca0c7">Analyze</a>(graph);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> algorithm_-&gt;products();</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  std::unique_ptr&lt;Algorithm&gt; algorithm_;  <span class="comment">///&lt; Analysis algorithm.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="preprocessor_8h_xhtml"><div class="ttname"><a href="preprocessor_8h.xhtml">preprocessor.h</a></div><div class="ttdoc">A collection of PDAG transformation/preprocessing algorithms that simplify fault trees for analysis...</div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml">scram::core::Product</a></div><div class="ttdoc">Collection of unique literals. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00054">fault_tree_analysis.h:54</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml">scram::core::Zbdd</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagrams for set manipulations. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00130">zbdd.h:130</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Literal_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Literal.xhtml">scram::core::Literal</a></div><div class="ttdoc">Event or its complement that may appear in products. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00048">fault_tree_analysis.h:48</a></div></div>
<div class="ttc" id="fault__tree__analysis_8cc_xhtml_af405213a7ee34a3dd833ce5298983b04"><div class="ttname"><a href="fault__tree__analysis_8cc.xhtml#af405213a7ee34a3dd833ce5298983b04">scram::core::Print</a></div><div class="ttdeci">void Print(const ProductContainer &amp;products)</div><div class="ttdoc">Prints a collection of products to the standard error. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00034">fault_tree_analysis.cc:34</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml"><div class="ttname"><a href="zbdd_8h.xhtml">zbdd.h</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagram facilities. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalyzer_xhtml_a306ce3db289e08e34def4337360b117b"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml#a306ce3db289e08e34def4337360b117b">scram::core::FaultTreeAnalyzer::algorithm</a></div><div class="ttdeci">const Algorithm * algorithm() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00298">fault_tree_analysis.h:298</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml_ac48d179d37d1109d36bf2d36e02aebe7"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml#ac48d179d37d1109d36bf2d36e02aebe7">scram::core::ProductContainer::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00158">fault_tree_analysis.h:158</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aac27b9279de1ee1a63822896daeca0c7"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aac27b9279de1ee1a63822896daeca0c7">scram::core::Zbdd::Analyze</a></div><div class="ttdeci">void Analyze(const Pdag *graph=nullptr) noexcept</div><div class="ttdoc">Runs the analysis with the representation of a PDAG as ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00087">zbdd.cc:87</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml_a92d788d624b1d726fadf51960af052a9"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a92d788d624b1d726fadf51960af052a9">scram::core::FaultTreeAnalysis::top_event</a></div><div class="ttdeci">const mef::Gate &amp; top_event() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00226">fault_tree_analysis.h:226</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml_a3659ceecbf0e435a9e6ed90d21daee37"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml#a3659ceecbf0e435a9e6ed90d21daee37">scram::core::ProductContainer::ProductContainer</a></div><div class="ttdeci">ProductContainer(const Zbdd &amp;products, const Pdag &amp;graph) noexcept</div><div class="ttdoc">The constructor also collects basic events in products. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00126">fault_tree_analysis.h:126</a></div></div>
<div class="ttc" id="settings_8h_xhtml_a7df85ec0a62c870427f0590141cf14fa"><div class="ttname"><a href="settings_8h.xhtml#a7df85ec0a62c870427f0590141cf14fa">scram::core::Algorithm</a></div><div class="ttdeci">Algorithm</div><div class="ttdoc">Qualitative analysis algorithms. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00030">settings.h:30</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalyzer_xhtml_aedae0c884539dab245018194771f5021"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml#aedae0c884539dab245018194771f5021">scram::core::FaultTreeAnalyzer::algorithm</a></div><div class="ttdeci">Algorithm * algorithm()</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00299">fault_tree_analysis.h:299</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Literal_xhtml_a57f28025e4a697788da146a3eed5aa2f"><div class="ttname"><a href="structscram_1_1core_1_1Literal.xhtml#a57f28025e4a697788da146a3eed5aa2f">scram::core::Literal::event</a></div><div class="ttdeci">const mef::BasicEvent &amp; event</div><div class="ttdoc">The event in the product. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00050">fault_tree_analysis.h:50</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml_ae3c4f3a13d162014a7e7bd35c12f4bcf"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml#ae3c4f3a13d162014a7e7bd35c12f4bcf">scram::core::ProductContainer::begin</a></div><div class="ttdeci">auto begin() const </div><div class="ttdoc">Begin and end iterators over products in the container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00147">fault_tree_analysis.h:147</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml_a2f72ce18bab118ab1949ae70f16d9203"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a2f72ce18bab118ab1949ae70f16d9203">scram::core::FaultTreeAnalysis::products</a></div><div class="ttdeci">const ProductContainer &amp; products() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00246">fault_tree_analysis.h:246</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a44ecd0401d0b6647605a169157e8490e"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a44ecd0401d0b6647605a169157e8490e">scram::core::Product::Product</a></div><div class="ttdeci">Product(const std::vector&lt; int &gt; &amp;data, const Pdag &amp;graph) noexcept</div><div class="ttdoc">Initializes product literals. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00071">fault_tree_analysis.h:71</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Literal_xhtml_a8cc746f6ce760d42e552446050c2eb58"><div class="ttname"><a href="structscram_1_1core_1_1Literal.xhtml#a8cc746f6ce760d42e552446050c2eb58">scram::core::Literal::complement</a></div><div class="ttdeci">bool complement</div><div class="ttdoc">Indication of a complement event. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00049">fault_tree_analysis.h:49</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml_a4a9686486629c618012e41c004303540"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml#a4a9686486629c618012e41c004303540">scram::core::ProductContainer::end</a></div><div class="ttdeci">auto end() const </div><div class="ttdoc">Begin and end iterators over products in the container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00151">fault_tree_analysis.h:151</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml">scram::mef::Model</a></div><div class="ttdoc">This class represents a risk analysis model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00043">model.h:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a3c00b9727468aaa1385ce4b551106356"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a3c00b9727468aaa1385ce4b551106356">scram::core::Product::end</a></div><div class="ttdeci">auto end() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00097">fault_tree_analysis.h:97</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml_a4f01887850f3bf444d3e1c9ec5780b69"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml#a4f01887850f3bf444d3e1c9ec5780b69">scram::core::ProductContainer::product_events</a></div><div class="ttdeci">const std::unordered_set&lt; const mef::BasicEvent * &gt; &amp; product_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00141">fault_tree_analysis.h:141</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a23c2873c9198ab74446508995c8925e2"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a23c2873c9198ab74446508995c8925e2">scram::core::Product::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00078">fault_tree_analysis.h:78</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_afdf5441ca100188ac618eb01cbc68007"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#afdf5441ca100188ac618eb01cbc68007">scram::core::Product::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00083">fault_tree_analysis.h:83</a></div></div>
<div class="ttc" id="settings_8h_xhtml"><div class="ttname"><a href="settings_8h.xhtml">settings.h</a></div><div class="ttdoc">Builder for settings. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Analysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Analysis.xhtml">scram::core::Analysis</a></div><div class="ttdoc">Base abstract class for all analysis with settings. </div><div class="ttdef"><b>Definition:</b> <a href="analysis_8h_source.xhtml#l00034">analysis.h:34</a></div></div>
<div class="ttc" id="classext_1_1index__map_xhtml"><div class="ttname"><a href="classext_1_1index__map.xhtml">ext::index_map</a></div><div class="ttdoc">An adaptor map to shift zero-based containers to a different base. </div><div class="ttdef"><b>Definition:</b> <a href="index__map_8h_source.xhtml#l00037">index_map.h:37</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml_afb76572c7b6ed0e3063eec7e40dd0cce"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#afb76572c7b6ed0e3063eec7e40dd0cce">scram::core::FaultTreeAnalysis::graph</a></div><div class="ttdeci">const Pdag * graph() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00253">fault_tree_analysis.h:253</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a76fc3f1f84ea87d601c5c268639137a9"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a76fc3f1f84ea87d601c5c268639137a9">scram::core::Product::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00075">fault_tree_analysis.h:75</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CustomPreprocessor_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1CustomPreprocessor.xhtml">scram::core::CustomPreprocessor</a></div><div class="ttdoc">Undefined template class for specialization of Preprocessor for needs of specific analysis algorithms...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l01003">preprocessor.h:1003</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml">scram::core::ProductContainer</a></div><div class="ttdoc">A container of analysis result products with Literals. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00109">fault_tree_analysis.h:109</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml">scram::core::Pdag</a></div><div class="ttdoc">PDAG is a propositional directed acyclic graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00780">pdag.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">scram::core::FaultTreeAnalysis</a></div><div class="ttdoc">Fault tree analysis functionality. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00203">fault_tree_analysis.h:203</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a22691f1e7fc53f193fb7920ddafd8a59"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a22691f1e7fc53f193fb7920ddafd8a59">scram::core::Product::begin</a></div><div class="ttdeci">auto begin() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00091">fault_tree_analysis.h:91</a></div></div>
<div class="ttc" id="analysis_8h_xhtml"><div class="ttname"><a href="analysis_8h.xhtml">analysis.h</a></div><div class="ttdoc">Common facilities for all analysis classes. </div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalyzer_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">scram::core::FaultTreeAnalyzer</a></div><div class="ttdoc">Fault tree analysis facility with specific algorithms. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00291">fault_tree_analysis.h:291</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProductContainer_xhtml_ac02fbe13144218abf07fdd6ba9c8b532"><div class="ttname"><a href="classscram_1_1core_1_1ProductContainer.xhtml#ac02fbe13144218abf07fdd6ba9c8b532">scram::core::ProductContainer::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00161">fault_tree_analysis.h:161</a></div></div>
<div class="ttc" id="pdag_8h_xhtml"><div class="ttname"><a href="pdag_8h.xhtml">pdag.h</a></div><div class="ttdoc">Classes and facilities to represent fault trees as PDAGs with event and gate indices instead of ID na...</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
