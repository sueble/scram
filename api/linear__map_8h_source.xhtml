<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>linear_map.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aff658140b5e7b3b627b7275c534a858.xhtml">ext</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">linear_map.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="linear__map_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2016-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of a vector-based map for a small number of entries.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;initializer_list&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceext.xhtml">ext</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">/// Default erase policy for containers with iterators.</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="structext_1_1DefaultEraser.xhtml">   34</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structext_1_1DefaultEraser.xhtml">DefaultEraser</a> {<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">  /// Erases an element from a container with its default ``erase`` API.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  /// @tparam T  The container type.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">  /// @tparam Iterator  The iterator type belonging to the container.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">  /// @param[in] it  The iterator pointing to the element.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">  /// @param[in,out] container  The host container.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">  /// @returns The iterator as the result of call to the container&#39;s ``erase``.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Iterator&gt;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structext_1_1DefaultEraser.xhtml#af4894263ffb30dee60dba4fbf4169702">   47</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">typename</span> T::iterator <a class="code" href="structext_1_1DefaultEraser.xhtml#af4894263ffb30dee60dba4fbf4169702">erase</a>(Iterator it, T* container) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> container-&gt;erase(it);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// Erase policy based on moving the last element to the erased element.</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="structext_1_1MoveEraser.xhtml">   54</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structext_1_1MoveEraser.xhtml">MoveEraser</a> {<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// Moves the last element into the to-be-erased element.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  /// Then, the last element is popped back.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  /// This is an efficient, constant time operation for contiguous containers.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  /// @tparam T  The container type.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @param[in] it  The iterator pointing to the element.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// @param[in,out] container  The host container.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  /// @returns The iterator pointing to the original position.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">  /// @warning The order of elements is changed after this erase.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="structext_1_1MoveEraser.xhtml#ae62dacc3ad0d9791babf8a3fb5caf599">   70</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">typename</span> T::iterator <a class="code" href="structext_1_1MoveEraser.xhtml#ae62dacc3ad0d9791babf8a3fb5caf599">erase</a>(<span class="keyword">typename</span> T::iterator it, T* container) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (it != std::prev(container-&gt;end())) {  <span class="comment">// Prevent move into itself.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      *it = std::move(container-&gt;back());</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    container-&gt;pop_back();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> it;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="structext_1_1MoveEraser.xhtml#ac8f0e27fd113775a5f77833c6ca5161c">   78</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">typename</span> T::iterator <a class="code" href="structext_1_1MoveEraser.xhtml#ac8f0e27fd113775a5f77833c6ca5161c">erase</a>(<span class="keyword">typename</span> T::const_iterator it,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                    T* container) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structext_1_1DefaultEraser.xhtml#af4894263ffb30dee60dba4fbf4169702">erase</a>(</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        std::next(container-&gt;begin(), std::distance(container-&gt;cbegin(), it)),</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        container);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">/// An adaptor map with lookup complexity O(N)</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/// based on sequence (contiguous structure by default).</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">/// This map is designed for a small number of elements</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">/// and for small &lt;Key, Value&gt; size pairs.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">/// Consider this class a convenient wrapper</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">/// around std::vector&lt;std::pair&lt;Key, Value&gt;&gt;.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">/// Since this map is based on the vector by default,</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">/// the order of insertions is preserved,</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/// and it provides random access iterators.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">/// The major differences from the standard library maps:</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">///   1. The entry is std::pair&lt;Key, Value&gt;</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">///      instead of std::pair&lt;const Key, Value&gt;,</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">///      which means that the key can be modified</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">///      as long as it stays unique.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">///   2. Iterators, references, pointers can be invalidated</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">///      by modifier functions (insert, erase, reserve, etc.).</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">///      This is the inherited behavior from std::vector.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">///   3. Some API may be extra or missing.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">/// The performance of the map critically depends on the number of entries,</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/// the size of the key-value pair, and the cost of comparing keys for equality.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/// The advantage of the linear_map comes from cache-friendliness,</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/// and fewer CPU front-end and back-end stalls.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">/// From crude experimental results with random entries</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/// comparing with std::map, std::unordered_map, boost::flat_map:</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">///   1. For Key=int, Value=Object, sizeof(Object)=24,</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">///      the linear_map outperforms up to 50 entries.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">///   2. For Key=std::string(20 char), Value=Object, sizeof(Object)=24,</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">///      the linear_map performs equally well up to 10 entries.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/// @tparam Key  The type of the unique keys.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">/// @tparam Value  The type of the values associated with the keys.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">/// @tparam ErasePolicy  The policy class that provides</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">///                      ``erase(it, *container)`` static member function</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">///                      to control the element erasure from the container.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/// @tparam Sequence  The underlying container type.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> Value, <span class="keyword">class </span>ErasePolicy = <a class="code" href="structext_1_1DefaultEraser.xhtml">DefaultEraser</a>,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;          <span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="keyword">class </span>Sequence = std::vector&gt;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml">  133</a></span>&#160;<span class="keyword">class </span><a class="code" href="classext_1_1linear__map.xhtml">linear_map</a> {<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">  /// Non-member equality test operators.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// The complexity is O(N^2).</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// @param[in] lhs  First map.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  /// @param[in] rhs  Second map.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @note The order of elements is not relevant.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  ///       If the order matters for equality,</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  ///       compare the underlying data containers directly.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#aed65ea0822cc8269b308d57787010870">  145</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classext_1_1linear__map.xhtml#aed65ea0822cc8269b308d57787010870">operator==</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; rhs) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> (lhs.<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>() != rhs.<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>())</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; entry : lhs) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <span class="keywordflow">if</span> (std::find(rhs.<a class="code" href="classext_1_1linear__map.xhtml#ad8dfe218d1150800f39b8e78d5be7c75">begin</a>(), rhs.<a class="code" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">end</a>(), entry) == rhs.<a class="code" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">end</a>())</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a8bf1e8e739a7c2442fad8c169abb08b4">  154</a></span>&#160;  <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="classext_1_1linear__map.xhtml#a8bf1e8e739a7c2442fad8c169abb08b4">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; rhs) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> !(lhs == rhs);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">  /// Friend swap definition for convenience sake.</span></div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a63f097fd1b9f4f32564bd061273247ab">  160</a></span>&#160;<span class="comment"></span>  <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__map.xhtml#a63f097fd1b9f4f32564bd061273247ab">swap</a>(<a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; lhs, <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; rhs) noexcept { lhs.swap(rhs); }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  /// Public typedefs.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">  165</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> = Key;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">  166</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> = Value;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">  167</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> = std::pair&lt;key_type, mapped_type&gt;;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">  168</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a> = Sequence&lt;value_type&gt;;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  /// Iterator-related typedefs redeclared from the underlying container type.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a6657f9cf6deefe12d60e7b80419c8333">  173</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a6657f9cf6deefe12d60e7b80419c8333">pointer</a> = <span class="keyword">typename</span> container_type::pointer;</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a47f3bcbd6eb0595f57e5b3f92aebca8e">  174</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a47f3bcbd6eb0595f57e5b3f92aebca8e">const_pointer</a> = <span class="keyword">typename</span> container_type::const_pointer;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#aa5f1e65fd39acf65e6fcceee7f5e3e5b">  175</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#aa5f1e65fd39acf65e6fcceee7f5e3e5b">reference</a> = <span class="keyword">typename</span> container_type::reference;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a3997bb00bff2678cd2edc5030afa6d99">  176</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a3997bb00bff2678cd2edc5030afa6d99">const_reference</a> = <span class="keyword">typename</span> container_type::const_reference;</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">  177</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> = <span class="keyword">typename</span> container_type::iterator;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">  178</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> = <span class="keyword">typename</span> container_type::const_iterator;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">  179</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">reverse_iterator</a> = <span class="keyword">typename</span> container_type::reverse_iterator;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a> =</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">  181</a></span>&#160;      <span class="keyword">typename</span> container_type::const_reverse_iterator;</div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">  182</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> = <span class="keyword">typename</span> container_type::size_type;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a569edcfc908d1ebc4c6b6f8c027a3eea">  183</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml#a569edcfc908d1ebc4c6b6f8c027a3eea">difference_type</a> = <span class="keyword">typename</span> container_type::difference_type;<span class="comment"></span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  /// Standard constructors and assignment operators.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a26ba19259697099d1252d79e85e0e31a">  189</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a26ba19259697099d1252d79e85e0e31a">linear_map</a>(std::initializer_list&lt;value_type&gt; init_list) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classext_1_1linear__map.xhtml#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">linear_map::insert</a>(init_list.begin(), init_list.end());</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a02fc42c5760e5c1fa551861044c81a3f">  194</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a02fc42c5760e5c1fa551861044c81a3f">linear_map</a>(Iterator first1, Iterator last1) {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="classext_1_1linear__map.xhtml#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">linear_map::insert</a>(first1, last1);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#abe6e570aee690d61e44ce1b2d530103c">  198</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#abe6e570aee690d61e44ce1b2d530103c">linear_map</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; lm) : map_(lm.map_) {}</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#aca979eb4f044ce1232ff90a47f96cd19">  199</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#aca979eb4f044ce1232ff90a47f96cd19">linear_map</a>(<a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp;&amp; lm) noexcept : map_(std::move(lm.map_)) {}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a87e9f68f710455fc8a3f76742c0b9532">  201</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a87e9f68f710455fc8a3f76742c0b9532">operator=</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; lm) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    map_ = lm.map_;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  }</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a78a7d7e9abef7b0574d8952465d40d74">  205</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a78a7d7e9abef7b0574d8952465d40d74">operator=</a>(<a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp;&amp; lm) noexcept {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    map_ = std::move(lm.map_);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  /// Finds an entry in the map.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">  /// @returns Iterator pointing to the entry,</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">  ///          or end() if not found.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">  218</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">find</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key)<span class="keyword"> const </span>{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> std::find_if(map_.cbegin(), map_.cend(),</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        [&amp;key](<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a>&amp; p) { <span class="keywordflow">return</span> p.first == key; });</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#ab0cd640adc0a08564eaaa7c20fe2074f">  223</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#ab0cd640adc0a08564eaaa7c20fe2074f">find</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key) {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">return</span> std::find_if(map_.begin(), map_.end(),</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        [&amp;key](<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a>&amp; p) { <span class="keywordflow">return</span> p.first == key; });</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">  /// Determines if an entry with the given key in the map.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// @returns 1 if there&#39;s an entry,</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  ///          0 otherwise.</span></div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a06ea6f3a7b047a36ebf53e4af2211161">  235</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="code" href="classext_1_1linear__map.xhtml#a06ea6f3a7b047a36ebf53e4af2211161">count</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key)<span class="keyword"> const </span>{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(key) != map_.end();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">  /// Accesses an existing or default constructed entry.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">  /// @returns A reference to the value of the entry.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a5a9ff2b51ccd613fe71b0ba392c0a333">  246</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a5a9ff2b51ccd613fe71b0ba392c0a333">operator[]</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key) {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(key);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">if</span> (it != map_.end())</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    map_.emplace_back(key, <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>());</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">return</span> map_.back().second;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a164ff23607ed32c6701bddad87b99e4d">  254</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a164ff23607ed32c6701bddad87b99e4d">operator[]</a>(<a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp;&amp; key) {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(key);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (it != map_.end())</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    map_.emplace_back(std::move(key), <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>());</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> map_.back().second;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">  /// Accesses the value of the entry.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">  /// @returns The reference to the value.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// @throws std::out_of_range  The entry is not in the map.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#abec7fa7fbdc9f24e5028ba4db54c1eb4">  272</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#abec7fa7fbdc9f24e5028ba4db54c1eb4">at</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key)<span class="keyword"> const </span>{</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(key);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">if</span> (it == map_.end())</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      <span class="keywordflow">throw</span> std::out_of_range(<span class="stringliteral">&quot;Key is not found.&quot;</span>);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a88d6b52e8f9bcf984401462f852934cf">  279</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a88d6b52e8f9bcf984401462f852934cf">at</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key) {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp;<span class="keyword">&gt;</span>(std::as_const(*this).at(key));</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">  /// Inserts a key-value pair into the map</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  /// if the pair is not in the map.</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">  /// @param[in] p  The entry.</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">  /// @returns A pair of an iterator and insertion flag.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">  ///          The iterator points to possibly inserted entry,</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">  ///          and the flag indicates whether the entry is actually inserted.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">  293</a></span>&#160;<span class="comment"></span>  std::pair&lt;iterator, bool&gt; <a class="code" href="classext_1_1linear__map.xhtml#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">insert</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a>&amp; p) {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(p.first);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span> (it != map_.end())</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      <span class="keywordflow">return</span> {it, <span class="keyword">false</span>};</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    map_.push_back(p);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">return</span> {std::prev(map_.end()), <span class="keyword">true</span>};</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  }</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a23a9233e73a24629346fca99f7dcde3f">  301</a></span>&#160;  std::pair&lt;iterator, bool&gt; <a class="code" href="classext_1_1linear__map.xhtml#a23a9233e73a24629346fca99f7dcde3f">insert</a>(<a class="code" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a>&amp;&amp; p) {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(p.first);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> (it != map_.end())</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      <span class="keywordflow">return</span> {it, <span class="keyword">false</span>};</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    map_.emplace_back(std::forward&lt;value_type&gt;(p));</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> {std::prev(map_.end()), <span class="keyword">true</span>};</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">  /// Inserts a range of elements.</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">  /// The range is not assumed to be unique.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  /// @tparam Iterator  Iterator to the container with key-value pairs.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  /// @param[in] first1  The beginning of the range.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">  /// @param[in] last1  The end of the range.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#abb3ce552aa69dc84e406c59efb6ef11a">  318</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__map.xhtml#abb3ce552aa69dc84e406c59efb6ef11a">insert</a>(Iterator first1, Iterator last1) {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">for</span> (; first1 != last1; ++first1) {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(first1-&gt;first) == map_.end())</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        map_.push_back(*first1);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">  /// Attempts to build and insert an entry.</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">  /// @param[in] args  Arguments for the construction of the entry.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  /// @returns An iterator pointing to the entry,</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">  ///          and a flag indicating if the insertion actually happened.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a855a9757f53ba88c68240141f1d86bbd">  332</a></span>&#160;  std::pair&lt;iterator, bool&gt; <a class="code" href="classext_1_1linear__map.xhtml#a855a9757f53ba88c68240141f1d86bbd">emplace</a>(Ts&amp;&amp;... args) {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> p(std::forward&lt;Ts&gt;(args)...);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(p.first);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">if</span> (it != map_.end())</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      <span class="keywordflow">return</span> {it, <span class="keyword">false</span>};</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    map_.emplace_back(std::move(p));</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">return</span> {std::prev(map_.end()), <span class="keyword">true</span>};</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">  /// Erases the entry pointed by an iterator.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">  /// @param[in] pos  An iterator pointing to the entry.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">  /// @returns An iterator pointing after the entry.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#acdd54fa2cbba082a782a5d63391cf34c">  348</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#acdd54fa2cbba082a782a5d63391cf34c">erase</a>(<a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> pos) { <span class="keywordflow">return</span> ErasePolicy::erase(pos, &amp;map_); }</div><div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#aeb89a7d90ae3efbdb066954169b784f3">  349</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#aeb89a7d90ae3efbdb066954169b784f3">erase</a>(<a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> pos) { <span class="keywordflow">return</span> ErasePolicy::erase(pos, &amp;map_); }<span class="comment"></span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">  /// Erases the entry with a key.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">  /// @param[in] key  The key of the entry.</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">  /// @returns 1 if the existing entry has been removed,</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">  ///          0 if there&#39;s no entry with the given key.</span></div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a320f5c3dca95395b7a81c6a0713c8e30">  358</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="code" href="classext_1_1linear__map.xhtml#a320f5c3dca95395b7a81c6a0713c8e30">erase</a>(<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>&amp; key) {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> it = <a class="code" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">linear_map::find</a>(key);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">if</span> (it == map_.end())</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;      <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="classext_1_1linear__map.xhtml#acdd54fa2cbba082a782a5d63391cf34c">linear_map::erase</a>(it);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">  /// Swaps data with another linear map.</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">  /// @param[in] other  Another linear map.</span></div><div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a8fdd1bb039314a9dcab50830d4a888aa">  369</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__map.xhtml#a8fdd1bb039314a9dcab50830d4a888aa">swap</a>(<a class="code" href="classext_1_1linear__map.xhtml">linear_map</a>&amp; other) noexcept { map_.swap(other.map_); }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">  /// @returns The number of entries in the map.</span></div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">  372</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.size(); }</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">  /// @returns true if there are no entries.</span></div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#ac00cd6c6940c6bf4e20bd0c5463a4d84">  375</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classext_1_1linear__map.xhtml#ac00cd6c6940c6bf4e20bd0c5463a4d84">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.empty(); }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">  /// Erases all entries in the map.</span></div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a7277ab7dad0815073650b2977ac8ad97">  378</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__map.xhtml#a7277ab7dad0815073650b2977ac8ad97">clear</a>() noexcept { map_.clear(); }</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">  /// Prepares the linear map for a specified number of entries.</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">  /// @param[in] n  The number of expected entries.</span></div><div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#aaaefd7cd0b5bd51c1db2ef4fc8c278ca">  383</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classext_1_1linear__map.xhtml#aaaefd7cd0b5bd51c1db2ef4fc8c278ca">reserve</a>(<a class="code" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> n) { map_.reserve(n); }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">  /// @returns The capacity of the underlying container.</span></div><div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a666f42e1f29d2062dfacff308e5621e1">  386</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="code" href="classext_1_1linear__map.xhtml#a666f42e1f29d2062dfacff308e5621e1">capacity</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.capacity(); }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">  /// @returns The underlying data container.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">  ///          The container elements are ordered exactly as inserted.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a6ce9a2702adb36c3ae89057a1d968050">  391</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a6ce9a2702adb36c3ae89057a1d968050">data</a>() { <span class="keywordflow">return</span> map_; }</div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a6bce69fc69d62c2d32a9d370d9114bed">  392</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a>&amp; <a class="code" href="classext_1_1linear__map.xhtml#a6bce69fc69d62c2d32a9d370d9114bed">data</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_; }<span class="comment"></span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">  /// @returns A read/write iterator pointing to the first entry.</span></div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#ad8dfe218d1150800f39b8e78d5be7c75">  396</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#ad8dfe218d1150800f39b8e78d5be7c75">begin</a>() { <span class="keywordflow">return</span> map_.begin(); }<span class="comment"></span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">  /// @returns A read/write iterator pointing one past the last entry.</span></div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">  398</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">end</a>() { <span class="keywordflow">return</span> map_.end(); }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">  /// @returns A read-only iterator pointing to the first entry.</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a7b2d64818fa12efec3ab6b73cf3b9f6b">  403</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a7b2d64818fa12efec3ab6b73cf3b9f6b">cbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.cbegin(); }</div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a670a2d2848d24cc3179bf8479077de33">  404</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a670a2d2848d24cc3179bf8479077de33">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.cbegin(); }<span class="comment"></span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">  /// @returns A read-only iterator pointing one past the last entry.</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a2763458f8ecd3e95794dd694e1cab51f">  410</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a2763458f8ecd3e95794dd694e1cab51f">cend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.cend(); }</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a18414ff7fcc56a55d577cc45ca87d463">  411</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a18414ff7fcc56a55d577cc45ca87d463">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.cend(); }<span class="comment"></span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">  /// Corresponding reverse iterators.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a4f6ec74d5218a389b908e05fe5028697">  417</a></span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">reverse_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a4f6ec74d5218a389b908e05fe5028697">rbegin</a>() { <span class="keywordflow">return</span> map_.rbegin(); }</div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#abbebc5eea7372281db441a34cbebbb6a">  418</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">reverse_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#abbebc5eea7372281db441a34cbebbb6a">rend</a>() { <span class="keywordflow">return</span> map_.rend(); }</div><div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a1ac49c8ab2fd6e5b8b194095afa7c654">  419</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a1ac49c8ab2fd6e5b8b194095afa7c654">crbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.crbegin(); }</div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#ab8686f8396f851c77d200a8caf0d10a0">  420</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#ab8686f8396f851c77d200a8caf0d10a0">rbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.crbegin(); }</div><div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a87908dd89db444fa0ac95f9e517dfedc">  421</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a87908dd89db444fa0ac95f9e517dfedc">crend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.crend(); }</div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="classext_1_1linear__map.xhtml#a0b7f7cc9b2f553648442568908046b09">  422</a></span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a> <a class="code" href="classext_1_1linear__map.xhtml#a0b7f7cc9b2f553648442568908046b09">rend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> map_.crend(); }<span class="comment"></span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a> map_;  <span class="comment">///&lt; The main underlying data container.</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}  <span class="comment">// namespace ext</span></div><div class="ttc" id="classext_1_1linear__map_xhtml_a5c63fe4eb7d4f8f491f009f199290754"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">ext::linear_map::end</a></div><div class="ttdeci">iterator end()</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00398">linear_map.h:398</a></div></div>
<div class="ttc" id="structext_1_1MoveEraser_xhtml_ae62dacc3ad0d9791babf8a3fb5caf599"><div class="ttname"><a href="structext_1_1MoveEraser.xhtml#ae62dacc3ad0d9791babf8a3fb5caf599">ext::MoveEraser::erase</a></div><div class="ttdeci">static T::iterator erase(typename T::iterator it, T *container)</div><div class="ttdoc">Moves the last element into the to-be-erased element. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00070">linear_map.h:70</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a88d6b52e8f9bcf984401462f852934cf"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a88d6b52e8f9bcf984401462f852934cf">ext::linear_map::at</a></div><div class="ttdeci">mapped_type &amp; at(const key_type &amp;key)</div><div class="ttdoc">Accesses the value of the entry. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00279">linear_map.h:279</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a02fc42c5760e5c1fa551861044c81a3f"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a02fc42c5760e5c1fa551861044c81a3f">ext::linear_map::linear_map</a></div><div class="ttdeci">linear_map(Iterator first1, Iterator last1)</div><div class="ttdoc">Standard constructors and assignment operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00194">linear_map.h:194</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a855a9757f53ba88c68240141f1d86bbd"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a855a9757f53ba88c68240141f1d86bbd">ext::linear_map::emplace</a></div><div class="ttdeci">std::pair&lt; iterator, bool &gt; emplace(Ts &amp;&amp;...args)</div><div class="ttdoc">Attempts to build and insert an entry. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00332">linear_map.h:332</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a666f42e1f29d2062dfacff308e5621e1"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a666f42e1f29d2062dfacff308e5621e1">ext::linear_map::capacity</a></div><div class="ttdeci">size_type capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00386">linear_map.h:386</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a18414ff7fcc56a55d577cc45ca87d463"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a18414ff7fcc56a55d577cc45ca87d463">ext::linear_map::end</a></div><div class="ttdeci">const_iterator end() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00411">linear_map.h:411</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a6bce69fc69d62c2d32a9d370d9114bed"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a6bce69fc69d62c2d32a9d370d9114bed">ext::linear_map::data</a></div><div class="ttdeci">const container_type &amp; data() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00392">linear_map.h:392</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a6657f9cf6deefe12d60e7b80419c8333"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a6657f9cf6deefe12d60e7b80419c8333">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::pointer</a></div><div class="ttdeci">typename container_type::pointer pointer</div><div class="ttdoc">Iterator-related typedefs redeclared from the underlying container type. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00173">linear_map.h:173</a></div></div>
<div class="ttc" id="structext_1_1DefaultEraser_xhtml_af4894263ffb30dee60dba4fbf4169702"><div class="ttname"><a href="structext_1_1DefaultEraser.xhtml#af4894263ffb30dee60dba4fbf4169702">ext::DefaultEraser::erase</a></div><div class="ttdeci">static T::iterator erase(Iterator it, T *container)</div><div class="ttdoc">Erases an element from a container with its default erase API. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00047">linear_map.h:47</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a58e01df831ac347dd7a20f00669035d1"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::size_type</a></div><div class="ttdeci">typename container_type::size_type size_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00182">linear_map.h:182</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a320f5c3dca95395b7a81c6a0713c8e30"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a320f5c3dca95395b7a81c6a0713c8e30">ext::linear_map::erase</a></div><div class="ttdeci">size_type erase(const key_type &amp;key)</div><div class="ttdoc">Erases the entry with a key. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00358">linear_map.h:358</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a47f3bcbd6eb0595f57e5b3f92aebca8e"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a47f3bcbd6eb0595f57e5b3f92aebca8e">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::const_pointer</a></div><div class="ttdeci">typename container_type::const_pointer const_pointer</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00174">linear_map.h:174</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a78a7d7e9abef7b0574d8952465d40d74"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a78a7d7e9abef7b0574d8952465d40d74">ext::linear_map::operator=</a></div><div class="ttdeci">linear_map &amp; operator=(linear_map &amp;&amp;lm) noexcept</div><div class="ttdoc">Standard constructors and assignment operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00205">linear_map.h:205</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_ac00cd6c6940c6bf4e20bd0c5463a4d84"><div class="ttname"><a href="classext_1_1linear__map.xhtml#ac00cd6c6940c6bf4e20bd0c5463a4d84">ext::linear_map::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00375">linear_map.h:375</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_aca979eb4f044ce1232ff90a47f96cd19"><div class="ttname"><a href="classext_1_1linear__map.xhtml#aca979eb4f044ce1232ff90a47f96cd19">ext::linear_map::linear_map</a></div><div class="ttdeci">linear_map(linear_map &amp;&amp;lm) noexcept</div><div class="ttdoc">Standard constructors and assignment operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00199">linear_map.h:199</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a569edcfc908d1ebc4c6b6f8c027a3eea"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a569edcfc908d1ebc4c6b6f8c027a3eea">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::difference_type</a></div><div class="ttdeci">typename container_type::difference_type difference_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00183">linear_map.h:183</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a058b9ab68ffc8aa470f60be073ec1bec"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::const_reverse_iterator</a></div><div class="ttdeci">typename container_type::const_reverse_iterator const_reverse_iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00181">linear_map.h:181</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_ab8686f8396f851c77d200a8caf0d10a0"><div class="ttname"><a href="classext_1_1linear__map.xhtml#ab8686f8396f851c77d200a8caf0d10a0">ext::linear_map::rbegin</a></div><div class="ttdeci">const_reverse_iterator rbegin() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00420">linear_map.h:420</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a5183f0827ab239c836c433ef067264a7"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::value_type</a></div><div class="ttdeci">std::pair&lt; key_type, mapped_type &gt; value_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00167">linear_map.h:167</a></div></div>
<div class="ttc" id="namespaceext_xhtml"><div class="ttname"><a href="namespaceext.xhtml">ext</a></div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.xhtml#l00027">algorithm.h:27</a></div></div>
<div class="ttc" id="structext_1_1MoveEraser_xhtml_ac8f0e27fd113775a5f77833c6ca5161c"><div class="ttname"><a href="structext_1_1MoveEraser.xhtml#ac8f0e27fd113775a5f77833c6ca5161c">ext::MoveEraser::erase</a></div><div class="ttdeci">static T::iterator erase(typename T::const_iterator it, T *container)</div><div class="ttdoc">Moves the last element into the to-be-erased element. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00078">linear_map.h:78</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a7b2d64818fa12efec3ab6b73cf3b9f6b"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a7b2d64818fa12efec3ab6b73cf3b9f6b">ext::linear_map::cbegin</a></div><div class="ttdeci">const_iterator cbegin() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00403">linear_map.h:403</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a670a2d2848d24cc3179bf8479077de33"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a670a2d2848d24cc3179bf8479077de33">ext::linear_map::begin</a></div><div class="ttdeci">const_iterator begin() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00404">linear_map.h:404</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a7bb1188ba3ac1923fd05f511ac449e27"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::const_iterator</a></div><div class="ttdeci">typename container_type::const_iterator const_iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00178">linear_map.h:178</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml"><div class="ttname"><a href="classext_1_1linear__map.xhtml">ext::linear_map</a></div><div class="ttdoc">An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default)...</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00133">linear_map.h:133</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a0b7f7cc9b2f553648442568908046b09"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a0b7f7cc9b2f553648442568908046b09">ext::linear_map::rend</a></div><div class="ttdeci">const_reverse_iterator rend() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00422">linear_map.h:422</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a06ea6f3a7b047a36ebf53e4af2211161"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a06ea6f3a7b047a36ebf53e4af2211161">ext::linear_map::count</a></div><div class="ttdeci">size_type count(const key_type &amp;key) const </div><div class="ttdoc">Determines if an entry with the given key in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00235">linear_map.h:235</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_abe6e570aee690d61e44ce1b2d530103c"><div class="ttname"><a href="classext_1_1linear__map.xhtml#abe6e570aee690d61e44ce1b2d530103c">ext::linear_map::linear_map</a></div><div class="ttdeci">linear_map(const linear_map &amp;lm)</div><div class="ttdoc">Standard constructors and assignment operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00198">linear_map.h:198</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a5ac43a9a0f3b364e3fa12af1b3a2ecd9"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">ext::linear_map::insert</a></div><div class="ttdeci">std::pair&lt; iterator, bool &gt; insert(const value_type &amp;p)</div><div class="ttdoc">Inserts a key-value pair into the map if the pair is not in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00293">linear_map.h:293</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a164ff23607ed32c6701bddad87b99e4d"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a164ff23607ed32c6701bddad87b99e4d">ext::linear_map::operator[]</a></div><div class="ttdeci">mapped_type &amp; operator[](key_type &amp;&amp;key)</div><div class="ttdoc">Accesses an existing or default constructed entry. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00254">linear_map.h:254</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_aaaefd7cd0b5bd51c1db2ef4fc8c278ca"><div class="ttname"><a href="classext_1_1linear__map.xhtml#aaaefd7cd0b5bd51c1db2ef4fc8c278ca">ext::linear_map::reserve</a></div><div class="ttdeci">void reserve(size_type n)</div><div class="ttdoc">Prepares the linear map for a specified number of entries. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00383">linear_map.h:383</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_abbebc5eea7372281db441a34cbebbb6a"><div class="ttname"><a href="classext_1_1linear__map.xhtml#abbebc5eea7372281db441a34cbebbb6a">ext::linear_map::rend</a></div><div class="ttdeci">reverse_iterator rend()</div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00418">linear_map.h:418</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_aed65ea0822cc8269b308d57787010870"><div class="ttname"><a href="classext_1_1linear__map.xhtml#aed65ea0822cc8269b308d57787010870">ext::linear_map::operator==</a></div><div class="ttdeci">friend bool operator==(const linear_map &amp;lhs, const linear_map &amp;rhs)</div><div class="ttdoc">Non-member equality test operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00145">linear_map.h:145</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_abb3ce552aa69dc84e406c59efb6ef11a"><div class="ttname"><a href="classext_1_1linear__map.xhtml#abb3ce552aa69dc84e406c59efb6ef11a">ext::linear_map::insert</a></div><div class="ttdeci">void insert(Iterator first1, Iterator last1)</div><div class="ttdoc">Inserts a range of elements. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00318">linear_map.h:318</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a040536f2310dffafb8ac0c3de0ca6673"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">ext::linear_map::find</a></div><div class="ttdeci">const_iterator find(const key_type &amp;key) const </div><div class="ttdoc">Finds an entry in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00218">linear_map.h:218</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_aeb89a7d90ae3efbdb066954169b784f3"><div class="ttname"><a href="classext_1_1linear__map.xhtml#aeb89a7d90ae3efbdb066954169b784f3">ext::linear_map::erase</a></div><div class="ttdeci">iterator erase(iterator pos)</div><div class="ttdoc">Erases the entry pointed by an iterator. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00349">linear_map.h:349</a></div></div>
<div class="ttc" id="structext_1_1MoveEraser_xhtml"><div class="ttname"><a href="structext_1_1MoveEraser.xhtml">ext::MoveEraser</a></div><div class="ttdoc">Erase policy based on moving the last element to the erased element. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00054">linear_map.h:54</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_aefa0eec11fa1cdb84b67eec7995afa6e"><div class="ttname"><a href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::reverse_iterator</a></div><div class="ttdeci">typename container_type::reverse_iterator reverse_iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00179">linear_map.h:179</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a8bf1e8e739a7c2442fad8c169abb08b4"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a8bf1e8e739a7c2442fad8c169abb08b4">ext::linear_map::operator!=</a></div><div class="ttdeci">friend bool operator!=(const linear_map &amp;lhs, const linear_map &amp;rhs)</div><div class="ttdoc">Non-member equality test operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00154">linear_map.h:154</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a87908dd89db444fa0ac95f9e517dfedc"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a87908dd89db444fa0ac95f9e517dfedc">ext::linear_map::crend</a></div><div class="ttdeci">const_reverse_iterator crend() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00421">linear_map.h:421</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a1ac49c8ab2fd6e5b8b194095afa7c654"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a1ac49c8ab2fd6e5b8b194095afa7c654">ext::linear_map::crbegin</a></div><div class="ttdeci">const_reverse_iterator crbegin() const </div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00419">linear_map.h:419</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a49301e501c573a74faad4b4d2069a29e"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::iterator</a></div><div class="ttdeci">typename container_type::iterator iterator</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00177">linear_map.h:177</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a23a9233e73a24629346fca99f7dcde3f"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a23a9233e73a24629346fca99f7dcde3f">ext::linear_map::insert</a></div><div class="ttdeci">std::pair&lt; iterator, bool &gt; insert(value_type &amp;&amp;p)</div><div class="ttdoc">Inserts a key-value pair into the map if the pair is not in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00301">linear_map.h:301</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a3997bb00bff2678cd2edc5030afa6d99"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a3997bb00bff2678cd2edc5030afa6d99">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::const_reference</a></div><div class="ttdeci">typename container_type::const_reference const_reference</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00176">linear_map.h:176</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a6ce9a2702adb36c3ae89057a1d968050"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a6ce9a2702adb36c3ae89057a1d968050">ext::linear_map::data</a></div><div class="ttdeci">container_type &amp; data()</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00391">linear_map.h:391</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a5a9ff2b51ccd613fe71b0ba392c0a333"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a5a9ff2b51ccd613fe71b0ba392c0a333">ext::linear_map::operator[]</a></div><div class="ttdeci">mapped_type &amp; operator[](const key_type &amp;key)</div><div class="ttdoc">Accesses an existing or default constructed entry. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00246">linear_map.h:246</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_aa5f1e65fd39acf65e6fcceee7f5e3e5b"><div class="ttname"><a href="classext_1_1linear__map.xhtml#aa5f1e65fd39acf65e6fcceee7f5e3e5b">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::reference</a></div><div class="ttdeci">typename container_type::reference reference</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00175">linear_map.h:175</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_ad8dfe218d1150800f39b8e78d5be7c75"><div class="ttname"><a href="classext_1_1linear__map.xhtml#ad8dfe218d1150800f39b8e78d5be7c75">ext::linear_map::begin</a></div><div class="ttdeci">iterator begin()</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00396">linear_map.h:396</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a7277ab7dad0815073650b2977ac8ad97"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a7277ab7dad0815073650b2977ac8ad97">ext::linear_map::clear</a></div><div class="ttdeci">void clear() noexcept</div><div class="ttdoc">Erases all entries in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00378">linear_map.h:378</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_ad7af8be3bff39fcc6367973f777b2601"><div class="ttname"><a href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::container_type</a></div><div class="ttdeci">std::vector&lt; value_type &gt; container_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00168">linear_map.h:168</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_ad5fd8dbf9ed1c52fa2aa6fbeaeb45042"><div class="ttname"><a href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::mapped_type</a></div><div class="ttdeci">GateWeakPtr mapped_type</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00166">linear_map.h:166</a></div></div>
<div class="ttc" id="structext_1_1DefaultEraser_xhtml"><div class="ttname"><a href="structext_1_1DefaultEraser.xhtml">ext::DefaultEraser</a></div><div class="ttdoc">Default erase policy for containers with iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00034">linear_map.h:34</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_ab0cd640adc0a08564eaaa7c20fe2074f"><div class="ttname"><a href="classext_1_1linear__map.xhtml#ab0cd640adc0a08564eaaa7c20fe2074f">ext::linear_map::find</a></div><div class="ttdeci">iterator find(const key_type &amp;key)</div><div class="ttdoc">Finds an entry in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00223">linear_map.h:223</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a08d961aa141430246eb00239bfe7fad4"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::key_type</a></div><div class="ttdeci">int key_type</div><div class="ttdoc">Public typedefs. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00165">linear_map.h:165</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a87e9f68f710455fc8a3f76742c0b9532"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a87e9f68f710455fc8a3f76742c0b9532">ext::linear_map::operator=</a></div><div class="ttdeci">linear_map &amp; operator=(const linear_map &amp;lm)</div><div class="ttdoc">Standard constructors and assignment operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00201">linear_map.h:201</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a63f097fd1b9f4f32564bd061273247ab"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a63f097fd1b9f4f32564bd061273247ab">ext::linear_map::swap</a></div><div class="ttdeci">friend void swap(linear_map &amp;lhs, linear_map &amp;rhs) noexcept</div><div class="ttdoc">Friend swap definition for convenience sake. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00160">linear_map.h:160</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_abec7fa7fbdc9f24e5028ba4db54c1eb4"><div class="ttname"><a href="classext_1_1linear__map.xhtml#abec7fa7fbdc9f24e5028ba4db54c1eb4">ext::linear_map::at</a></div><div class="ttdeci">const mapped_type &amp; at(const key_type &amp;key) const </div><div class="ttdoc">Accesses the value of the entry. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00272">linear_map.h:272</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a2763458f8ecd3e95794dd694e1cab51f"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a2763458f8ecd3e95794dd694e1cab51f">ext::linear_map::cend</a></div><div class="ttdeci">const_iterator cend() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00410">linear_map.h:410</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a8fdd1bb039314a9dcab50830d4a888aa"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a8fdd1bb039314a9dcab50830d4a888aa">ext::linear_map::swap</a></div><div class="ttdeci">void swap(linear_map &amp;other) noexcept</div><div class="ttdoc">Swaps data with another linear map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00369">linear_map.h:369</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a26ba19259697099d1252d79e85e0e31a"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a26ba19259697099d1252d79e85e0e31a">ext::linear_map::linear_map</a></div><div class="ttdeci">linear_map(std::initializer_list&lt; value_type &gt; init_list)</div><div class="ttdoc">Standard constructors and assignment operators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00189">linear_map.h:189</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a4f6ec74d5218a389b908e05fe5028697"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a4f6ec74d5218a389b908e05fe5028697">ext::linear_map::rbegin</a></div><div class="ttdeci">reverse_iterator rbegin()</div><div class="ttdoc">Corresponding reverse iterators. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00417">linear_map.h:417</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a670bc30d04c01d2fb124d5ebbc8ade71"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">ext::linear_map::size</a></div><div class="ttdeci">size_type size() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00372">linear_map.h:372</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_acdd54fa2cbba082a782a5d63391cf34c"><div class="ttname"><a href="classext_1_1linear__map.xhtml#acdd54fa2cbba082a782a5d63391cf34c">ext::linear_map::erase</a></div><div class="ttdeci">iterator erase(const_iterator pos)</div><div class="ttdoc">Erases the entry pointed by an iterator. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00348">linear_map.h:348</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
