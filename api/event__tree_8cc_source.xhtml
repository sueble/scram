<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event_tree.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event_tree.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event__tree_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of event tree facilities.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event__tree_8h.xhtml">event_tree.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Path.xhtml#aba2db23f2a172af327324486a43f8235">   29</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Path.xhtml#aba2db23f2a172af327324486a43f8235">Path::Path</a>(std::string state) : state_(std::move(state)) {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keywordflow">if</span> (state_.empty())</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;The state string for functional events cannot be empty&quot;</span>));</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#a2f4a542f37c3874891f1fd5a2796b1b1">   35</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a2f4a542f37c3874891f1fd5a2796b1b1">Fork::Fork</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; functional_event, std::vector&lt;Path&gt; paths)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    : functional_event_(functional_event), paths_(std::move(paths)) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="comment">// There are expected to be very few paths (2 in most cases),</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="comment">// so quadratic check is not a problem.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = paths_.begin(); it != paths_.end(); ++it) {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">auto</span> it_find =</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        std::find_if(std::next(it), paths_.end(), [&amp;it](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a>&amp; fork_path) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;          <span class="keywordflow">return</span> fork_path.state() == it-&gt;state();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        });</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (it_find != paths_.end())</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Duplicate state &#39;&quot;</span> + it-&gt;state() +</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                <span class="stringliteral">&quot;&#39; path in fork &quot;</span> + functional_event_.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()));</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">   50</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">EventTree::Add</a>(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* sequence) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  mef::AddElement&lt;ValidityError&gt;(sequence, &amp;sequences_, <span class="stringliteral">&quot;Duplicate sequence: &quot;</span>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#ad2a9b2653f635c355134b8bd38a04eba">   54</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">EventTree::Add</a>(<a class="code" href="event__tree_8h.xhtml#a8b549072de1f485eb68927e6b170e459">FunctionalEventPtr</a> <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  assert(functional_event-&gt;order() == 0 &amp;&amp; <span class="stringliteral">&quot;Non-unique functional event.&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keyword">auto</span>&amp; unordered_event = *<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  mef::AddElement&lt;ValidityError&gt;(std::move(functional_event),</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                 &amp;functional_events_,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                 <span class="stringliteral">&quot;Duplicate functional event: &quot;</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  unordered_event.<a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">order</a>(functional_events_.size());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a30e7016119b7c90bd752a7bd8a219780">   63</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">EventTree::Add</a>(<a class="code" href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">NamedBranchPtr</a> branch) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  mef::AddElement&lt;ValidityError&gt;(std::move(branch), &amp;branches_,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                 <span class="stringliteral">&quot;Duplicate named branch: &quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml_a30eb85c55698bafe4bab0670d019c157"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">scram::mef::FunctionalEvent::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00068">event_tree.h:68</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_a673197bb550b4b62db7fae7c8a0bd6dc"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">scram::mef::Fork::functional_event</a></div><div class="ttdeci">const FunctionalEvent &amp; functional_event() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00151">event_tree.h:151</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a8b549072de1f485eb68927e6b170e459"><div class="ttname"><a href="event__tree_8h.xhtml#a8b549072de1f485eb68927e6b170e459">scram::mef::FunctionalEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; FunctionalEvent &gt; FunctionalEventPtr</div><div class="ttdoc">Functional events are defined in and unique to event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00078">event_tree.h:78</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a03af7b139e3d786505ca38a80221d2ba"><div class="ttname"><a href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">scram::mef::NamedBranchPtr</a></div><div class="ttdeci">std::unique_ptr&lt; NamedBranch &gt; NamedBranchPtr</div><div class="ttdoc">Unique in event tree. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00124">event_tree.h:124</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml">scram::mef::FunctionalEvent</a></div><div class="ttdoc">Representation of functional events in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00060">event_tree.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_aa048e4ca4a5241bc274d2e4da401b5c6"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">scram::mef::EventTree::Add</a></div><div class="ttdeci">void Add(Sequence *element)</div><div class="ttdoc">Adds event tree constructs into the container. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8cc_source.xhtml#l00050">event_tree.cc:50</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml"><div class="ttname"><a href="event__tree_8h.xhtml">event_tree.h</a></div><div class="ttdoc">Event Tree facilities. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml_aba2db23f2a172af327324486a43f8235"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml#aba2db23f2a172af327324486a43f8235">scram::mef::Path::Path</a></div><div class="ttdeci">Path(std::string state)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8cc_source.xhtml#l00029">event_tree.cc:29</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml">scram::mef::Path</a></div><div class="ttdoc">Functional-event state paths in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00127">event_tree.h:127</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_a2f4a542f37c3874891f1fd5a2796b1b1"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#a2f4a542f37c3874891f1fd5a2796b1b1">scram::mef::Fork::Fork</a></div><div class="ttdeci">Fork(const FunctionalEvent &amp;functional_event, std::vector&lt; Path &gt; paths)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8cc_source.xhtml#l00035">event_tree.cc:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00078">error.h:78</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
