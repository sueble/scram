<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>substitution.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">substitution.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="substitution_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of Substitution members.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="substitution_8h.xhtml">substitution.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Substitution.xhtml#a0a6da28d1514d7543d80e554e144df6f">   28</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a0a6da28d1514d7543d80e554e144df6f">Substitution::Add</a>(<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* source_event) {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(source_, [source_event](<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* arg) {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> arg-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>() == source_event-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      })) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(<span class="stringliteral">&quot;Duplicate source event: &quot;</span> +</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                       source_event-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>()));</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  source_.push_back(source_event);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Substitution.xhtml#ab1859efddac529e0827537fae2f16cbb">   38</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#ab1859efddac529e0827537fae2f16cbb">Substitution::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  assert(hypothesis_ &amp;&amp; <span class="stringliteral">&quot;Missing substitution hypothesis.&quot;</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(hypothesis_-&gt;event_args(), [](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a>&amp; arg) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">return</span> !std::holds_alternative&lt;BasicEvent*&gt;(arg);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      })) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="stringliteral">&quot;Substitution hypothesis must be built over basic events only.&quot;</span>));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordflow">if</span> (hypothesis_-&gt;formula_args().empty() == <span class="keyword">false</span>) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Substitution hypothesis formula cannot be nested.&quot;</span>));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#ad29f35247718d44ff8d6f9bd9bd41d9f">declarative</a>()) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">switch</span> (hypothesis_-&gt;type()) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">kNull</a>:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">kVote</a>:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Substitution hypotheses must be coherent.&quot;</span>));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>* constant = std::get_if&lt;bool&gt;(&amp;target_);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> (constant &amp;&amp; *constant)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Substitution has no effect.&quot;</span>));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  } <span class="keywordflow">else</span> {  <span class="comment">// Non-declarative.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">switch</span> (hypothesis_-&gt;type()) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">kNull</a>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Non-declarative substitution hypotheses only allow &quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                          <span class="stringliteral">&quot;AND/OR/NULL connectives.&quot;</span>));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>* constant = std::get_if&lt;bool&gt;(&amp;target_);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (constant &amp;&amp; !*constant)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Substitution source set is irrelevant.&quot;</span>));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Substitution.xhtml#a01bb7b2682e333bb6cd4b730447162c2">   80</a></span>&#160;std::optional&lt;Substitution::Type&gt; <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a01bb7b2682e333bb6cd4b730447162c2">Substitution::type</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keyword">auto</span> in_hypothesis = [<span class="keyword">this</span>](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* source_arg) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">return</span> ext::any_of(hypothesis_-&gt;event_args(),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                       [source_arg](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a>&amp; arg) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                         <span class="keywordflow">return</span> std::get&lt;BasicEvent*&gt;(arg) == source_arg;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                       });</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  };</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">auto</span> is_mutually_exclusive = [](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; formula) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">switch</span> (formula.type()) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">kVote</a>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> formula.vote_number() == 2;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> formula.event_args().size() == 2;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  };</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">if</span> (source_.empty()) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keywordtype">bool</span>* constant = std::get_if&lt;bool&gt;(&amp;target_)) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      assert(!*constant &amp;&amp; <span class="stringliteral">&quot;Substitution has no effect.&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">if</span> (is_mutually_exclusive(*hypothesis_))</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span> kDeleteTerms;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::holds_alternative&lt;BasicEvent*&gt;(target_)) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="keywordflow">if</span> (hypothesis_-&gt;type() == kAnd)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> kRecoveryRule;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">if</span> (!std::holds_alternative&lt;BasicEvent*&gt;(target_))</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">if</span> (hypothesis_-&gt;type() != kAnd &amp;&amp; hypothesis_-&gt;type() != <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">kNull</a>)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">if</span> (source_.size() == hypothesis_-&gt;event_args().size()) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (ext::all_of(source_, in_hypothesis))</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      <span class="keywordflow">return</span> kRecoveryRule;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (source_.size() == 1) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span> (in_hypothesis(source_.front()))</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keywordflow">return</span> kExchangeEvent;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_a7e258c5f6332715d5ed6a3fdbf681a8b"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">scram::mef::Id::id</a></div><div class="ttdeci">const std::string &amp; id() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00212">element.h:212</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_ab1859efddac529e0827537fae2f16cbb"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#ab1859efddac529e0827537fae2f16cbb">scram::mef::Substitution::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Checks if the substitution is setup correctly. </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8cc_source.xhtml#l00038">substitution.cc:38</a></div></div>
<div class="ttc" id="substitution_8h_xhtml"><div class="ttname"><a href="substitution_8h.xhtml">substitution.h</a></div><div class="ttdoc">The MEF Substitution constructs. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a358b7ba8bf8488abfcd22516474b2ad5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">scram::mef::Formula::EventArg</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00230">event.h:230</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">scram::mef::kVote</a></div><div class="ttdoc">Combination, K/N, atleast, or Vote gate representation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00209">event.h:209</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">scram::mef::kNull</a></div><div class="ttdoc">Single argument pass-through without logic. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00214">event.h:214</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1DuplicateArgumentError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">scram::mef::DuplicateArgumentError</a></div><div class="ttdoc">This error indicates that arguments must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00109">error.h:109</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_ad29f35247718d44ff8d6f9bd9bd41d9f"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#ad29f35247718d44ff8d6f9bd9bd41d9f">scram::mef::Substitution::declarative</a></div><div class="ttdeci">bool declarative() const </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00074">substitution.h:74</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a0a6da28d1514d7543d80e554e144df6f"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a0a6da28d1514d7543d80e554e144df6f">scram::mef::Substitution::Add</a></div><div class="ttdeci">void Add(BasicEvent *source_event)</div><div class="ttdoc">Adds a source event to the substitution container. </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8cc_source.xhtml#l00028">substitution.cc:28</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a01bb7b2682e333bb6cd4b730447162c2"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a01bb7b2682e333bb6cd4b730447162c2">scram::mef::Substitution::type</a></div><div class="ttdeci">std::optional&lt; Type &gt; type() const </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8cc_source.xhtml#l00080">substitution.cc:80</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
