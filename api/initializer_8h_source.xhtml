<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>initializer.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">initializer.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="initializer_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// A facility that processes input files into analysis constructs.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string_view&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;variant&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/global_fun.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/hashed_index.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index_container.hpp&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="alignment_8h.xhtml">alignment.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ccf__group_8h.xhtml">ccf_group.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event__tree_8h.xhtml">event_tree.h</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">expression.h</a>&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="constant_8h.xhtml">expression/constant.h</a>&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree_8h.xhtml">fault_tree.h</a>&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="instruction_8h.xhtml">instruction.h</a>&quot;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="model_8h.xhtml">model.h</a>&quot;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="parameter_8h.xhtml">parameter.h</a>&quot;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="settings_8h.xhtml">settings.h</a>&quot;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="substitution_8h.xhtml">substitution.h</a>&quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xml_8h.xhtml">xml.h</a>&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// This class operates on input files</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/// to initialize analysis constructs</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// like models, fault trees, and events.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// The initialization phase includes</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/// validation and proper setup of the constructs</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/// for future use or analysis.</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml">   59</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// Reads input files with the structure of analysis constructs.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// Initializes the analysis model from the given input files.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// Puts all events into their appropriate containers in the model.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  /// @param[in] xml_files  The MEF XML input files.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">  /// @param[in] settings  Analysis settings.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  /// @param[in] allow_extern  Allow external libraries in the input.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  /// @throws DuplicateArgumentError  Input contains duplicate files.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// @throws ValidityError  The input contains errors.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  /// @throws IOError  One of the input files is not accessible.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  /// @warning Processing external libraries from XML input is **UNSAFE**.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">  ///          It allows loading and executing arbitrary code during analysis.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">  ///          Enable this feature for trusted input files and libraries only.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#a3f14520363303f24cbc976807933d20e">Initializer</a>(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;              <a class="code" href="classscram_1_1core_1_1Settings.xhtml">core::Settings</a> settings, <span class="keywordtype">bool</span> allow_extern = <span class="keyword">false</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  /// @returns The model built from the input files.</span></div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">   80</a></span>&#160;<span class="comment"></span>  std::shared_ptr&lt;Model&gt; <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">model</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> model_; }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// @returns The parsed &amp; validated XML DOM documents</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  ///          corresponding to the input files (the same order).</span></div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#aaa2af4263c9fb3d41afb732f9cbcb64a">   84</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;xml::Document&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#aaa2af4263c9fb3d41afb732f9cbcb64a">documents</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> documents_; }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// Convenience alias for expression extractor function types.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> ExtractorFunction = std::unique_ptr&lt;Expression&gt; (*)(</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp;, <span class="keyword">const</span> std::string&amp;, <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>*);<span class="comment"></span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// Map of expression names and their extractor functions.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> ExtractorMap = std::unordered_map&lt;std::string_view, ExtractorFunction&gt;;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// Container for late defined constructs.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Ts&gt;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keyword">using</span> TbdContainer =</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      std::vector&lt;std::pair&lt;std::variant&lt;Ts*...&gt;, <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&gt;&gt;;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// Container with full paths to elements.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @tparam T  The element type.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keyword">using</span> PathTable = boost::multi_index_container&lt;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      T*, boost::multi_index::indexed_by&lt;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;              boost::multi_index::hashed_unique&lt;boost::multi_index::global_fun&lt;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                  <span class="keyword">const</span> T*, std::string, &amp;<a class="code" href="element_8h.xhtml#aa0a41336bfd1eb2482e64470eddf3a2c">GetFullPath</a>&gt;&gt;&gt;&gt;;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// @tparam T  Type of an expression.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  /// @tparam N  The number of arguments for the expression.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// Extracts argument expressions from XML elements</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// and constructs the requested expression T.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> N&gt;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  /// Expressions mapped to their extraction functions.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keyword">const</span> ExtractorMap kExpressionExtractors_;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// Calls Extractor with an appropriate N to construct the expression.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">  /// @tparam T  Type of an expression.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  /// @param[in] args  XML elements containing the arguments.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  /// @returns The new extracted expression.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keyword">static</span> std::unique_ptr&lt;Expression&gt; Extract(<span class="keyword">const</span> xml::Element::Range&amp; args,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                             <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                             <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// Checks if all input files exist on the system.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  /// @param[in] xml_files  The XML input files.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">  /// @throws IOError  Some files are missing.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CheckFileExistence(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// Checks if there are duplicate input files.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// @param[in] xml_files  The XML input files.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  /// @pre All input files exist on the system.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">  /// @throws DuplicateArgumentError  There are duplicate input files.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CheckDuplicateFiles(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// @copybrief Initializer::Initializer</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  /// @param[in] xml_files  The formatted XML input files.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">  /// @throws DuplicateArgumentError  Input contains duplicate files.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">  /// @throws ValidityError  The input contains errors.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">  /// @throws IOError  One of the input files is not accessible.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessInputFiles(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  /// Reads one input file with the structure of analysis entities.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">  /// Initializes the analysis from the given input file.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">  /// Puts all events into their appropriate containers.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">  /// This function mostly registers element definitions,</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">  /// but it may leave them to be defined later</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">  /// because of possible undefined dependencies of those elements.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">  /// @param[in] xml_file  The formatted XML input file.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">  /// @pre The input file has not been passed before.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  /// @throws ValidityError  The input contains errors.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">  /// @throws IOError  The input file is not accessible.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">  /// @throws IllegalOperation  Loading external libraries is disallowed.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessInputFile(<span class="keyword">const</span> std::string&amp; xml_file);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  /// Processes definitions of elements</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// that are left to be determined later.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  /// This late definition happens primarily due to unregistered dependencies.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  /// @throws ValidityError  The elements contain undefined dependencies.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessTbdElements();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// Registers an element into the model.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  /// @tparam T  A pointer type to the element.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// @param[in] element  The initialized element ready to be added into models.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">  /// @param[in] xml_element  The related XML element for error messages.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  /// @throws ValidityError  Issues with adding the element into the model.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordtype">void</span> Register(T&amp;&amp; element, <span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_element);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// Constructs and registers an element in the model.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">  /// @tparam T  The Element type to be specialized for.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// @param[in] xml_node  XML node defining the element.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// @param[in] base_role  The parent container&#39;s role.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">  /// @returns Pointer to the registered element.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  /// @throws ValidityError  Issues with the new element or registration.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  T* Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node, <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;              <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> base_role);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">  /// Adds additional data to element definition</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">  /// after processing all the input files.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// @tparam T  The Element type to be specialized for.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  /// @param[in] xml_node  XML element defining the element.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">  /// @param[in,out] element  Registered element ready to be defined.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">  /// @throws ValidityError  Issues with the additional data.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordtype">void</span> Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node, T* element);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">  /// Defines an event tree for the analysis.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  /// @param[in] et_node  XML element defining the event tree.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  /// @throws ValidityError  There are issues with registering and defining</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">  ///                        the event tree and its data.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> DefineEventTree(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; et_node);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">  /// Defines a fault tree for the analysis.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">  /// @param[in] ft_node  XML element defining the fault tree.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  /// @throws ValidityError  There are issues with registering and defining</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">  ///                        the fault tree and its data</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">  ///                        like gates and events.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> DefineFaultTree(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; ft_node);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// Defines a component container.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// @param[in] component_node  XML element defining the component.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  /// @param[in] container_role  The parent container&#39;s role.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">  /// @returns Component that is ready for registration.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">  /// @throws ValidityError  There are issues with registering and defining</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">  ///                        the component and its data</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">  ///                        like gates and events.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span>  <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> DefineComponent(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; component_node,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                               <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                               <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">  /// Registers fault tree and component data</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">  /// like gates, events, parameters.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">  /// @param[in] ft_node  XML element defining the fault tree or component.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">  /// @param[in,out] component  The component or fault tree container</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">  ///                          that is the owner of the data.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">  /// @throws ValidityError  There are issues with registering and defining</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">  ///                        the component&#39;s data like gates and events.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> RegisterFaultTreeData(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; ft_node,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                             <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                             <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>* component);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">  /// Processes model data with definitions of events and analysis.</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">  /// @param[in] model_data  XML node with model data description.</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessModelData(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; model_data);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">  /// Creates a Boolean formula from the XML elements</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">  /// describing the formula with events and other nested formulas.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">  /// @param[in] formula_node  XML element defining the formula.</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">  /// @returns Boolean formula that is defined.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  /// @throws ValidityError  The defined formula is not valid.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span>  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> GetFormula(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; formula_node,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">  /// Processes event tree branch instructions and target from XML data.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">  /// @param[in] xml_nodes  The XML element data of the branch.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">  /// @param[in,out] event_tree  The host event tree as a context container.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">  /// @param[out] branch  The branch to be defined with instructions and target.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  /// @pre All the XML elements except for the last one are instructions.</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">  /// @post All forks in the event tree get registered.</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">  /// @throws ValidityError  Errors in instruction or target definitions.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> SinglePassRange&gt;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordtype">void</span> DefineBranch(<span class="keyword">const</span> SinglePassRange&amp; xml_nodes, <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* branch);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">  /// Processes the last element of the branch node as target.</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> DefineBranchTarget(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; target_node,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                          <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree, <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* branch);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">  /// Processes Instruction definitions.</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">  /// @param[in] xml_element  The XML element with instruction definitions.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">  /// @returns The newly defined or registered instruction.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">  /// @pre All files have been processed (element pointers are available).</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">  /// @throws ValidityError  Errors in instruction definitions.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* GetInstruction(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_element);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">  /// Processes Expression definitions in input file.</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">  /// @param[in] expr_element  XML expression element containing the definition.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">  /// @returns The newly defined or registered expression.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">  /// @throws ValidityError  There are problems with getting the expression.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* GetExpression(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; expr_element,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">  /// Processes Parameter Expression definitions in input file.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">  /// @param[in] expr_type  The expression type name.</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">  /// @param[in] expr_element  XML expression element containing the definition.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">  /// @returns Parameter expression described in XML input expression node.</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">  /// @returns nullptr if the expression type is not a parameter.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  /// @throws ValidityError  The parameter variable is not reachable.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* GetParameter(<span class="keyword">const</span> std::string_view&amp; expr_type,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; expr_element,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                           <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">  /// Processes common cause failure group members as defined basic events.</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">  /// @param[in] members_node  XML element containing all members.</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">  /// @param[in,out] ccf_group  CCF group of the given members.</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">  /// @throws ValidityError  Members are redefined,</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">  ///                        or there are other setup issues</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">  ///                        with the CCF group.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessCcfMembers(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; members_node, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">  /// Defines factor and adds it to CCF group.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">  /// @param[in] factor_node  XML element containing one factor.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">  /// @param[in,out] ccf_group  CCF group to be defined by the given factors.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">  /// @throws ValidityError  There are problems with level numbers</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">  ///                        or factors for specific CCF models.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> DefineCcfFactor(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; factor_node, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">  /// Finds an entity (parameter, basic and house event, gate) from a reference.</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">  /// The reference is case sensitive</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">  /// and can contain an identifier, full path, or local path.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">  /// @param[in] entity_reference  Reference string to the entity.</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">  /// @param[in] base_path  The series of containers indicating the scope.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">  /// @returns Pointer to the entity found by following the given reference.</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">  /// @throws std::out_of_range  The entity cannot be found.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* GetParameter(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                          <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>* GetHouseEvent(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* GetBasicEvent(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                            <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* GetGate(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="keyword">const</span> std::string&amp; base_path);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a> GetEvent(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                             <span class="keyword">const</span> std::string&amp; base_path);<span class="comment"></span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">  /// Generic helper function to find an entity from a reference.</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">  /// The reference is case sensitive</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">  /// and can contain an identifier, full path, or local path.</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">  /// @tparam P  The pointer type managing the entity.</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">  /// @tparam T  The entity type.</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">  /// @param[in] entity_reference  Reference string to the entity.</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">  /// @param[in] base_path  The series of containers indicating the scope.</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">  /// @param[in] container  Model&#39;s lookup container for entities with IDs.</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">  /// @param[in] path_container  The full path container for entities.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">  /// @returns Pointer to the requested entity.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">  /// @throws std::out_of_range  The entity cannot be found.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> P, <span class="keyword">class</span> T = <span class="keyword">typename</span> P::element_type&gt;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  T* GetEntity(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;               <span class="keyword">const</span> std::string&amp; base_path, <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">IdTable&lt;P&gt;</a>&amp; container,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;               <span class="keyword">const</span> PathTable&lt;T&gt;&amp; path_container);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">  /// Defines and loads extern libraries.</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">  /// @param[in] xml_node  The XML element with the data.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">  /// @param[in] xml_file  The XML file path.</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">  /// @throws ValidityError  The initialization contains validity errors.</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> DefineExternLibraries(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node,</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                             <span class="keyword">const</span> std::string&amp; xml_file);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">  /// Defines extern function.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">  /// @param[in] xml_element  The XML element with the data.</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">  /// @throws ValidityError  The initialization contains validity errors.</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">  /// @pre All libraries are defined.</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> DefineExternFunction(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_element);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">  /// Validates if the initialization of the analysis is successful.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">  /// @throws CycleError  Model contains cycles.</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">  /// @throws ValidityError  The initialization contains mistakes.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">  /// @note Cyclic structures need to be broken up by other methods</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">  ///       if this error condition may lead resource leaks.</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ValidateInitialization();</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// Checks the proper order of functional events in event tree forks.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">  /// @param[in] branch  The event tree branch to start the check.</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">  /// @throws ValidityError  The order of forks is invalid.</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">  /// @pre All named branches are fed separately from initial states.</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CheckFunctionalEventOrder(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">  /// Checks that link instructions are used only in event-tree sequences.</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">  /// @param[in] branch  The event tree branch to start the check.</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">  /// @throws ValidityError  The Link instruction is misused.</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">  /// @pre All named branches are fed separately from initial states.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EnsureLinksOnlyInSequences(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">  /// Ensures that event-tree does not mix</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">  /// collect-expression and collect-formula.</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">  /// @param[in] branch  The event tree branch to start the check.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">  /// @throws ValidityError  The Link instruction is misused.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">  /// @pre All named branches are fed separately from initial states.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EnsureHomogeneousEventTree(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">  /// Ensures that non-declarative substitutions do not have mutual conflicts.</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">  /// @throws ValidityError  Conflicts in model substitutions.</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">  /// @pre All substitutions are fully defined and valid.</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EnsureNoSubstitutionConflicts();</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">  /// Validates expressions and anything</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">  /// that is dependent on them,</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">  /// such as parameters and basic events.</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">  /// @throws CycleError  Cyclic parameters are detected.</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">  /// @throws ValidityError  There are problems detected with expressions.</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ValidateExpressions();</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">  /// Applies the input information to set up for future analysis.</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">  /// This step is crucial to get</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">  /// correct fault tree structures</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">  /// and basic events with correct expressions.</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">  /// Meta-logical layer of analysis,</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">  /// such as CCF groups and substitutions,</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">  /// is applied to analysis.</span></div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> SetupForAnalysis();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">  /// Ensures that non-declarative substitutions do not contain CCF events.</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">  /// @throws ValidityError  Hypothesis, source, or target event is in CCF.</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">  /// @pre All substitutions are fully defined and valid.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">  /// @pre All CCF groups are applied.</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EnsureNoCcfSubstitutions();</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">  /// Ensures that non-declarative substitutions</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">  /// are applied only to algorithms with approximations.</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">  /// @throws ValidityError  Exact analysis is requested.</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">  /// @todo Research non-declarative substitutions with exact algorithms.</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EnsureSubstitutionsWithApproximations();</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  std::shared_ptr&lt;Model&gt; model_;  <span class="comment">///&lt; Analysis model with constructs.</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Settings.xhtml">core::Settings</a> settings_;  <span class="comment">///&lt; Settings for analysis.</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> allow_extern_;  <span class="comment">///&lt; Allow processing MEF &#39;extern-library&#39;.</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">  /// Saved XML documents to keep elements alive.</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment"></span>  std::vector&lt;xml::Document&gt; documents_;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">  /// Collection of elements that are defined late</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">  /// because of unordered registration and definition of their dependencies.</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">  /// Parameters and Expressions rely on parameter registrations.</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment">  /// Basic events rely on parameter registrations.</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">  /// Gates rely on gate, basic event, and house event registrations.</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">  /// CCF groups rely on both parameter and basic event registrations.</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">  /// Event tree branches and instructions have complex interdependencies.</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">  /// Initiating events may reference their associated event trees.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">  /// Alignments depend on instructions.</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">  /// Substitutions depend on basic events.</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">  /// Elements are assumed to be unique.</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment"></span>  TbdContainer&lt;<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>, <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>, <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>, <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>, <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>,</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;               <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">InitiatingEvent</a>, <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>, <a class="code" href="classscram_1_1mef_1_1Alignment.xhtml">Alignment</a>, <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml">Substitution</a>&gt;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;      tbd_;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">  /// Container of defined expressions for later validation due to cycles.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment"></span>  std::vector&lt;std::pair&lt;Expression*, xml::Element&gt;&gt; expressions_;<span class="comment"></span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">  /// Container for event tree links to check for cycles.</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment"></span>  std::vector&lt;Link*&gt; links_;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment">  /// Containers for reference resolution with paths.</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment"></span>  PathTable&lt;Gate&gt; path_gates_;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  PathTable&lt;BasicEvent&gt; path_basic_events_;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  PathTable&lt;HouseEvent&gt; path_house_events_;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  PathTable&lt;Parameter&gt; path_parameters_;<span class="comment"></span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00036">fault_tree.h:36</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_aa541fee61ff2be90b083f45dc1c26046"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">scram::mef::Initializer::model</a></div><div class="ttdeci">std::shared_ptr&lt; Model &gt; model() const </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00080">initializer.h:80</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_aaa2af4263c9fb3d41afb732f9cbcb64a"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#aaa2af4263c9fb3d41afb732f9cbcb64a">scram::mef::Initializer::documents</a></div><div class="ttdeci">const std::vector&lt; xml::Document &gt; &amp; documents() const </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00084">initializer.h:84</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml"><div class="ttname"><a href="fault__tree_8h.xhtml">fault_tree.h</a></div><div class="ttdoc">Fault Tree and Component containers. </div></div>
<div class="ttc" id="substitution_8h_xhtml"><div class="ttname"><a href="substitution_8h.xhtml">substitution.h</a></div><div class="ttdoc">The MEF Substitution constructs. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="xml_8h_xhtml"><div class="ttname"><a href="xml_8h.xhtml">xml.h</a></div><div class="ttdoc">XML helper facilities to work with libxml2. </div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml">scram::xml::Element</a></div><div class="ttdoc">XML Element adaptor. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00176">xml.h:176</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml">scram::mef::InitiatingEvent</a></div><div class="ttdoc">Event-tree Initiating Event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00214">event_tree.h:214</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="model_8h_xhtml"><div class="ttname"><a href="model_8h.xhtml">model.h</a></div><div class="ttdoc">Representation for a model container for risk analysis. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00038">instruction.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a358b7ba8bf8488abfcd22516474b2ad5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">scram::mef::Formula::EventArg</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00230">event.h:230</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml">scram::mef::HouseEvent</a></div><div class="ttdoc">Representation of a house event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00049">event.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Alignment_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Alignment.xhtml">scram::mef::Alignment</a></div><div class="ttdoc">Alignment configuration for the whole model per analysis. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8h_source.xhtml#l00063">alignment.h:63</a></div></div>
<div class="ttc" id="element_8h_xhtml_a850003eb778bdded85c40e3b3a02e50b"><div class="ttname"><a href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">scram::mef::IdTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Id, const std::string &amp;,&amp;Id::id &gt;&gt;&gt;&gt; IdTable</div><div class="ttdoc">Table of elements with unique ids. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00257">element.h:257</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="element_8h_xhtml_aa0a41336bfd1eb2482e64470eddf3a2c"><div class="ttname"><a href="element_8h.xhtml#aa0a41336bfd1eb2482e64470eddf3a2c">scram::mef::GetFullPath</a></div><div class="ttdeci">std::string GetFullPath(const T *element)</div><div class="ttdoc">Computes the full path of an element. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00195">element.h:195</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00165">event_tree.h:165</a></div></div>
<div class="ttc" id="constant_8h_xhtml"><div class="ttname"><a href="constant_8h.xhtml">constant.h</a></div><div class="ttdoc">Constant expressions that cannot have uncertainties. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml">scram::mef::Initializer</a></div><div class="ttdoc">This class operates on input files to initialize analysis constructs like models, fault trees...</div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00059">initializer.h:59</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml">scram::mef::Rule</a></div><div class="ttdoc">A reusable collection of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00146">instruction.h:146</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml"><div class="ttname"><a href="event__tree_8h.xhtml">event_tree.h</a></div><div class="ttdoc">Event Tree facilities. </div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00153">element.h:153</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_a3f14520363303f24cbc976807933d20e"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#a3f14520363303f24cbc976807933d20e">scram::mef::Initializer::Initializer</a></div><div class="ttdeci">Initializer(const std::vector&lt; std::string &gt; &amp;xml_files, core::Settings settings, bool allow_extern=false)</div><div class="ttdoc">Reads input files with the structure of analysis constructs. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00156">initializer.cc:156</a></div></div>
<div class="ttc" id="settings_8h_xhtml"><div class="ttname"><a href="settings_8h.xhtml">settings.h</a></div><div class="ttdoc">Builder for settings. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml"><div class="ttname"><a href="ccf__group_8h.xhtml">ccf_group.h</a></div><div class="ttdoc">Functional containers for basic events grouped by common cause failure. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml">scram::mef::Substitution</a></div><div class="ttdoc">The general representation for Delete Terms, Recovery Rules, and Exchange Events. ...</div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00035">substitution.h:35</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_ad5409b17f257599c4dd852533a4f289a"><div class="ttname"><a href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">scram::mef::ComponentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Component &gt; ComponentPtr</div><div class="ttdoc">Unique system components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00133">fault_tree.h:133</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00084">event_tree.h:84</a></div></div>
<div class="ttc" id="parameter_8h_xhtml"><div class="ttname"><a href="parameter_8h.xhtml">parameter.h</a></div><div class="ttdoc">Parameter expressions that act like a shareable variable. </div></div>
<div class="ttc" id="alignment_8h_xhtml"><div class="ttname"><a href="alignment_8h.xhtml">alignment.h</a></div><div class="ttdoc">Mission and phase constructs. </div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml">scram::xml::Element::Range</a></div><div class="ttdoc">The range for elements. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00181">xml.h:181</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00086">ccf_group.h:86</a></div></div>
<div class="ttc" id="instruction_8h_xhtml"><div class="ttname"><a href="instruction_8h.xhtml">instruction.h</a></div><div class="ttdoc">Model and event tree modifier instructions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml">scram::mef::Parameter</a></div><div class="ttdoc">This class provides a representation of a variable in basic event description. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00087">parameter.h:87</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">scram::mef::Initializer::Extractor</a></div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00954">initializer.cc:954</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
