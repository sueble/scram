<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>pdag.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">pdag.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pdag_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Classes and facilities to represent fault trees</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// as PDAGs with event and gate indices instead of ID names.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/// These facilities are designed to work</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">/// with FaultTreeAnalysis and Preprocessor classes.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">/// The terminologies of the graphs and Boolean logic are mixed</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/// to represent the PDAG;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/// however, if there is a conflict,</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/// the Boolean terminology is preferred.</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">/// For example, instead of &quot;children&quot;, &quot;arguments&quot; are preferred.</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;boost/container/flat_set.hpp&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;boost/range/adaptor/transformed.hpp&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="find__iterator_8h.xhtml">ext/find_iterator.h</a>&quot;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="index__map_8h.xhtml">ext/index_map.h</a>&quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="linear__map_8h.xhtml">ext/linear_map.h</a>&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {  <span class="comment">// Declarations to decouple from the MEF initialization.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">class </span>Model;  <span class="comment">// Provider of substitutions.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">class </span>Substitution;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">class </span>Gate;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">class </span>BasicEvent;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">class </span>HouseEvent;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">class </span>Formula;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">class </span>Gate;  <span class="comment">// An indexed gate parent of nodes.</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">   63</a></span>&#160;<span class="keyword">using</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> = std::shared_ptr&lt;Gate&gt;;  <span class="comment">///&lt; Shared gates in the graph.</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">   64</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> = std::weak_ptr&lt;Gate&gt;;  <span class="comment">///&lt; An acyclic ptr to parent gates.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/// A manager of information about parents.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// Only gates can manipulate the data.</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NodeParentManager.xhtml">   68</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml">NodeParentManager</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">   69</a></span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>;  <span class="comment">///&lt; The main manipulator of parent information.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">   72</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Parent</a> = std::pair&lt;int, GateWeakPtr&gt;;  <span class="comment">///&lt; Parent index and ptr.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">  /// A map type of parent gate positive indices and weak pointers to them.</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NodeParentManager.xhtml#ac2161011c8bfcc49665495f70bca3de1">   75</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml">ParentMap</a> = <a class="code" href="classext_1_1linear__map.xhtml">ext::linear_map&lt;int, GateWeakPtr, ext::MoveEraser&gt;</a>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// @returns The parents of a node.</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">   78</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">ParentMap</a>&amp; <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> parents_; }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  ~<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml">NodeParentManager</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  /// Adds a new parent of a node.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  /// @param[in] gate  Pointer to the parent gate.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  /// @pre The parent is not in the container.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> AddParent(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  /// Removes a parent from the node.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  /// @param[in] index  Positive index of the parent gate.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// @pre There is a parent with the given index.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EraseParent(<span class="keywordtype">int</span> index) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    assert(parents_.count(index) &amp;&amp; <span class="stringliteral">&quot;No parent with the given index exists.&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    parents_.erase(index);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml">ParentMap</a> parents_;  <span class="comment">///&lt; All registered parents of this node.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>;  <span class="comment">// Manager of the graph, node indices and uniqueness.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">/// An abstract base class that represents a node in a PDAG.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/// The index of the node is a unique identifier for the node.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">/// The node holds weak pointers to the parents</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">/// that are managed by the parents.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">/// @pre A node does not outlive its PDAG.</span></div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml">  112</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml">NodeParentManager</a> {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  /// Creates a unique graph node as a member of a PDAG.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// @param[in] graph  The graph this node belongs to.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a>(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a>() = 0;  <span class="comment">///&lt; Abstract class.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @returns The host graph of the node.</span></div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a7bd26d6ebcafaa85928ba9e042a821ec">  122</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; <a class="code" href="classscram_1_1core_1_1Node.xhtml#a7bd26d6ebcafaa85928ba9e042a821ec">graph</a>() { <span class="keywordflow">return</span> graph_; }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  /// @returns The index of this node.</span></div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">  125</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> index_; }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// @returns Assigned order for this node.</span></div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">  128</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> order_; }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// Sets the order number for this node.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">  /// The order is interpreted by the assigner.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">  /// @param[in] val  Positive integer.</span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#afcae304a220783bfa09976a06488f496">  134</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#afcae304a220783bfa09976a06488f496">order</a>(<span class="keywordtype">int</span> val) { order_ = val; }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// @returns Optimization value for failure propagation.</span></div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a90ef93c4b0667215d2a8c3a3eb4f3822">  137</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a90ef93c4b0667215d2a8c3a3eb4f3822">opti_value</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> opti_value_; }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// Sets the optimization value for failure propagation.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  /// @param[in] val  Value that makes sense to the caller.</span></div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a3ec19e49ac7a1e7f5dc9eeaf35489677">  142</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a3ec19e49ac7a1e7f5dc9eeaf35489677">opti_value</a>(<span class="keywordtype">int</span> val) { opti_value_ = val; }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// Registers the visit time for this node upon graph traversal.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// This information can be used to detect dependencies.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  /// @param[in] time  The current visit time of this node.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  ///                  It must be positive.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">  /// @returns true if this node was previously visited.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">  /// @returns false if this is visited and re-visited only once.</span></div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a54799feee1f1e91f848d11f3918e3e88">  152</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a54799feee1f1e91f848d11f3918e3e88">Visit</a>(<span class="keywordtype">int</span> time) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    assert(time &gt; 0);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">if</span> (!visits_[0]) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      visits_[0] = time;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!visits_[1]) {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      visits_[1] = time;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      visits_[2] = time;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">  /// @returns The time when this node was first encountered or entered.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  /// @returns 0 if no enter time is registered.</span></div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a4f716d86c7aada98bd809513c29abf38">  167</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a4f716d86c7aada98bd809513c29abf38">EnterTime</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> visits_[0]; }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @returns The exit time upon traversal of the graph.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// @returns 0 if no exit time is registered.</span></div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a63668c49f42adbd4c53b923deb2d37d2">  171</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a63668c49f42adbd4c53b923deb2d37d2">ExitTime</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> visits_[1]; }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  /// @returns The last time this node was visited.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  /// @returns 0 if no last time is registered.</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#aedd3c10c67c74fcf3bbcbaf376a41ece">  175</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#aedd3c10c67c74fcf3bbcbaf376a41ece">LastVisit</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> visits_[2] ? visits_[2] : visits_[1]; }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  /// @returns The minimum time of the visit.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// @returns 0 if no time is registered.</span></div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#ac67bde11b4c9e7deeb787dc2d5bafb43">  179</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#ac67bde11b4c9e7deeb787dc2d5bafb43">min_time</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> visits_[0]; }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  /// @returns The maximum time of the visit.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// @returns 0 if no time is registered.</span></div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a2e25a793734037d8d5a2ab1945dbe4d1">  183</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a2e25a793734037d8d5a2ab1945dbe4d1">max_time</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> LastVisit(); }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  /// @returns false if this node was only visited once upon graph traversal.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  /// @returns true if this node was revisited at least one more time.</span></div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#acb516222fe7d06983d42a003cf9b6644">  187</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#acb516222fe7d06983d42a003cf9b6644">Revisited</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> visits_[2]; }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// @returns true if this node was visited at least once.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  /// @returns false if this node was never visited upon traversal.</span></div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a0ea9d7d671af3d7bfbf64883a8a1fa8b">  191</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a0ea9d7d671af3d7bfbf64883a8a1fa8b">Visited</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> visits_[0]; }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// Clears all the visit information. Resets the visit times to 0s.</span></div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a969e8713d5f62a273e4596ed85833e10">  194</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a969e8713d5f62a273e4596ed85833e10">ClearVisits</a>() { std::fill_n(visits_, 3, 0); }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">  /// @returns The positive count of this node.</span></div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#ae24a234f5ebf9079fb3a35cf2d64add0">  197</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#ae24a234f5ebf9079fb3a35cf2d64add0">pos_count</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> pos_count_; }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  /// @returns The negative count of this node.</span></div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a53c85d665b6085bb701cac55fac47925">  200</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a53c85d665b6085bb701cac55fac47925">neg_count</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> neg_count_; }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">  /// Increases the count of this node.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">  /// @param[in] positive  Indication of a positive node.</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a1459f8233fd1bd77e232371394913fcf">  205</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a1459f8233fd1bd77e232371394913fcf">AddCount</a>(<span class="keywordtype">bool</span> positive) { positive ? ++pos_count_ : ++neg_count_; }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// Resets positive and negative counts of this node.</span></div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a7e6a05a10f46344880be277d40fc89b1">  208</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml#a7e6a05a10f46344880be277d40fc89b1">ResetCount</a>() {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    pos_count_ = 0;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    neg_count_ = 0;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordtype">int</span> index_;  <span class="comment">///&lt; Index of this node.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> order_;  <span class="comment">///&lt; Ordering of nodes in the graph.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> visits_[3];  <span class="comment">///&lt; Traversal array with first, second, and last visits.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> opti_value_;  <span class="comment">///&lt; Failure propagation optimization value.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> pos_count_;  <span class="comment">///&lt; The number of occurrences as a positive node.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> neg_count_;  <span class="comment">///&lt; The number of occurrences as a negative node.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>&amp; graph_;  <span class="comment">///&lt; The host graph for the node.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">/// Representation of a node that is a Boolean constant TRUE.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">/// The Node index 1 is reserved for this special argument.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">/// There&#39;s only one constant per graph.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">/// FALSE is represented as NOT TRUE with -1 as its index.</span></div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Constant.xhtml">  227</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Constant.xhtml">Constant</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a> {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>;  <span class="comment">// Only one constant per graph must be enforced by PDAG.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  /// @returns The constant Boolean value.</span></div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Constant.xhtml#a514c31278abe2f912cf7b74beb0888e3">  232</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Constant.xhtml#a514c31278abe2f912cf7b74beb0888e3">value</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// Constructs a new Constant node with index 1.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> Node::Node;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;};</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">/// Boolean variables in a Boolean formula or graph.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">/// Variables can represent the basic events of fault trees.</span></div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Variable.xhtml">  241</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a> {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">using</span> Node::Node;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;};</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">  246</a></span>&#160;<span class="keyword">using</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> = std::shared_ptr&lt;Node&gt;;  <span class="comment">///&lt; Shared base nodes in the graph.</span></div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">  247</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">ConstantPtr</a> = std::shared_ptr&lt;Constant&gt;;  <span class="comment">///&lt; Shared Boolean constants.</span></div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">  248</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a> = std::shared_ptr&lt;Variable&gt;;  <span class="comment">///&lt; Shared Boolean variables.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">/// Boolean operators of gates</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">/// for representation, preprocessing, and analysis purposes.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">/// The operator defines a type and logic of a gate.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">/// @warning If a new operator is added,</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">///          all the preprocessing and PDAG algorithms</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">///          must be reviewed and updated.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">///          The algorithms may assume</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">///          for performance and simplicity reasons</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">///          that these are the only kinds of operators possible.</span></div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">  260</a></span>&#160;<span class="comment"></span><span class="keyword">enum</span> <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> : std::uint8_t {</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">  261</a></span>&#160;  kAnd = 0,  <span class="comment">///&lt; Simple AND gate.</span></div><div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">  262</a></span>&#160;<span class="comment"></span>  kOr,  <span class="comment">///&lt; Simple OR gate.</span></div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">  263</a></span>&#160;<span class="comment"></span>  kVote,  <span class="comment">///&lt; Combination, K/N, or Vote gate representation.</span></div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">  264</a></span>&#160;<span class="comment"></span>  kXor,  <span class="comment">///&lt; Exclusive OR gate with two inputs.</span></div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">  265</a></span>&#160;<span class="comment"></span>  kNot,  <span class="comment">///&lt; Boolean negation.</span></div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">  266</a></span>&#160;<span class="comment"></span>  kNand,  <span class="comment">///&lt; NAND gate.</span></div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">  267</a></span>&#160;<span class="comment"></span>  kNor,  <span class="comment">///&lt; NOR gate.</span></div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">  268</a></span>&#160;<span class="comment"></span>  kNull  <span class="comment">///&lt; Special pass-through or NULL gate. This is not NULL set.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">/// The number of operators in the enum.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">/// This number is useful for optimizations and algorithms.</span></div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#af9e7f5be4459e626e9d4a36d0747bc4d">  273</a></span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">int</span> kNumOperators = 8;  <span class="comment">// Update this number if operators change.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">/// An indexed gate for use in a PDAG.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">/// Initially this gate can represent any type of gate or logic;</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">/// however, this gate can be only of OR and AND type</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">/// at the end of all simplifications and processing.</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">/// This gate class helps process the fault tree</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">/// before any complex analysis is done.</span></div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml">  281</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a>, <span class="keyword">public</span> std::enable_shared_from_this&lt;Gate&gt; {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">  /// An argument entry type in the gate&#39;s argument containers.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">  /// The entry contains</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  /// the positive or negative index (indicating a complement)</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">  /// and the pointer to the argument node.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">  /// The constant version is to simulate transitive const</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">  /// so that the reference count of the argument cannot be changed.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">  /// @tparam T  The type of the argument node.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">  294</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Arg</a> = std::pair&lt;int, std::shared_ptr&lt;T&gt;&gt;;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">  296</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">ConstArg</a> = std::pair&lt;int, const T&amp;&gt;;<span class="comment"></span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">  /// An associative container type to store the gate arguments.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">  /// This container type maps the index of the argument to the pointer to it.</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">  /// @tparam T  The type of the argument node.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ae2b61b9c19e6b8abd97c92b9374a49e6">  304</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1linear__map.xhtml">ArgMap</a> = <a class="code" href="classext_1_1linear__map.xhtml">ext::linear_map&lt;int, std::shared_ptr&lt;T&gt;</a>, <a class="code" href="structext_1_1MoveEraser.xhtml">ext::MoveEraser</a>&gt;;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">  /// An ordered set of gate argument indices.</span></div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">  307</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">ArgSet</a> = boost::container::flat_set&lt;int&gt;;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">  /// Creates an indexed gate with its unique index.</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">  /// It is assumed that smart pointers are used to manage the graph,</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">  /// and one shared pointer exists for this gate</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">  /// to manage parent-child hierarchy.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">  /// @param[in] type  The type of this gate.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  /// @param[in,out] graph  The host PDAG.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type, <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">  /// Destructs parent information from the arguments.</span></div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a23da77291db4c91feca80cf1d24ffbe2">  319</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a23da77291db4c91feca80cf1d24ffbe2">~Gate</a>() noexcept {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    assert(Node::parents().empty());</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    EraseArgs();</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">  /// Clones arguments and parameters.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">  /// The semantics of the gate is cloned,</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">  /// not the gate data like index and parents.</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  /// @returns Shared pointer to a newly created gate.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">  /// @warning This function does not destroy modules.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">  ///          If cloning destroys modules,</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">  ///          module(false) member function must be called.</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> Clone() noexcept;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">  /// @returns Type of this gate.</span></div><div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">  336</a></span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">type</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> type_; }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">  /// Changes the logic of the gate.</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">  /// Depending on the original and new type of the gate,</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">  /// the graph or gate properties may be changed or recorded.</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">  /// @param[in] type  A new type for this gate.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">  /// @pre The new logic is compatible with the existing arguments</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">  ///      and preserves the gate invariants.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">  /// @pre The previous type is not equal to the new one.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> type(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">  /// @returns Vote number.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment">  /// @pre The vote number is relevant to the gate logic.</span></div><div class="line"><a name="l00352"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a44b9a758151d932743543241ca669517">  352</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a44b9a758151d932743543241ca669517">vote_number</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> vote_number_; }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">  /// Sets the vote number for this gate.</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">  /// This function is used for K/N gates.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">  /// @param[in] number  The vote number of VOTE gate.</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">  /// @pre The vote number is appropriate for the gate logic and arguments.</span></div><div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a6e1504bb0c5673a3f7cdc44bdb79b4ce">  360</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a6e1504bb0c5673a3f7cdc44bdb79b4ce">vote_number</a>(<span class="keywordtype">int</span> number) { vote_number_ = number; }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">  /// @returns true if this gate has become constant.</span></div><div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">  363</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">constant</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> constant_ != <span class="keyword">nullptr</span>; }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">  /// @returns The ordered set of argument indices of this gate.</span></div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">  366</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">ArgSet</a>&amp; <a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_; }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">  /// Generic accessor to the gate argument containers.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">  /// @tparam T  The type of the argument nodes.</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">  /// @returns The map container of the gate arguments with the given type.</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#abd64953c1ef7c3f5686062ee1285a1d9">  374</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">ArgMap&lt;T&gt;</a>&amp; <a class="code" href="classscram_1_1core_1_1Gate.xhtml#abd64953c1ef7c3f5686062ee1285a1d9">args</a>() {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, Gate&gt;) {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      <span class="keywordflow">return</span> gate_args_;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;      static_assert(std::is_same_v&lt;T, Variable&gt;, <span class="stringliteral">&quot;No container for const args&quot;</span>);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;      <span class="keywordflow">return</span> variable_args_;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">  /// Provides const access to gate arguments</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">  /// w/o exposing the shared pointers.</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">  /// The arguments are provided by reference.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">  /// @tparam  The type of the arguments.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">  /// @returns Forward-iterable range with ConstArg value type.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#aea995a7c82a6d0fe5b387727ffd1da12">  392</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#aea995a7c82a6d0fe5b387727ffd1da12">args</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> boost::adaptors::transform(</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        const_cast&lt;Gate*&gt;(<span class="keyword">this</span>)-&gt;args&lt;T&gt;(), [](<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Arg&lt;T&gt;</a>&amp; arg) {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">ConstArg&lt;T&gt;</a>{arg.first, *arg.second};</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        });</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">  /// Marks are used for linear traversal of graphs.</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">  /// This can be an alternative</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">  /// to visit information provided by the base Node class.</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">  /// @returns The mark of this gate.</span></div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">  404</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">mark</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> mark_; }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">  /// Sets the mark of this gate.</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">  /// @param[in] flag  Marking with the meaning for the marker.</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">  /// @pre The marks are assigned in a top-down traversal.</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">  /// @pre The marks are continuous.</span></div><div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a241aa5dac9f925a366ecf4defa9a5dd2">  412</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a241aa5dac9f925a366ecf4defa9a5dd2">mark</a>(<span class="keywordtype">bool</span> flag) { mark_ = flag; }</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">  /// @returns Pre-assigned index of one of gate&#39;s descendants.</span></div><div class="line"><a name="l00415"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a06dae52eac3565cda4d1db1bd2ce2fc5">  415</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a06dae52eac3565cda4d1db1bd2ce2fc5">descendant</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> descendant_; }</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">  /// Assigns a descendant index of this gate.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">  /// @param[in] index  Index of the descendant.</span></div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#abe79bb8247086a8662edb1729a888933">  420</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#abe79bb8247086a8662edb1729a888933">descendant</a>(<span class="keywordtype">int</span> index) { descendant_ = index; }</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">  /// @returns Pre-assigned index of one of the gate&#39;s ancestors.</span></div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a494ab3d0d8df95da09698777d48217d7">  423</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a494ab3d0d8df95da09698777d48217d7">ancestor</a>() { <span class="keywordflow">return</span> ancestor_; }</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">  /// Assigns an ancestor index of this gate.</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">  /// @param[in] index  Index of the ancestor.</span></div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a1d5c9ee9183653b8e03ca65ab731fd3b">  428</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a1d5c9ee9183653b8e03ca65ab731fd3b">ancestor</a>(<span class="keywordtype">int</span> index) { ancestor_ = index; }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">  /// @returns The minimum time of visits of the gate&#39;s sub-graph.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">  /// @returns 0 if no time assignment was performed.</span></div><div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a6c364d77895d46d04941c170429cd2fe">  432</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a6c364d77895d46d04941c170429cd2fe">min_time</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> min_time_; }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">  /// Sets the queried minimum visit time of the sub-graph.</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">  /// @param[in] time  The positive min time of this gate&#39;s sub-graph.</span></div><div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a1f8ced2a5cfbd1744557dfc9ab915d67">  437</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a1f8ced2a5cfbd1744557dfc9ab915d67">min_time</a>(<span class="keywordtype">int</span> time) {</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    assert(time &gt; 0);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    min_time_ = time;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  }</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">  /// @returns The maximum time of the visits of the gate&#39;s sub-graph.</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">  /// @returns 0 if no time assignment was performed.</span></div><div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a42b856b97cb7b3905825a299778c1398">  444</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a42b856b97cb7b3905825a299778c1398">max_time</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> max_time_; }</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">  /// Sets the queried maximum visit time of the sub-graph.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">  /// @param[in] time  The positive max time of this gate&#39;s sub-graph.</span></div><div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a959224180c9e540321acf54acef2fabd">  449</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a959224180c9e540321acf54acef2fabd">max_time</a>(<span class="keywordtype">int</span> time) {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    assert(time &gt; 0);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    max_time_ = time;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">  /// @returns true if the whole graph of this gate is marked coherent.</span></div><div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">  455</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">coherent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> coherent_; }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">  /// Sets a coherence flag for the graph rooted by this gate.</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">  /// @param[in] flag  true if the whole graph is coherent.</span></div><div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a0989468c428c9cf0a7f8173c9232b41a">  460</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0989468c428c9cf0a7f8173c9232b41a">coherent</a>(<span class="keywordtype">bool</span> flag) { coherent_ = flag; }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">  /// @returns true if this gate is set to be a module.</span></div><div class="line"><a name="l00463"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">  463</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> module_; }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">  /// Sets this gate&#39;s module flag.</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">  /// @param[in] flag  true for modular gates.</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">  /// @pre The gate has already been marked with an opposite flag.</span></div><div class="line"><a name="l00470"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a4867bebac126b45e2809fb5461e758e0">  470</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a4867bebac126b45e2809fb5461e758e0">module</a>(<span class="keywordtype">bool</span> flag) {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    assert(module_ != flag);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    module_ = flag;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">  /// Helper function to use the sign of the argument.</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">  /// @param[in] arg  One of the arguments of this gate.</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">  /// @returns 1 if the argument is positive.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">  /// @returns -1 if the argument is negative (complement).</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">  /// @warning The function assumes that the argument exists.</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">  ///          If it doesn&#39;t, the return value is invalid.</span></div><div class="line"><a name="l00484"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a9623cb8aaa68c2712ac62eb6fa1532fd">  484</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9623cb8aaa68c2712ac62eb6fa1532fd">GetArgSign</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; arg) <span class="keyword">const</span> noexcept {</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    assert(arg-&gt;parents().count(Node::index()) &amp;&amp; <span class="stringliteral">&quot;Invalid argument.&quot;</span>);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">return</span> args_.count(arg-&gt;index()) ? 1 : -1;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">  /// Helper function for algorithms</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">  /// to get nodes from argument indices.</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the existing argument.</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">  /// @returns Pointer to the argument node of this gate.</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">  /// @warning The function assumes that the argument exists.</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">  ///          If it doesn&#39;t, the behavior is undefined.</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">  /// @warning Never try to use dynamic casts to find the type of the node.</span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">  ///          There are other gate&#39;s helper functions</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">  ///          that will avoid any need for the RTTI or other hacks.</span></div><div class="line"><a name="l00501"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a80fb65227d2d911e0637d6390f822b79">  501</a></span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a80fb65227d2d911e0637d6390f822b79">GetArg</a>(<span class="keywordtype">int</span> index) <span class="keyword">const</span> noexcept {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    assert(args_.count(index));</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(gate_args_, index))</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;      <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    if (<span class="keyword">auto</span> it = ext::find(variable_args_, index))</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;      <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    assert(constant_ &amp;&amp; std::abs(index) == constant_-&gt;index());</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">return</span> constant_;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;  }</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">  /// Adds an argument node to this gate.</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">  /// Before adding the argument,</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">  /// the existing arguments are checked for complements and duplicates.</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">  /// If there is a complement,</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">  /// the gate may change its state (erasing its arguments) or type.</span></div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">  /// The duplicates are handled according to the logic of the gate.</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment">  /// The caller must be aware of possible changes</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment">  /// due to the logic of the gate.</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">  /// @tparam T  The type of the argument node.</span></div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">  /// @param[in] index  A positive or negative index of an argument.</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">  /// @param[in] arg  A pointer to the argument node.</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">  /// @warning The function does not indicate invalid state.</span></div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">  ///          For example, a second argument for NOT or NULL type gates</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">  ///          is not going to be reported in any way.</span></div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">  /// @warning This function does not indicate error</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">  ///          for future additions</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">  ///          in case the state is nulled or becomes unity.</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">  /// @warning Duplicate arguments may change the type and state of the gate.</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">  ///          Depending on the logic of the gate,</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">  ///          new gates may be introduced</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">  ///          instead of the existing arguments.</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">  /// @warning Complex logic gates like VOTE and XOR</span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">  ///          are handled specially</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">  ///          if the argument is duplicate.</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">  ///          The caller must be very cautious of</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">  ///          the side effects of the manipulations.</span></div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a0d45834fabe95a8ec32f97c3cc43c4c2">  544</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d45834fabe95a8ec32f97c3cc43c4c2">AddArg</a>(<span class="keywordtype">int</span> index, <span class="keyword">const</span> std::shared_ptr&lt;T&gt;&amp; arg) noexcept {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    assert(index);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    assert(std::abs(index) == arg-&gt;index());</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    assert(!constant_);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    assert(!((type_ == kNot || type_ == kNull) &amp;&amp; !args_.empty()));</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    assert(!(type_ == kXor &amp;&amp; args_.size() &gt; 1));</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    assert(vote_number_ &gt;= 0);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordflow">if</span> (args_.count(index))</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;      <span class="keywordflow">return</span> ProcessDuplicateArg(index);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">if</span> (args_.count(-index))</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      <span class="keywordflow">return</span> ProcessComplementArg(index);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    args_.insert(index);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    mutable_args&lt;T&gt;().data().emplace_back(index, arg);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    arg-&gt;AddParent(shared_from_this());</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">  /// Wrapper to add gate arguments with index retrieval from the arg.</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00563"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a27b9c7ec79fbccf551afbc82b1550a10">  563</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a27b9c7ec79fbccf551afbc82b1550a10">AddArg</a>(<span class="keyword">const</span> std::shared_ptr&lt;T&gt;&amp; arg, <span class="keywordtype">bool</span> complement = <span class="keyword">false</span>) noexcept {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> AddArg(complement ? -arg-&gt;index() : arg-&gt;index(), arg);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">  /// Wrapper to add arguments from the containers.</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00568"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a372186b2809ad03da034cfdd8c45c347">  568</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a372186b2809ad03da034cfdd8c45c347">AddArg</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Arg&lt;T&gt;</a>&amp; arg) noexcept {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">return</span> AddArg(arg.first, arg.second);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  }</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">  /// Transfers this gate&#39;s argument to another gate.</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the argument.</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">  /// @param[in,out] recipient  A new parent for the argument.</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">  /// @pre No constant arguments are present.</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> TransferArg(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; recipient) noexcept;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">  /// Shares this gate&#39;s argument with another gate.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the argument.</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment">  /// @param[in,out] recipient  Another parent for the argument.</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">  /// @pre No constant arguments are present.</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ShareArg(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; recipient) noexcept;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">  /// Makes all arguments complements of themselves.</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">  /// This is a helper function to propagate a complement gate</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">  /// and apply the De Morgan&#39;s Law.</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment">  /// @pre No constant arguments are present.</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> NegateArgs() noexcept;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">  /// Replaces an argument with the complement of it.</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">  /// This is a helper function to propagate a complement gate</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">  /// and apply the De Morgan&#39;s Law.</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment">  /// @param[in] existing_arg  Positive or negative index of the argument.</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">  /// @pre No constant arguments are present.</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> NegateArg(<span class="keywordtype">int</span> existing_arg) noexcept;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">  /// Turns all non-coherent arguments of type gate (NOT, NAND, etc.)</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">  /// into complement arguments.</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment">  /// This is a helper function for gate normalization</span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">  /// to efficiently normalize non-coherent gates.</span></div><div class="line"><a name="l00609"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#abb6ae122eaf58af743ed8fc761a181e4">  609</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#abb6ae122eaf58af743ed8fc761a181e4">NegateNonCoherentGateArgs</a>() noexcept {</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Arg&lt;Gate&gt;</a>&amp; arg : gate_args_) {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;      <span class="keywordflow">switch</span> (arg.second-&gt;type()) {</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;          args_.erase(arg.first);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;          args_.insert(-arg.first);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;          arg.first = -arg.first;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;          <span class="keywordflow">break</span>;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;          assert(<span class="stringliteral">&quot;Update the logic if new gate types are introduced.&quot;</span>);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;      }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;  }</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">  /// Adds arguments of an argument gate to this gate.</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">  /// This is a helper function for gate coalescing.</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">  /// The argument gate of the same logic is removed</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment">  /// from the arguments list.</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">  /// The sign of the argument gate is expected to be positive.</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment">  /// @param[in] arg_gate  The gate which arguments to be added to this gate.</span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment">  /// @pre No constant arguments are present.</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">  /// @warning This function does not test</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">  ///          if the parent and argument logics are</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">  ///          correct for coalescing.</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CoalesceGate(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate) noexcept;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">  /// Swaps a single argument of a NULL type argument gate.</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">  /// This is separate from other coalescing functions</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment">  /// because this function takes into account the sign of the argument.</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the argument gate.</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> JoinNullGate(<span class="keywordtype">int</span> index) noexcept;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment">  /// Changes the state of a gate</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment">  /// or removes a constant argument.</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">  /// The function determines its actions depending on</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">  /// the type of the gate and state of an argument.</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">  /// @param[in] arg  The pointer the argument of this gate.</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="comment">  /// @param[in] state  False or True constant state of the argument.</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment">  /// @note This is a helper function that propagates constants.</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment">  /// @note This function takes into account the sign of the index</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment">  ///       to properly assess the Boolean constant argument.</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment">  /// @note This function may change the state of the gate.</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="comment">  /// @note This function may change type and parameters of the gate.</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessConstantArg(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; arg, <span class="keywordtype">bool</span> state) noexcept;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="comment">  /// Removes an argument from the arguments container.</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment">  /// The passed argument index must be</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment">  /// in this gate&#39;s arguments container and initialized.</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment">  /// @param[in] index  The positive or negative index of the existing argument.</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">  /// @warning The parent gate may become empty or one-argument gate,</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment">  ///          which must be handled by the caller.</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EraseArg(<span class="keywordtype">int</span> index) noexcept;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment">  /// Clears all the arguments of this gate.</span></div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EraseArgs() noexcept;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment">  /// Sets the logic of this gate to pass-through</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="comment">  /// and clears all its arguments except for a Boolean constant.</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment">  /// This function is expected to be used only once.</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment">  /// @param[in] state  The value for the Boolean constant.</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> MakeConstant(<span class="keywordtype">bool</span> state) noexcept;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;  <span class="keyword">using</span> std::enable_shared_from_this&lt;Gate&gt;::shared_from_this;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment">  /// Mutable getter for the gate arguments.</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment">  /// @tparam T  The type of the argument nodes.</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment">  /// @returns The map container of the argument nodes with the given type.</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml">ArgMap&lt;T&gt;</a>&amp; mutable_args() {</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="classext_1_1linear__map.xhtml">ArgMap&lt;T&gt;</a>&amp;<span class="keyword">&gt;</span>(args&lt;T&gt;());</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  }</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment">  /// Process an addition of an argument</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">  /// that already exists in this gate.</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the existing argument.</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">  /// @warning The addition of a duplicate argument</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="comment">  ///          has a complex set of possible outcomes</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="comment">  ///          depending on the context.</span></div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="comment">  ///          The complex corner cases must be handled by the caller.</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessDuplicateArg(<span class="keywordtype">int</span> index) noexcept;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="comment">  /// Handles the complex case of duplicate arguments for K/N gates.</span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the existing argument.</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment">  /// @warning New gates may be introduced.</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessVoteGateDuplicateArg(<span class="keywordtype">int</span> index) noexcept;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">  /// Process an addition of a complement of an existing argument.</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the argument.</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ProcessComplementArg(<span class="keywordtype">int</span> index) noexcept;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">  /// Processes the addition of a constant to the gate.</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment">  /// @tparam State  The Boolean Constant value.</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> State&gt;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <span class="keywordtype">void</span> AddConstantArg() noexcept;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment">  /// Downgrades the logic of the gate</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment">  /// if the number of arguments meets a certain number.</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="comment">  /// @param[in] target_type  The logic compatible with the current one.</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="comment">  /// @param[in] num_args  The number of required arguments.</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ReduceLogic(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> target_type, <span class="keywordtype">int</span> num_args = 1) noexcept {</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    assert(!args_.empty());</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">if</span> (args_.size() == num_args)</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;      type(target_type);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  }</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;  <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type_;  <span class="comment">///&lt; Type of this gate.</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> mark_;  <span class="comment">///&lt; Marking for linear traversal of a graph.</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> module_;  <span class="comment">///&lt; Indication of an independent module gate.</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> coherent_;  <span class="comment">///&lt; Indication of a coherent graph.</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> vote_number_;  <span class="comment">///&lt; Vote number for VOTE gate.</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> descendant_;  <span class="comment">///&lt; Mark by descendant indices.</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> ancestor_;  <span class="comment">///&lt; Mark by ancestor indices.</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> min_time_;  <span class="comment">///&lt; Minimum time of visits of the sub-graph of the gate.</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> max_time_;  <span class="comment">///&lt; Maximum time of visits of the sub-graph of the gate.</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">ArgSet</a> args_;  <span class="comment">///&lt; Argument indices of the gate.</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="comment"></span><span class="comment">  /// Associative containers of gate arguments of certain type.</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment"></span><span class="comment">  /// @{</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1linear__map.xhtml">ArgMap&lt;Gate&gt;</a> gate_args_;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;  <a class="code" href="classext_1_1linear__map.xhtml">ArgMap&lt;Variable&gt;</a> variable_args_;<span class="comment"></span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment">  /// The single constant argument for the whole graph.</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment">  /// The gate is considered constant if this argument is set.</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="comment">  /// nullptr if the gate doesn&#39;t have the Constant argument.</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">ConstantPtr</a> constant_;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;};</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment">/// Specialization to handle Boolean constants in arguments.</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment">/// @copydoc Gate::AddArg</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="keywordtype">void</span> Gate::AddArg&lt;Constant&gt;(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">ConstantPtr</a>&amp; arg) noexcept;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment">/// PDAG is a propositional directed acyclic graph.</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment">/// This class provides a simpler representation of a fault tree</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment">/// that takes into account the indices of events</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">/// instead of IDs and pointers.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment">/// This graph can also be called an indexed fault tree.</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment">/// This class is designed</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment">/// to help preprocessing and other graph transformation functions.</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">/// @pre There are no shared pointers to any other graph gate</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment">///      except for the root gate of the graph upon graph transformations.</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment">///      Extra reference count will prevent</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment">///      automatic deletion of the node</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="comment">///      and management of the structure of the graph.</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="comment">///      Moreover, the graph may become</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment">///      a multi-root graph,</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment">///      which is not the assumption of</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment">///      all the other preprocessing and analysis algorithms.</span></div><div class="line"><a name="l00780"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml">  780</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00782"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#ac834ff62c5be9c87ffa0bb7d37813ae9">  782</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> kVariableStartIndex = 2;  <span class="comment">///&lt; The shift value for mapping.</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"></span><span class="comment">  /// Sequential mapping of Variable indices to other data of type T.</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00785"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a2d1932fe39ad54de68002ddedc552c78">  785</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classext_1_1index__map.xhtml">IndexMap</a> = <a class="code" href="classext_1_1index__map.xhtml">ext::index_map&lt;kVariableStartIndex, T&gt;</a>;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment">  /// Generator of unique indices for graph nodes.</span></div><div class="line"><a name="l00788"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag_1_1NodeIndexGenerator.xhtml">  788</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Pdag_1_1NodeIndexGenerator.xhtml">NodeIndexGenerator</a> {</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a>;  <span class="comment">// Access for a new index request.</span><span class="comment"></span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="comment">    /// @returns A new unique index in the graph.</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment">    /// @param[in,out] graph  A graph within which the index is unique.</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment"></span>    <span class="keywordtype">int</span> operator()(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ++graph-&gt;node_index_; }</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  };</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="comment">  /// Registers pass-through or Null logic gates belonging to the graph.</span></div><div class="line"><a name="l00797"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag_1_1NullGateRegistrar.xhtml">  797</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Pdag_1_1NullGateRegistrar.xhtml">NullGateRegistrar</a> {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>;<span class="comment"></span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="comment">    /// @param[in] gate  A Null gate with a single argument.</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> operator()(<a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;      assert(gate-&gt;type() == kNull &amp;&amp; <span class="stringliteral">&quot;Only Null logic gates are expected.&quot;</span>);</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;      <span class="keywordflow">if</span> (gate-&gt;graph().register_null_gates_)</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        gate-&gt;<a class="code" href="classscram_1_1core_1_1Node.xhtml#a7bd26d6ebcafaa85928ba9e042a821ec">graph</a>().null_gates_.emplace_back(std::move(gate));</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    }</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  };</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">  /// Non-declarative substitutions.</span></div><div class="line"><a name="l00808"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml">  808</a></span>&#160;<span class="comment"></span>  <span class="keyword">struct </span><a class="code" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml">Substitution</a> {<span class="comment"></span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment">    /// The non-empty unique hypothesis set event IDs.</span></div><div class="line"><a name="l00810"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#abe55ed15f6cf1c9a7185690c7e8dc067">  810</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> std::vector&lt;int&gt; <a class="code" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#abe55ed15f6cf1c9a7185690c7e8dc067">hypothesis</a>;<span class="comment"></span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">    /// The non-empty unique source event IDs to remove.</span></div><div class="line"><a name="l00812"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#ac4eb34c82bed9c95587c19959c4d6201">  812</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> std::vector&lt;int&gt; <a class="code" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#ac4eb34c82bed9c95587c19959c4d6201">source</a>;<span class="comment"></span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment">    /// The target event ID.</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="comment">    /// 0 indicates absence of a target (i.e., constant True).</span></div><div class="line"><a name="l00815"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#accb6379d7007412046d542394b9f1b40">  815</a></span>&#160;<span class="comment"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#accb6379d7007412046d542394b9f1b40">target</a>;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  };</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment">  /// Various kinds of marks applied to the nodes.</span></div><div class="line"><a name="l00819"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57">  819</a></span>&#160;<span class="comment"></span>  <span class="keyword">enum</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57">NodeMark</a> {</div><div class="line"><a name="l00820"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">  820</a></span>&#160;    <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">kGateMark</a>,  <span class="comment">///&lt; General graph traversal (dirty upon traversal end!).</span></div><div class="line"><a name="l00821"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">  821</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">kVisit</a>,  <span class="comment">///&lt; General visit times for graph nodes.</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment"></span>    kCount,</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    kOptiValue,</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    kDescendant,</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    kAncestor,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    kOrder</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  };</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment">  /// Constructs a graph with no root gate</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment">  /// ready for general purpose (test) Boolean formulas.</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>() noexcept;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment">  /// Constructs a PDAG</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment">  /// starting from the top gate of a fault tree.</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment">  /// Upon construction,</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment">  /// features of the fault tree are recorded</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment">  /// to help preprocessing and analysis functions.</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="comment">  /// @param[in] root  The top gate of the fault tree.</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment">  /// @param[in] ccf  Incorporation of CCF gates and events for CCF groups.</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="comment">  /// @param[in] model  The Model containing substitutions if any.</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="comment">  /// @pre No new Variable nodes are introduced after the construction.</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">  /// @post All declarative substitutions are applied,</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">  ///       and all non-declarative substitutions are collected for application.</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment">  /// @post The PDAG is stable as long as</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment">  ///       the argument fault tree and its underlying containers are stable.</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment">  ///       If the fault tree has been manipulated (event addition, etc.),</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">  ///       its PDAG representation is not guaranteed to be the same.</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment">  /// @post The index assignment for variables is special:</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">  ///       index in [kVariableStartIndex, num of vars + kVariableStartIndex).</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment">  ///       This indexing technique helps</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment">  ///       preprocessing and analysis algorithms</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment">  ///       optimize their work with basic events.</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="comment">  /// @post All Gate indices &gt;= (num of vars + kVariableStartIndex).</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="comment"></span>  explicit <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>(const mef::<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; root, <span class="keywordtype">bool</span> ccf = false,</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                const mef::Model* model = <span class="keywordtype">nullptr</span>) noexcept;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment">  /// @returns Non-declarative substitutions to be applied by analysis.</span></div><div class="line"><a name="l00864"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a9a9a46177f8f313107ca43fe46c6b99d">  864</a></span>&#160;<span class="comment"></span>  const std::vector&lt;<a class="code" href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml">Substitution</a>&gt;&amp; substitutions()<span class="keyword"> const </span>{</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keywordflow">return</span> substitutions_;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;  }</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">  /// @returns true if the fault tree is coherent.</span></div><div class="line"><a name="l00869"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#ae8e2a4c99322296441f87c6ee9305979">  869</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#ae8e2a4c99322296441f87c6ee9305979">coherent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> coherent_; }</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment">  /// @param[in] flag  true if fault tree doesn&#39;t contain non-coherent gates.</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">  /// @todo Implement automatic tracking/marking of coherence.</span></div><div class="line"><a name="l00874"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#ab64740134b67e7b105cd9a577dc90fe3">  874</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#ab64740134b67e7b105cd9a577dc90fe3">coherent</a>(<span class="keywordtype">bool</span> flag) { coherent_ = flag; }</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment">  /// @returns true if all gates of the fault tree are normalized AND/OR.</span></div><div class="line"><a name="l00877"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a3689a9a2130228ef58d37860be544995">  877</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a3689a9a2130228ef58d37860be544995">normal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> normal_; }</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="comment">  /// @param[in] flag  true if the graph has been normalized.</span></div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment">  /// @todo Consider processing and tracking internally.</span></div><div class="line"><a name="l00882"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a7ca3d820af23ee520d4f9700c8d6d25c">  882</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a7ca3d820af23ee520d4f9700c8d6d25c">normal</a>(<span class="keywordtype">bool</span> flag) { normal_ = flag; }</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment">  /// @returns The shared pointer to current root gate of the graph.</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="comment">  ///          nullptr iff the graph has been constructed root-less.</span></div><div class="line"><a name="l00886"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#ae9407efbb00e5f28aecb40db2ab7925b">  886</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#ae9407efbb00e5f28aecb40db2ab7925b">root</a>() { <span class="keywordflow">return</span> root_; }</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">  /// @returns The current root gate of the graph.</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment">  /// @pre The graph has been constructed with a root gate.</span></div><div class="line"><a name="l00891"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a957f4ffce724190c4d91ca2e54063938">  891</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a957f4ffce724190c4d91ca2e54063938">root</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *root_; }</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment">  /// Sets the root gate.</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="comment">  /// This function is helpful for transformations.</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">  /// @param[in] gate  Replacement root gate.</span></div><div class="line"><a name="l00897"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a398f2060b6079856060e5c7f57ebf59b">  897</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a398f2060b6079856060e5c7f57ebf59b">root</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) {</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    assert(gate &amp;&amp; <span class="stringliteral">&quot;The graph cannot be made root-less.&quot;</span>);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    assert(<span class="keyword">this</span> == &amp;gate-&gt;graph() &amp;&amp; <span class="stringliteral">&quot;The gate is from a different graph.&quot;</span>);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    root_ = gate;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;  }</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment">  /// @returns true if graph = ~root.</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00905"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#af5900b29c6c9f1b1cca22ed83e4dd58b">  905</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#af5900b29c6c9f1b1cca22ed83e4dd58b">complement</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> complement_; }</div><div class="line"><a name="l00906"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a88302b3ecdabae6c8fc35da8826b10ad">  906</a></span>&#160;  <span class="keywordtype">bool</span>&amp; <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a88302b3ecdabae6c8fc35da8826b10ad">complement</a>() { <span class="keywordflow">return</span> complement_; }  <span class="comment">// Allows XOR setting.</span><span class="comment"></span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment">  /// @returns The single Boolean constant for the whole graph.</span></div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment">  /// @todo Consider limiting access to transform functions and gates.</span></div><div class="line"><a name="l00912"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a82135e4d5967e95a18ceee1af63792c0">  912</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">ConstantPtr</a>&amp; <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a82135e4d5967e95a18ceee1af63792c0">constant</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> constant_; }</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="comment">  /// @returns true if the graph contains pass-through gates with a constant.</span></div><div class="line"><a name="l00915"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a7933096368b6a16f9d6aab7c4abbb02b">  915</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a7933096368b6a16f9d6aab7c4abbb02b">HasConstants</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !constant_-&gt;parents().empty(); }</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="comment">  /// @returns true if the graph has at least one pass-through logic gate.</span></div><div class="line"><a name="l00918"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#aa43a9026583f7a629fe0a3f17440f55b">  918</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#aa43a9026583f7a629fe0a3f17440f55b">HasNullGates</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !null_gates_.empty(); }</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="comment">  /// @returns true if the graph represents a trivial Boolean function;</span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment">  ///               that is, graph = Constant or graph = Variable.</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="comment">  ///               The only gate is the root pass-through to the simple arg.</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment">  /// @note The root gate may be swapped with a new one.</span></div><div class="line"><a name="l00925"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a09f0aa3bddb78b2eff0446736d040e1b">  925</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a09f0aa3bddb78b2eff0446736d040e1b">IsTrivial</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keywordflow">return</span> !complement_ &amp;&amp; root_-&gt;type() == kNull &amp;&amp;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;           root_-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;().empty();</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;  }</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">  /// Attempts to make the graph trivial if possible.</span></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment">  /// @returns true if the graph is trivial or made trivial.</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> IsTrivial() noexcept;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment">  /// @returns Original basic event</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment">  ///          as initialized in this indexed fault tree.</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment">  ///          The Variable indices map directly to the original basic events.</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="comment">  /// @pre No new Variable nodes are introduced after the construction.</span></div><div class="line"><a name="l00940"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a9463ecda2e2b78590a01d2f589b067c6">  940</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classext_1_1index__map.xhtml">IndexMap&lt;const mef::BasicEvent*&gt;</a>&amp; <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a9463ecda2e2b78590a01d2f589b067c6">basic_events</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordflow">return</span> basic_events_;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;  }</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment">  /// Prints the PDAG in the Aralia format.</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="comment">  /// This is a helper for logging and debugging.</span></div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="comment">  /// The output is the standard error.</span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="comment">  /// @warning Node visits are used.</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="fault__tree__analysis_8cc.xhtml#af405213a7ee34a3dd833ce5298983b04">Print</a>();</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment">  /// Writes PDAG properties into logs.</span></div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment">  /// @pre The graph is valid and well formed.</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment">  /// @pre Logging cutoff level is Debug 4 or higher.</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">  /// @post Gate marks are clear.</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment">  /// @warning Gate marks are manipulated.</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Log() noexcept;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="comment">  /// Removes gates of Null logic with a single argument (maybe constant).</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="comment">  /// That one child arg is transferred to the parent gate,</span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment">  /// and the original argument gate is removed from the parent gate.</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment">  /// All Boolean constants from the PDAG are removed</span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment">  /// according to the Boolean logic of the gates</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">  /// upon passing these args to parent gates.</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;<span class="comment">  /// @post If there&#39;s still a Null logic gate,</span></div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="comment">  ///       then it&#39;s the root of the graph with a single variable/constant,</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment">  ///       and no further processing is required.</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment">  /// @post If there&#39;s still a constant,</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment">  ///       it belongs to the root gate,</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment">  ///       and the whole graph is constant,</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment">  ///       so no further processing is required.</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">  /// @warning Gate marks will get cleared by this function.</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> RemoveNullGates() noexcept;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="comment">  /// Clears marks from graph nodes.</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="comment">  /// @tparam Mark  The kind of the mark.</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;NodeMark Mark&gt;</div><div class="line"><a name="l00985"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#aa883d0e58b9faab69186bec03574c633">  985</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml#aa883d0e58b9faab69186bec03574c633">Clear</a>() noexcept {</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="keywordflow">if</span> constexpr (Mark == kGateMark) {</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;      Clear&lt;kGateMark&gt;(root_);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;      Clear&lt;kGateMark&gt;();</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;      Clear&lt;Mark&gt;(root_);</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;      Clear&lt;kGateMark&gt;();</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    }</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;  }</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="comment">  /// Determines the proper &quot;clear&quot; state for the graph node mark,</span></div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="comment">  /// and set the clear mark to nodes starting from the given gate.</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment">  /// @tparam Mark  The kind of the mark.</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="comment">  /// @param[in,out] gate  The root gate to start the traversal and cleaning.</span></div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="comment">  /// @pre The gate marks are usable for traversal (clear, continuous, etc.).</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;NodeMark Mark&gt;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;  <span class="keywordtype">void</span> Clear(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment">  /// Holder for nodes that are created from fault tree events.</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment">  /// This is a helper structure</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment">  /// for functions that transform a fault tree into a PDAG.</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>ProcessedNodes {  <span class="comment">/// @{</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment"></span>    std::unordered_map&lt;const mef::Gate*, GatePtr&gt; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    std::unordered_map&lt;const mef::BasicEvent*, VariablePtr&gt; <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;  };  <span class="comment">/// @}</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="comment">  /// Gathers and initializes Variables from Basic Events.</span></div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment">  /// The gates are gathered but not initialized</span></div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="comment">  /// to give the sequential indices for the Variables</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="comment">  /// for establishing the construction invariant.</span></div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="comment">  /// @param[in] formula  The Boolean formula with the source variables.</span></div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="comment">  /// @param[in] ccf  A flag to gather CCF basic events and gates.</span></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of gathered Variables.</span></div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> GatherVariables(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">mef::Formula</a>&amp; formula, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                       ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="comment">  /// Initializes Variable from a Basic Event or</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="comment">  /// continues the initialization of CCF Events</span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment">  /// belonging to the corresponding CCF gates.</span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment">  /// @param[in] basic_event  A Basic Event belonging to a formula.</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment">  /// @param[in] ccf  A flag to gather CCF basic events and gates.</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of gathered Variables.</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> GatherVariables(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">mef::BasicEvent</a>&amp; basic_event, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                       ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment">  /// Gathers Variables from substitutions.</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment">  /// @param[in] substitution  The substitution rule.</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="comment">  /// @param[in] ccf  A flag to gather CCF basic events and gates.</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of gathered Variables.</span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> GatherVariables(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml">mef::Substitution</a>&amp; substitution, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                       ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="comment">  /// Processes a Boolean formula of a gate into a PDAG.</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment">  /// @param[in] formula  The Boolean formula to be processed.</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="comment">  /// @param[in] ccf  A flag to replace basic events with CCF gates.</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of processed nodes.</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="comment">  /// @returns Pointer to the newly created indexed gate.</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="comment">  /// @pre The Operator enum in the MEF is the same as in PDAG.</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> ConstructGate(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">mef::Formula</a>&amp; formula, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                        ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment">  /// Processes declarative substitutions into corresponding implication gates.</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment">  /// @param[in] substitution  The declarative substitution.</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment">  /// @param[in] ccf  A flag to gather CCF basic events and gates.</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of gathered Variables.</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="comment">  /// @returns The gate to represent the substitution logic.</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="comment">  /// @pre The substitution is declarative.</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="comment">  /// @pre All the substitution variables have been gathered.</span></div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> ConstructSubstitution(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml">mef::Substitution</a>&amp; substitution, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                                ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="comment">  /// Collects non-declarative substitutions for later analysis.</span></div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment">  /// @param[in] substitution  The non-declarative substitution.</span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of gathered Variables.</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment">  /// @pre The substitution is non-declarative.</span></div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment">  /// @pre Non-declarative substitution events are not in CCF groups.</span></div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment">  /// @pre All the substitution variables have been gathered.</span></div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CollectSubstitution(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml">mef::Substitution</a>&amp; substitution,</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                           ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment">  /// Processes a Boolean formula&#39;s argument events</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment">  /// into arguments of an indexed gate in the PDAG.</span></div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment">  /// Basic events are saved for reference in analysis.</span></div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment">  /// @tparam T  The type of MEF event.</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="comment">  /// @param[in,out] parent  The parent gate to own the arguments.</span></div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="comment">  /// @param[in] event  The event argument of the formula.</span></div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="comment">  /// @param[in] ccf  A flag to replace basic events with CCF gates.</span></div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment">  /// @param[in,out] nodes  The mapping of processed nodes.</span></div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;  <span class="keywordtype">void</span> AddArg(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; parent, <span class="keyword">const</span> T&amp; event, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;              ProcessedNodes* nodes) noexcept;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="comment">  /// Propagate NULL type gates bottom-up.</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="comment">  /// This is a helper function for algorithms</span></div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="comment">  /// that may produce and need to remove NULL type gates.</span></div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment">  /// @param[in,out] gate  The gate that is NULL type.</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment">  /// @post Null logic gates have no parents.</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> PropagateNullGate(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept;</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;  <span class="keywordtype">int</span> node_index_;  <span class="comment">///&lt; Automatic index of the new node.</span></div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> complement_;  <span class="comment">///&lt; The indication of a complement graph.</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> coherent_;  <span class="comment">///&lt; Indication that the graph does not contain negation.</span></div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> normal_;  <span class="comment">///&lt; Indication for the graph containing only OR and AND gates.</span></div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> register_null_gates_;  <span class="comment">///&lt; Automatically register pass-through gates.</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> root_;  <span class="comment">///&lt; The root gate of this graph.</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment"></span>  <a class="code" href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">ConstantPtr</a> constant_;  <span class="comment">///&lt; The single constant TRUE for the whole graph.</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment"></span><span class="comment">  /// Mapping for basic events and their Variable indices.</span></div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment"></span>  <a class="code" href="classext_1_1index__map.xhtml">IndexMap&lt;const mef::BasicEvent*&gt;</a> basic_events_;<span class="comment"></span></div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="comment">  /// Container for NULL type gates to be tracked and cleaned by algorithms.</span></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="comment">  /// NULL type gates are created by gates with only one argument.</span></div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="comment"></span>  std::vector&lt;GateWeakPtr&gt; null_gates_;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;  std::vector&lt;Substitution&gt; substitutions_;  <span class="comment">///&lt; Non-declarative substitutions.</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="comment">/// Traverses and visits gates and nodes in the graph.</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="comment">/// @tparam Mark  The &quot;visited&quot; gate mark.</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="comment">/// @tparam T  The visitor type.</span></div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="comment">/// @param[in,out] gate  The starting gate.</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="comment">/// @param[in] visit  The visitor for graph nodes.</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> Mark = true, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01129"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#aa00922ee92d35a300d86442f8b9ad331"> 1129</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="pdag_8h.xhtml#aa00922ee92d35a300d86442f8b9ad331">TraverseGates</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, T&amp;&amp; visit) noexcept {</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark() == Mark)</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;  gate-&gt;mark(Mark);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;  visit(gate);</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    TraverseGates&lt;Mark&gt;(arg.second, visit);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;  }</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;}</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l01139"></a><span class="lineno"><a class="line" href="pdag_8h.xhtml#a48743e35654aca714f994998f2979d58"> 1139</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="pdag_8h.xhtml#a48743e35654aca714f994998f2979d58">TraverseNodes</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, T&amp;&amp; visit) noexcept {</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;  visit(gate);</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <a class="code" href="pdag_8h.xhtml#a48743e35654aca714f994998f2979d58">TraverseNodes</a>(arg.second, visit);</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;  }</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    visit(arg.second);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;  }</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="keyword">template</span> &lt;Pdag::NodeMark Mark&gt;</div><div class="line"><a name="l01154"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Pdag.xhtml#a6f08191830efe0648dbebb6059486162"> 1154</a></span>&#160;<span class="keywordtype">void</span> Pdag::Clear(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;  <span class="keywordflow">if</span> constexpr (Mark == kGateMark) {</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    TraverseGates&lt;false&gt;(gate, [](<span class="keyword">auto</span>&amp;&amp;) {});</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (Mark == kDescendant) {</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <a class="code" href="pdag_8h.xhtml#aa00922ee92d35a300d86442f8b9ad331">TraverseGates</a>(gate, [](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg) { arg-&gt;descendant(0); });</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (Mark == kAncestor) {</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <a class="code" href="pdag_8h.xhtml#aa00922ee92d35a300d86442f8b9ad331">TraverseGates</a>(gate, [](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg) { arg-&gt;ancestor(0); });</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    <a class="code" href="pdag_8h.xhtml#a48743e35654aca714f994998f2979d58">TraverseNodes</a>(gate, [](<span class="keyword">auto</span>&amp;&amp; node) {</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;      <span class="keywordflow">if</span> constexpr (Mark == kVisit) {</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        <span class="keywordflow">if</span> (node-&gt;Visited())</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;          node-&gt;ClearVisits();</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (Mark == kOrder) {</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        <span class="keywordflow">if</span> (node-&gt;order())</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;          node-&gt;order(0);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (Mark == kOptiValue) {</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        node-&gt;opti_value(0);</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;        static_assert(Mark == kCount, <span class="stringliteral">&quot;The node mark is not covered.&quot;</span>);</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;        node-&gt;ResetCount();</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;      }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    });</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;  }</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;}</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="comment">/// Prints PDAG nodes in the Aralia format.</span></div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="comment"></span>std::ostream&amp; <a class="code" href="pdag_8cc.xhtml#a3655e18b0516364663797b84c544bd8b">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Constant.xhtml">Constant</a>&amp; constant);</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&amp; variable);</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate);<span class="comment"></span></div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="comment">/// Prints the PDAG as a fault tree in the Aralia format.</span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="comment">/// This function is mostly for debugging purposes.</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="comment">/// @param[in,out] os  Output stream.</span></div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="comment">/// @param[in] graph  The PDAG to be printed.</span></div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="comment">/// @returns The provided output stream in its original state.</span></div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;<span class="comment">/// @warning Visits of nodes must be clean.</span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="comment">///          Visit information may get changed.</span></div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="comment"></span>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph);</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab2a4e8ac78b36541a32cc719863910a5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">scram::core::Gate::constant</a></div><div class="ttdeci">bool constant() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00363">pdag.h:363</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a959224180c9e540321acf54acef2fabd"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a959224180c9e540321acf54acef2fabd">scram::core::Gate::max_time</a></div><div class="ttdeci">void max_time(int time)</div><div class="ttdoc">Sets the queried maximum visit time of the sub-graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00449">pdag.h:449</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a6e1504bb0c5673a3f7cdc44bdb79b4ce"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a6e1504bb0c5673a3f7cdc44bdb79b4ce">scram::core::Gate::vote_number</a></div><div class="ttdeci">void vote_number(int number)</div><div class="ttdoc">Sets the vote number for this gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00360">pdag.h:360</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a957f4ffce724190c4d91ca2e54063938"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a957f4ffce724190c4d91ca2e54063938">scram::core::Pdag::root</a></div><div class="ttdeci">const Gate &amp; root() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00891">pdag.h:891</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a7933096368b6a16f9d6aab7c4abbb02b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a7933096368b6a16f9d6aab7c4abbb02b">scram::core::Pdag::HasConstants</a></div><div class="ttdeci">bool HasConstants() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00915">pdag.h:915</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">scram::core::Pdag::kGateMark</a></div><div class="ttdoc">General graph traversal (dirty upon traversal end!). </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00820">pdag.h:820</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a90ef93c4b0667215d2a8c3a3eb4f3822"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a90ef93c4b0667215d2a8c3a3eb4f3822">scram::core::Node::opti_value</a></div><div class="ttdeci">int opti_value() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00137">pdag.h:137</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml">scram::core::NodeParentManager</a></div><div class="ttdoc">A manager of information about parents. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00068">pdag.h:68</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a0d45834fabe95a8ec32f97c3cc43c4c2"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a0d45834fabe95a8ec32f97c3cc43c4c2">scram::core::Gate::AddArg</a></div><div class="ttdeci">void AddArg(int index, const std::shared_ptr&lt; T &gt; &amp;arg) noexcept</div><div class="ttdoc">Adds an argument node to this gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00544">pdag.h:544</a></div></div>
<div class="ttc" id="fault__tree__analysis_8cc_xhtml_af405213a7ee34a3dd833ce5298983b04"><div class="ttname"><a href="fault__tree__analysis_8cc.xhtml#af405213a7ee34a3dd833ce5298983b04">scram::core::Print</a></div><div class="ttdeci">void Print(const ProductContainer &amp;products)</div><div class="ttdoc">Prints a collection of products to the standard error. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00034">fault_tree_analysis.cc:34</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_1_1NullGateRegistrar_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag_1_1NullGateRegistrar.xhtml">scram::core::Pdag::NullGateRegistrar</a></div><div class="ttdoc">Registers pass-through or Null logic gates belonging to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00797">pdag.h:797</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a3ec19e49ac7a1e7f5dc9eeaf35489677"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a3ec19e49ac7a1e7f5dc9eeaf35489677">scram::core::Node::opti_value</a></div><div class="ttdeci">void opti_value(int val)</div><div class="ttdoc">Sets the optimization value for failure propagation. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00142">pdag.h:142</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_ae9407efbb00e5f28aecb40db2ab7925b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#ae9407efbb00e5f28aecb40db2ab7925b">scram::core::Pdag::root</a></div><div class="ttdeci">const GatePtr &amp; root()</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00886">pdag.h:886</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a494ab3d0d8df95da09698777d48217d7"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a494ab3d0d8df95da09698777d48217d7">scram::core::Gate::ancestor</a></div><div class="ttdeci">int ancestor()</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00423">pdag.h:423</a></div></div>
<div class="ttc" id="linear__map_8h_xhtml"><div class="ttname"><a href="linear__map_8h.xhtml">linear_map.h</a></div><div class="ttdoc">Implementation of a vector-based map for a small number of entries. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_1_1NodeIndexGenerator_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag_1_1NodeIndexGenerator.xhtml">scram::core::Pdag::NodeIndexGenerator</a></div><div class="ttdoc">Generator of unique indices for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00788">pdag.h:788</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a27b9c7ec79fbccf551afbc82b1550a10"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a27b9c7ec79fbccf551afbc82b1550a10">scram::core::Gate::AddArg</a></div><div class="ttdeci">void AddArg(const std::shared_ptr&lt; T &gt; &amp;arg, bool complement=false) noexcept</div><div class="ttdoc">Wrapper to add gate arguments with index retrieval from the arg. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00563">pdag.h:563</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Constant_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Constant.xhtml">scram::core::Constant</a></div><div class="ttdoc">Representation of a node that is a Boolean constant TRUE. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00227">pdag.h:227</a></div></div>
<div class="ttc" id="index__map_8h_xhtml"><div class="ttname"><a href="index__map_8h.xhtml">index_map.h</a></div><div class="ttdoc">Non-zero based Index-&gt;Value map adapter on sequential containers. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aea995a7c82a6d0fe5b387727ffd1da12"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aea995a7c82a6d0fe5b387727ffd1da12">scram::core::Gate::args</a></div><div class="ttdeci">auto args() const </div><div class="ttdoc">Provides const access to gate arguments w/o exposing the shared pointers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00392">pdag.h:392</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a80fb65227d2d911e0637d6390f822b79"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a80fb65227d2d911e0637d6390f822b79">scram::core::Gate::GetArg</a></div><div class="ttdeci">NodePtr GetArg(int index) const noexcept</div><div class="ttdoc">Helper function for algorithms to get nodes from argument indices. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00501">pdag.h:501</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in a PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00281">pdag.h:281</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml_a6fca1af860a85acc2907699d1d1be716"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">scram::core::NodeParentManager::parents</a></div><div class="ttdeci">const ParentMap &amp; parents() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00078">pdag.h:78</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a06dae52eac3565cda4d1db1bd2ce2fc5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a06dae52eac3565cda4d1db1bd2ce2fc5">scram::core::Gate::descendant</a></div><div class="ttdeci">int descendant() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00415">pdag.h:415</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_af2e6228a2c90786c707642e946bb1e52"><div class="ttname"><a href="pdag_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">scram::core::ConstantPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Constant &gt; ConstantPtr</div><div class="ttdoc">Shared Boolean constants. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00247">pdag.h:247</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_a2dd45b6c16940b9b60e4bc5b13ae6d6b"><div class="ttname"><a href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">scram::core::GateWeakPtr</a></div><div class="ttdeci">std::weak_ptr&lt; Gate &gt; GateWeakPtr</div><div class="ttdoc">An acyclic ptr to parent gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00064">pdag.h:64</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_abd64953c1ef7c3f5686062ee1285a1d9"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#abd64953c1ef7c3f5686062ee1285a1d9">scram::core::Gate::args</a></div><div class="ttdeci">const ArgMap&lt; T &gt; &amp; args()</div><div class="ttdoc">Generic accessor to the gate argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00374">pdag.h:374</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a0989468c428c9cf0a7f8173c9232b41a"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a0989468c428c9cf0a7f8173c9232b41a">scram::core::Gate::coherent</a></div><div class="ttdeci">void coherent(bool flag)</div><div class="ttdoc">Sets a coherence flag for the graph rooted by this gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00460">pdag.h:460</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_abb6ae122eaf58af743ed8fc761a181e4"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#abb6ae122eaf58af743ed8fc761a181e4">scram::core::Gate::NegateNonCoherentGateArgs</a></div><div class="ttdeci">void NegateNonCoherentGateArgs() noexcept</div><div class="ttdoc">Turns all non-coherent arguments of type gate (NOT, NAND, etc.) into complement arguments. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00609">pdag.h:609</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a7bd26d6ebcafaa85928ba9e042a821ec"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a7bd26d6ebcafaa85928ba9e042a821ec">scram::core::Node::graph</a></div><div class="ttdeci">Pdag &amp; graph()</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00122">pdag.h:122</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a44b9a758151d932743543241ca669517"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a44b9a758151d932743543241ca669517">scram::core::Gate::vote_number</a></div><div class="ttdeci">int vote_number() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00352">pdag.h:352</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml"><div class="ttname"><a href="classext_1_1linear__map.xhtml">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_ae24a234f5ebf9079fb3a35cf2d64add0"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#ae24a234f5ebf9079fb3a35cf2d64add0">scram::core::Node::pos_count</a></div><div class="ttdeci">int pos_count() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00197">pdag.h:197</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_a028cc62c4e510cb3063384dd75a36ed5"><div class="ttname"><a href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">scram::core::VariablePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Variable &gt; VariablePtr</div><div class="ttdoc">Shared Boolean variables. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00248">pdag.h:248</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a398f2060b6079856060e5c7f57ebf59b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a398f2060b6079856060e5c7f57ebf59b">scram::core::Pdag::root</a></div><div class="ttdeci">void root(const GatePtr &amp;gate)</div><div class="ttdoc">Sets the root gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00897">pdag.h:897</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_aa00922ee92d35a300d86442f8b9ad331"><div class="ttname"><a href="pdag_8h.xhtml#aa00922ee92d35a300d86442f8b9ad331">scram::core::TraverseGates</a></div><div class="ttdeci">void TraverseGates(const GatePtr &amp;gate, T &amp;&amp;visit) noexcept</div><div class="ttdoc">Traverses and visits gates and nodes in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l01129">pdag.h:1129</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a9f420fb29f38ac48bde786a55de3d87c"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">scram::core::Gate::Arg</a></div><div class="ttdeci">std::pair&lt; int, std::shared_ptr&lt; T &gt;&gt; Arg</div><div class="ttdoc">An argument entry type in the gate&amp;#39;s argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00294">pdag.h:294</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml">scram::core::Node</a></div><div class="ttdoc">An abstract base class that represents a node in a PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00112">pdag.h:112</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aa793eeaa12244c5b39a0d80e5b1518ae"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">scram::core::Gate::args</a></div><div class="ttdeci">const ArgSet &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00366">pdag.h:366</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a7e6a05a10f46344880be277d40fc89b1"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a7e6a05a10f46344880be277d40fc89b1">scram::core::Node::ResetCount</a></div><div class="ttdeci">void ResetCount()</div><div class="ttdoc">Resets positive and negative counts of this node. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00208">pdag.h:208</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a372186b2809ad03da034cfdd8c45c347"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a372186b2809ad03da034cfdd8c45c347">scram::core::Gate::AddArg</a></div><div class="ttdeci">void AddArg(const Arg&lt; T &gt; &amp;arg) noexcept</div><div class="ttdoc">Wrapper to add arguments from the containers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00568">pdag.h:568</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a241aa5dac9f925a366ecf4defa9a5dd2"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a241aa5dac9f925a366ecf4defa9a5dd2">scram::core::Gate::mark</a></div><div class="ttdeci">void mark(bool flag)</div><div class="ttdoc">Sets the mark of this gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00412">pdag.h:412</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_aedd3c10c67c74fcf3bbcbaf376a41ece"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#aedd3c10c67c74fcf3bbcbaf376a41ece">scram::core::Node::LastVisit</a></div><div class="ttdeci">int LastVisit() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00175">pdag.h:175</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a0ea9d7d671af3d7bfbf64883a8a1fa8b"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a0ea9d7d671af3d7bfbf64883a8a1fa8b">scram::core::Node::Visited</a></div><div class="ttdeci">bool Visited() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00191">pdag.h:191</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a82135e4d5967e95a18ceee1af63792c0"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a82135e4d5967e95a18ceee1af63792c0">scram::core::Pdag::constant</a></div><div class="ttdeci">const ConstantPtr &amp; constant() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00912">pdag.h:912</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab0e18a9481c5e712cbb0b0ff27ba72a5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">scram::core::Gate::mark</a></div><div class="ttdeci">bool mark() const </div><div class="ttdoc">Marks are used for linear traversal of graphs. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00404">pdag.h:404</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">scram::core::Pdag::kVisit</a></div><div class="ttdoc">General visit times for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00821">pdag.h:821</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Constant_xhtml_a514c31278abe2f912cf7b74beb0888e3"><div class="ttname"><a href="classscram_1_1core_1_1Constant.xhtml#a514c31278abe2f912cf7b74beb0888e3">scram::core::Constant::value</a></div><div class="ttdeci">bool value() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00232">pdag.h:232</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_acb516222fe7d06983d42a003cf9b6644"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#acb516222fe7d06983d42a003cf9b6644">scram::core::Node::Revisited</a></div><div class="ttdeci">bool Revisited() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00187">pdag.h:187</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a09f0aa3bddb78b2eff0446736d040e1b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a09f0aa3bddb78b2eff0446736d040e1b">scram::core::Pdag::IsTrivial</a></div><div class="ttdeci">bool IsTrivial() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00925">pdag.h:925</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ad5a5766ce9dbbd2104c0bb07b9639a48"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">scram::core::Gate::type</a></div><div class="ttdeci">Operator type() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00336">pdag.h:336</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ab011b41d7b669539d11e5b4030f4d78d"><div class="ttname"><a href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">scram::core::NodePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Node &gt; NodePtr</div><div class="ttdoc">Shared base nodes in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00246">pdag.h:246</a></div></div>
<div class="ttc" id="structext_1_1MoveEraser_xhtml"><div class="ttname"><a href="structext_1_1MoveEraser.xhtml">ext::MoveEraser</a></div><div class="ttdoc">Erase policy based on moving the last element to the erased element. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00054">linear_map.h:54</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a3655e18b0516364663797b84c544bd8b"><div class="ttname"><a href="pdag_8cc.xhtml#a3655e18b0516364663797b84c544bd8b">scram::core::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Constant &amp;constant)</div><div class="ttdoc">Prints PDAG nodes in the Aralia format. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00866">pdag.cc:866</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00817">pdag.cc:817</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Pdag_1_1Substitution_xhtml_ac4eb34c82bed9c95587c19959c4d6201"><div class="ttname"><a href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#ac4eb34c82bed9c95587c19959c4d6201">scram::core::Pdag::Substitution::source</a></div><div class="ttdeci">const std::vector&lt; int &gt; source</div><div class="ttdoc">The non-empty unique source event IDs to remove. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00812">pdag.h:812</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ac9970e696aec8b505474676dfc4d34a7"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">scram::core::Gate::ArgSet</a></div><div class="ttdeci">boost::container::flat_set&lt; int &gt; ArgSet</div><div class="ttdoc">An ordered set of gate argument indices. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00307">pdag.h:307</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_aa883d0e58b9faab69186bec03574c633"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#aa883d0e58b9faab69186bec03574c633">scram::core::Pdag::Clear</a></div><div class="ttdeci">void Clear() noexcept</div><div class="ttdoc">Clears marks from graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00985">pdag.h:985</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a4867bebac126b45e2809fb5461e758e0"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a4867bebac126b45e2809fb5461e758e0">scram::core::Gate::module</a></div><div class="ttdeci">void module(bool flag)</div><div class="ttdoc">Sets this gate&amp;#39;s module flag. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00470">pdag.h:470</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_ab64740134b67e7b105cd9a577dc90fe3"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#ab64740134b67e7b105cd9a577dc90fe3">scram::core::Pdag::coherent</a></div><div class="ttdeci">void coherent(bool flag)</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00874">pdag.h:874</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a4f1e4aa55c2c1197cbb08ce38cc4ff57"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57">scram::core::Pdag::NodeMark</a></div><div class="ttdeci">NodeMark</div><div class="ttdoc">Various kinds of marks applied to the nodes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00819">pdag.h:819</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_ac67bde11b4c9e7deeb787dc2d5bafb43"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#ac67bde11b4c9e7deeb787dc2d5bafb43">scram::core::Node::min_time</a></div><div class="ttdeci">virtual int min_time() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00179">pdag.h:179</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a1d5c9ee9183653b8e03ca65ab731fd3b"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a1d5c9ee9183653b8e03ca65ab731fd3b">scram::core::Gate::ancestor</a></div><div class="ttdeci">void ancestor(int index)</div><div class="ttdoc">Assigns an ancestor index of this gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00428">pdag.h:428</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a53c85d665b6085bb701cac55fac47925"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a53c85d665b6085bb701cac55fac47925">scram::core::Node::neg_count</a></div><div class="ttdeci">int neg_count() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00200">pdag.h:200</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a7ca3d820af23ee520d4f9700c8d6d25c"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a7ca3d820af23ee520d4f9700c8d6d25c">scram::core::Pdag::normal</a></div><div class="ttdeci">void normal(bool flag)</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00882">pdag.h:882</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_abe79bb8247086a8662edb1729a888933"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#abe79bb8247086a8662edb1729a888933">scram::core::Gate::descendant</a></div><div class="ttdeci">void descendant(int index)</div><div class="ttdoc">Assigns a descendant index of this gate. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00420">pdag.h:420</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a88302b3ecdabae6c8fc35da8826b10ad"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a88302b3ecdabae6c8fc35da8826b10ad">scram::core::Pdag::complement</a></div><div class="ttdeci">bool &amp; complement()</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00906">pdag.h:906</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab844ef7334752c4118a476870a56fa91"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">scram::core::Gate::ConstArg</a></div><div class="ttdeci">std::pair&lt; int, const T &amp; &gt; ConstArg</div><div class="ttdoc">An argument entry type in the gate&amp;#39;s argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00296">pdag.h:296</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Pdag_1_1Substitution_xhtml_abe55ed15f6cf1c9a7185690c7e8dc067"><div class="ttname"><a href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#abe55ed15f6cf1c9a7185690c7e8dc067">scram::core::Pdag::Substitution::hypothesis</a></div><div class="ttdeci">const std::vector&lt; int &gt; hypothesis</div><div class="ttdoc">The non-empty unique hypothesis set event IDs. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00810">pdag.h:810</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Pdag_1_1Substitution_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml">scram::core::Pdag::Substitution</a></div><div class="ttdoc">Non-declarative substitutions. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00808">pdag.h:808</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a42b856b97cb7b3905825a299778c1398"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a42b856b97cb7b3905825a299778c1398">scram::core::Gate::max_time</a></div><div class="ttdeci">int max_time() const override</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00444">pdag.h:444</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00260">pdag.h:260</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_ae8e2a4c99322296441f87c6ee9305979"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#ae8e2a4c99322296441f87c6ee9305979">scram::core::Pdag::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00869">pdag.h:869</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a3689a9a2130228ef58d37860be544995"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a3689a9a2130228ef58d37860be544995">scram::core::Pdag::normal</a></div><div class="ttdeci">bool normal() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00877">pdag.h:877</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a9463ecda2e2b78590a01d2f589b067c6"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a9463ecda2e2b78590a01d2f589b067c6">scram::core::Pdag::basic_events</a></div><div class="ttdeci">const IndexMap&lt; const mef::BasicEvent * &gt; &amp; basic_events() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00940">pdag.h:940</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a6c364d77895d46d04941c170429cd2fe"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a6c364d77895d46d04941c170429cd2fe">scram::core::Gate::min_time</a></div><div class="ttdeci">int min_time() const override</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00432">pdag.h:432</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_ab366f39e035d7034632ee3f27f8fb380"><div class="ttname"><a href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; variables</div><div class="ttdoc">Collection of variables. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00819">pdag.cc:819</a></div></div>
<div class="ttc" id="classext_1_1index__map_xhtml"><div class="ttname"><a href="classext_1_1index__map.xhtml">ext::index_map</a></div><div class="ttdoc">An adaptor map to shift zero-based containers to a different base. </div><div class="ttdef"><b>Definition:</b> <a href="index__map_8h_source.xhtml#l00037">index_map.h:37</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml"><div class="ttname"><a href="find__iterator_8h.xhtml">find_iterator.h</a></div><div class="ttdoc">Convenience iterator adaptor to wrap find calls and results. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a969e8713d5f62a273e4596ed85833e10"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a969e8713d5f62a273e4596ed85833e10">scram::core::Node::ClearVisits</a></div><div class="ttdeci">void ClearVisits()</div><div class="ttdoc">Clears all the visit information. Resets the visit times to 0s. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00194">pdag.h:194</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_afcae304a220783bfa09976a06488f496"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#afcae304a220783bfa09976a06488f496">scram::core::Node::order</a></div><div class="ttdeci">void order(int val)</div><div class="ttdoc">Sets the order number for this node. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00134">pdag.h:134</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_aa43a9026583f7a629fe0a3f17440f55b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#aa43a9026583f7a629fe0a3f17440f55b">scram::core::Pdag::HasNullGates</a></div><div class="ttdeci">bool HasNullGates() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00918">pdag.h:918</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_a48743e35654aca714f994998f2979d58"><div class="ttname"><a href="pdag_8h.xhtml#a48743e35654aca714f994998f2979d58">scram::core::TraverseNodes</a></div><div class="ttdeci">void TraverseNodes(const GatePtr &amp;gate, T &amp;&amp;visit) noexcept</div><div class="ttdoc">Traverses and visits gates and nodes in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l01139">pdag.h:1139</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a4f716d86c7aada98bd809513c29abf38"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a4f716d86c7aada98bd809513c29abf38">scram::core::Node::EnterTime</a></div><div class="ttdeci">int EnterTime() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00167">pdag.h:167</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a2e25a793734037d8d5a2ab1945dbe4d1"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a2e25a793734037d8d5a2ab1945dbe4d1">scram::core::Node::max_time</a></div><div class="ttdeci">virtual int max_time() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00183">pdag.h:183</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml">scram::mef::Substitution</a></div><div class="ttdoc">The general representation for Delete Terms, Recovery Rules, and Exchange Events. ...</div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00035">substitution.h:35</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a63668c49f42adbd4c53b923deb2d37d2"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a63668c49f42adbd4c53b923deb2d37d2">scram::core::Node::ExitTime</a></div><div class="ttdeci">int ExitTime() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00171">pdag.h:171</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a1459f8233fd1bd77e232371394913fcf"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a1459f8233fd1bd77e232371394913fcf">scram::core::Node::AddCount</a></div><div class="ttdeci">void AddCount(bool positive)</div><div class="ttdoc">Increases the count of this node. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00205">pdag.h:205</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a93fa477d60140843c4abae7de52fffa1"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">scram::core::Gate::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00463">pdag.h:463</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a0d070ec20569129162398c73165f65bc"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">scram::core::Gate::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00455">pdag.h:455</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml">scram::core::Variable</a></div><div class="ttdoc">Boolean variables in a Boolean formula or graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00241">pdag.h:241</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a8b76f2081293edc1cf85ddf8cb2ac2ed"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">scram::core::Node::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00128">pdag.h:128</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml_aac6a0def0dc0b7dfe17a5fd4379eaea2"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">scram::core::NodeParentManager::Parent</a></div><div class="ttdeci">std::pair&lt; int, GateWeakPtr &gt; Parent</div><div class="ttdoc">Parent index and ptr. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00072">pdag.h:72</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ac38351bd34c3272ac04f9ba8fa1428ec"><div class="ttname"><a href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">scram::core::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00063">pdag.h:63</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml">scram::core::Pdag</a></div><div class="ttdoc">PDAG is a propositional directed acyclic graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00780">pdag.h:780</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Pdag_1_1Substitution_xhtml_accb6379d7007412046d542394b9f1b40"><div class="ttname"><a href="structscram_1_1core_1_1Pdag_1_1Substitution.xhtml#accb6379d7007412046d542394b9f1b40">scram::core::Pdag::Substitution::target</a></div><div class="ttdeci">const int target</div><div class="ttdoc">The target event ID. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00815">pdag.h:815</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a9623cb8aaa68c2712ac62eb6fa1532fd"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a9623cb8aaa68c2712ac62eb6fa1532fd">scram::core::Gate::GetArgSign</a></div><div class="ttdeci">int GetArgSign(const NodePtr &amp;arg) const noexcept</div><div class="ttdoc">Helper function to use the sign of the argument. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00484">pdag.h:484</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a62121e217b0da73112af7e07275f2c15"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">scram::core::Node::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00125">pdag.h:125</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a23da77291db4c91feca80cf1d24ffbe2"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a23da77291db4c91feca80cf1d24ffbe2">scram::core::Gate::~Gate</a></div><div class="ttdeci">~Gate() noexcept</div><div class="ttdoc">Destructs parent information from the arguments. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00319">pdag.h:319</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_af5900b29c6c9f1b1cca22ed83e4dd58b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#af5900b29c6c9f1b1cca22ed83e4dd58b">scram::core::Pdag::complement</a></div><div class="ttdeci">bool complement() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00905">pdag.h:905</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a54799feee1f1e91f848d11f3918e3e88"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a54799feee1f1e91f848d11f3918e3e88">scram::core::Node::Visit</a></div><div class="ttdeci">bool Visit(int time)</div><div class="ttdoc">Registers the visit time for this node upon graph traversal. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00152">pdag.h:152</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a1f8ced2a5cfbd1744557dfc9ab915d67"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a1f8ced2a5cfbd1744557dfc9ab915d67">scram::core::Gate::min_time</a></div><div class="ttdeci">void min_time(int time)</div><div class="ttdoc">Sets the queried minimum visit time of the sub-graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00437">pdag.h:437</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
