<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>random_deviate.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">random_deviate.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="random__deviate_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementations of random deviate expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="random__deviate_8h.xhtml">random_deviate.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/iterator/transform_iterator.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/beta.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/erf.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/gamma.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/random/beta_distribution.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm_ext/is_sorted.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">src/error.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">src/ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;std::mt19937 RandomDeviate::rng_;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1UniformDeviate.xhtml#acec028f55d6979cc677b7ba3b96b46d4">   41</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1UniformDeviate.xhtml#acec028f55d6979cc677b7ba3b96b46d4">UniformDeviate::UniformDeviate</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* min, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* max)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({min, max}), min_(*min), max_(*max) {}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1UniformDeviate.xhtml#a558a657077fa6d4c1000d21863d56fda">   44</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1UniformDeviate.xhtml#a558a657077fa6d4c1000d21863d56fda">UniformDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordflow">if</span> (min_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &gt;= max_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>()) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Min value is more than max for Uniform distribution.&quot;</span>));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">double</span> UniformDeviate::DoSample() noexcept {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordflow">return</span> std::uniform_real_distribution(min_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>(),</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                        max_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>())(<a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">RandomDeviate::rng</a>());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a4c9a13ef33e7db7257ac591b875dc0e8">   56</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a4c9a13ef33e7db7257ac591b875dc0e8">NormalDeviate::NormalDeviate</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* mean, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* sigma)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({mean, sigma}), mean_(*mean), sigma_(*sigma) {}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a00e2955e101aa9725b2dd503c5f4c61a">   59</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a00e2955e101aa9725b2dd503c5f4c61a">NormalDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordflow">if</span> (sigma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;Standard deviation cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keywordtype">double</span> NormalDeviate::DoSample() noexcept {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordflow">return</span> std::normal_distribution(mean_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>(),</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                  sigma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>())(<a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">RandomDeviate::rng</a>());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a51ed99b015becfa8829bd8cbc4b48d11">   70</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a51ed99b015becfa8829bd8cbc4b48d11">LognormalDeviate::LognormalDeviate</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* mean, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* ef,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                   <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* level)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({mean, ef, level}),</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      flavor_(<span class="keyword">new</span> LognormalDeviate::Logarithmic(mean, ef, level)) {}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a4c2273b63666ad667c2ae0cb10184c11">   75</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a51ed99b015becfa8829bd8cbc4b48d11">LognormalDeviate::LognormalDeviate</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* mu, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* sigma)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({mu, sigma}),</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      flavor_(<span class="keyword">new</span> LognormalDeviate::Normal(mu, sigma)) {}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordtype">void</span> LognormalDeviate::Logarithmic::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordflow">if</span> (level_.value() &lt;= 0 || level_.value() &gt;= 1) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;The confidence level is not within (0, 1).&quot;</span>));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ef_.value() &lt;= 1) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="stringliteral">&quot;The Error Factor for Log-Normal distribution cannot be less than 1.&quot;</span>));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mean_.value() &lt;= 0) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="stringliteral">&quot;The mean of Log-Normal distribution cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keywordtype">double</span> LognormalDeviate::DoSample() noexcept {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">return</span> std::lognormal_distribution(flavor_-&gt;location(),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                     flavor_-&gt;scale())(<a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">RandomDeviate::rng</a>());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a1ef3833f87eb0c8817c40de67c225576">   96</a></span>&#160;<a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a1ef3833f87eb0c8817c40de67c225576">LognormalDeviate::interval</a>() noexcept {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordtype">double</span> high_estimate = std::exp(3 * flavor_-&gt;scale() + flavor_-&gt;location());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">return</span> Interval::left_open(0, high_estimate);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keywordtype">double</span> LognormalDeviate::Logarithmic::scale() noexcept {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordtype">double</span> z = -std::sqrt(2) * boost::math::erfc_inv(2 * level_.value());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> std::log(ef_.value()) / z;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keywordtype">double</span> LognormalDeviate::Logarithmic::location() noexcept {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> std::log(mean_.value()) - std::pow(scale(), 2) / 2;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordtype">void</span> LognormalDeviate::Normal::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordflow">if</span> (sigma_.value() &lt;= 0)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;Standard deviation cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">double</span> LognormalDeviate::Normal::mean() noexcept {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">return</span> std::exp(location() + std::pow(scale(), 2) / 2);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a2367e225bcfbd1d58b3ba688fb997a09">  119</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a2367e225bcfbd1d58b3ba688fb997a09">GammaDeviate::GammaDeviate</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* k, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* theta)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({k, theta}), k_(*k), theta_(*theta) {}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a4e6270b70787e8ab6f58c605ddebf674">  122</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a4e6270b70787e8ab6f58c605ddebf674">GammaDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordflow">if</span> (k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;The k shape parameter for Gamma distribution&quot;</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;The theta scale parameter for Gamma distribution&quot;</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a76d78aab0bcd2e472abb3e001e455f1f">  134</a></span>&#160;<a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a76d78aab0bcd2e472abb3e001e455f1f">GammaDeviate::interval</a>() noexcept {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keyword">using</span> boost::math::gamma_q;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordtype">double</span> k_max = k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordtype">double</span> high_estimate =</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() * std::pow(gamma_q(k_max, gamma_q(k_max, 0) - 0.99), -1);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordflow">return</span> Interval::left_open(0, high_estimate);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordtype">double</span> GammaDeviate::DoSample() noexcept {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">return</span> std::gamma_distribution(k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>())(<a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">RandomDeviate::rng</a>()) *</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;         theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BetaDeviate.xhtml#aee81fe0ddfe2ee97f4afc7ff3b9968c7">  147</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1BetaDeviate.xhtml#aee81fe0ddfe2ee97f4afc7ff3b9968c7">BetaDeviate::BetaDeviate</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* alpha, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* beta)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({alpha, beta}), alpha_(*alpha), beta_(*beta) {}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BetaDeviate.xhtml#aa65f2fd1412e180085e80bbcbace562b">  150</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1BetaDeviate.xhtml#aa65f2fd1412e180085e80bbcbace562b">BetaDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">if</span> (alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;The alpha shape parameter for Beta distribution&quot;</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="structscram_1_1mef_1_1DomainError.xhtml">DomainError</a>(<span class="stringliteral">&quot;The beta shape parameter for Beta distribution&quot;</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BetaDeviate.xhtml#ad019a413a7e7a2e6602db98e74792450">  162</a></span>&#160;<a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1BetaDeviate.xhtml#ad019a413a7e7a2e6602db98e74792450">BetaDeviate::interval</a>() noexcept {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordtype">double</span> high_estimate =</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      std::pow(boost::math::ibeta(alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>(), beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>(), 0.99), -1);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordflow">return</span> Interval::closed(0, high_estimate);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keywordtype">double</span> BetaDeviate::DoSample() noexcept {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordflow">return</span> boost::random::beta_distribution(alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>(),</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                          beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>())(<a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">RandomDeviate::rng</a>());</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Histogram.xhtml#a58994566e7edb6346480990a539b669f">  173</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a58994566e7edb6346480990a539b669f">Histogram::Histogram</a>(std::vector&lt;Expression*&gt; boundaries,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                     std::vector&lt;Expression*&gt; weights)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>(std::move(boundaries)) {  <span class="comment">// Partial registration!</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordtype">int</span> num_intervals = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().size() - 1;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordflow">if</span> (weights.size() != num_intervals) {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="stringliteral">&quot;The number of weights is not equal to the number of intervals.&quot;</span>));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="comment">// Complete the argument registration.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg : weights)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac636368fbb89921e75d120d5ac154ac1">Expression::AddArg</a>(arg);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keyword">auto</span> midpoint = std::next(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), num_intervals + 1);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  boundaries_ = IteratorRange(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), midpoint);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  weights_ = IteratorRange(midpoint, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().<a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>());</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Histogram.xhtml#a84369610d974cc5e0ae2f4a0f0b08b61">  191</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a84369610d974cc5e0ae2f4a0f0b08b61">Histogram::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(weights_, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; expr) { <span class="keywordflow">return</span> expr-&gt;value() &lt; 0; }))</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Histogram weights cannot be negative.&quot;</span>));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordflow">if</span> (!boost::is_sorted(boundaries_, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; rhs) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">return</span> lhs-&gt;value() &lt;= rhs-&gt;value();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      })) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="stringliteral">&quot;Histogram upper boundaries are not strictly increasing.&quot;</span>));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Histogram.xhtml#a2ea1258aa096f32013766848a318eb7f">  203</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a2ea1258aa096f32013766848a318eb7f">Histogram::value</a>() noexcept {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">double</span> sum_weights = 0;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordtype">double</span> sum_product = 0;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keyword">auto</span> it_b = boundaries_.begin();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordtype">double</span> prev_bound = (*it_b)-&gt;value();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; weight : weights_) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">double</span> cur_weight = weight-&gt;value();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordtype">double</span> cur_bound = (*++it_b)-&gt;<a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a2ea1258aa096f32013766848a318eb7f">value</a>();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    sum_product += (cur_bound + prev_bound) * cur_weight;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    sum_weights += cur_weight;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    prev_bound = cur_bound;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">return</span> sum_product / (2 * sum_weights);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">/// Provides a helper iterator adaptor for retrieving mean values.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Iterator&gt;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">auto</span> make_sampler(<span class="keyword">const</span> Iterator&amp; it) {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">return</span> boost::make_transform_iterator(it, std::mem_fn(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">Expression::value</a>));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keywordtype">double</span> Histogram::DoSample() noexcept {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="comment">// clang-format off</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <span class="keywordflow">return</span> std::piecewise_constant_distribution&lt;double&gt;(</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      make_sampler(boundaries_.begin()),</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      make_sampler(boundaries_.end()),</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      make_sampler(weights_.begin()))(<a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">RandomDeviate::rng</a>());</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="comment">// clang-format on</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Histogram_xhtml_a58994566e7edb6346480990a539b669f"><div class="ttname"><a href="classscram_1_1mef_1_1Histogram.xhtml#a58994566e7edb6346480990a539b669f">scram::mef::Histogram::Histogram</a></div><div class="ttdeci">Histogram(std::vector&lt; Expression * &gt; boundaries, std::vector&lt; Expression * &gt; weights)</div><div class="ttdoc">Histogram distribution setup. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00173">random_deviate.cc:173</a></div></div>
<div class="ttc" id="expression_8h_xhtml_afc9530f5ba8d4c2ccf0b40c7422a44c0"><div class="ttname"><a href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">scram::mef::Interval</a></div><div class="ttdeci">boost::icl::continuous_interval&lt; double &gt; Interval</div><div class="ttdoc">Validation domain interval for expression values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00035">expression.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1UniformDeviate_xhtml_a558a657077fa6d4c1000d21863d56fda"><div class="ttname"><a href="classscram_1_1mef_1_1UniformDeviate.xhtml#a558a657077fa6d4c1000d21863d56fda">scram::mef::UniformDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00044">random_deviate.cc:44</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NormalDeviate_xhtml_a4c9a13ef33e7db7257ac591b875dc0e8"><div class="ttname"><a href="classscram_1_1mef_1_1NormalDeviate.xhtml#a4c9a13ef33e7db7257ac591b875dc0e8">scram::mef::NormalDeviate::NormalDeviate</a></div><div class="ttdeci">NormalDeviate(Expression *mean, Expression *sigma)</div><div class="ttdoc">Setup for normal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00056">random_deviate.cc:56</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1RandomDeviate_xhtml_ab074fb1bde194f1bf36b1c6fc026a821"><div class="ttname"><a href="classscram_1_1mef_1_1RandomDeviate.xhtml#ab074fb1bde194f1bf36b1c6fc026a821">scram::mef::RandomDeviate::rng</a></div><div class="ttdeci">std::mt19937 &amp; rng()</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8h_source.xhtml#l00057">random_deviate.h:57</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1LognormalDeviate_xhtml_a1ef3833f87eb0c8817c40de67c225576"><div class="ttname"><a href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a1ef3833f87eb0c8817c40de67c225576">scram::mef::LognormalDeviate::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdoc">The high is 99.9 percentile estimate. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00096">random_deviate.cc:96</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00078">expression.h:78</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BetaDeviate_xhtml_aee81fe0ddfe2ee97f4afc7ff3b9968c7"><div class="ttname"><a href="classscram_1_1mef_1_1BetaDeviate.xhtml#aee81fe0ddfe2ee97f4afc7ff3b9968c7">scram::mef::BetaDeviate::BetaDeviate</a></div><div class="ttdeci">BetaDeviate(Expression *alpha, Expression *beta)</div><div class="ttdoc">Setup for Beta distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00147">random_deviate.cc:147</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NormalDeviate_xhtml_a00e2955e101aa9725b2dd503c5f4c61a"><div class="ttname"><a href="classscram_1_1mef_1_1NormalDeviate.xhtml#a00e2955e101aa9725b2dd503c5f4c61a">scram::mef::NormalDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00059">random_deviate.cc:59</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00881">pdag.cc:881</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BetaDeviate_xhtml_aa65f2fd1412e180085e80bbcbace562b"><div class="ttname"><a href="classscram_1_1mef_1_1BetaDeviate.xhtml#aa65f2fd1412e180085e80bbcbace562b">scram::mef::BetaDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00150">random_deviate.cc:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1RandomDeviate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1RandomDeviate.xhtml">scram::mef::RandomDeviate</a></div><div class="ttdoc">Abstract base class for all deviate expressions. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8h_source.xhtml#l00042">random_deviate.h:42</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Histogram_xhtml_a2ea1258aa096f32013766848a318eb7f"><div class="ttname"><a href="classscram_1_1mef_1_1Histogram.xhtml#a2ea1258aa096f32013766848a318eb7f">scram::mef::Histogram::value</a></div><div class="ttdeci">double value() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00203">random_deviate.cc:203</a></div></div>
<div class="ttc" id="random__deviate_8h_xhtml"><div class="ttname"><a href="random__deviate_8h.xhtml">random_deviate.h</a></div><div class="ttdoc">A collection of deviate expressions with random distributions sampled at run-time. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1GammaDeviate_xhtml_a2367e225bcfbd1d58b3ba688fb997a09"><div class="ttname"><a href="classscram_1_1mef_1_1GammaDeviate.xhtml#a2367e225bcfbd1d58b3ba688fb997a09">scram::mef::GammaDeviate::GammaDeviate</a></div><div class="ttdeci">GammaDeviate(Expression *k, Expression *theta)</div><div class="ttdoc">Setup for Gamma distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00119">random_deviate.cc:119</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1UniformDeviate_xhtml_acec028f55d6979cc677b7ba3b96b46d4"><div class="ttname"><a href="classscram_1_1mef_1_1UniformDeviate.xhtml#acec028f55d6979cc677b7ba3b96b46d4">scram::mef::UniformDeviate::UniformDeviate</a></div><div class="ttdeci">UniformDeviate(Expression *min, Expression *max)</div><div class="ttdoc">Setup for uniform distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00041">random_deviate.cc:41</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00883">pdag.cc:883</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1DomainError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DomainError.xhtml">scram::mef::DomainError</a></div><div class="ttdoc">Invalid domain for values or arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00124">error.h:124</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BetaDeviate_xhtml_ad019a413a7e7a2e6602db98e74792450"><div class="ttname"><a href="classscram_1_1mef_1_1BetaDeviate.xhtml#ad019a413a7e7a2e6602db98e74792450">scram::mef::BetaDeviate::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00162">random_deviate.cc:162</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GammaDeviate_xhtml_a4e6270b70787e8ab6f58c605ddebf674"><div class="ttname"><a href="classscram_1_1mef_1_1GammaDeviate.xhtml#a4e6270b70787e8ab6f58c605ddebf674">scram::mef::GammaDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00122">random_deviate.cc:122</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Histogram_xhtml_a84369610d974cc5e0ae2f4a0f0b08b61"><div class="ttname"><a href="classscram_1_1mef_1_1Histogram.xhtml#a84369610d974cc5e0ae2f4a0f0b08b61">scram::mef::Histogram::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00191">random_deviate.cc:191</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GammaDeviate_xhtml_a76d78aab0bcd2e472abb3e001e455f1f"><div class="ttname"><a href="classscram_1_1mef_1_1GammaDeviate.xhtml#a76d78aab0bcd2e472abb3e001e455f1f">scram::mef::GammaDeviate::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdoc">The high is 99 percentile. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00134">random_deviate.cc:134</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1LognormalDeviate_xhtml_a51ed99b015becfa8829bd8cbc4b48d11"><div class="ttname"><a href="classscram_1_1mef_1_1LognormalDeviate.xhtml#a51ed99b015becfa8829bd8cbc4b48d11">scram::mef::LognormalDeviate::LognormalDeviate</a></div><div class="ttdeci">LognormalDeviate(Expression *mean, Expression *ef, Expression *level)</div><div class="ttdoc">The log-normal deviate parametrization with its expected value and error factor of certain confidence...</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00070">random_deviate.cc:70</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af4c1a5cb29e8f45623a99742b7ba8bc5"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">scram::mef::Expression::value</a></div><div class="ttdeci">virtual double value() noexcept=0</div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac636368fbb89921e75d120d5ac154ac1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac636368fbb89921e75d120d5ac154ac1">scram::mef::Expression::AddArg</a></div><div class="ttdeci">void AddArg(Expression *arg)</div><div class="ttdoc">Registers an additional argument expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00122">expression.h:122</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
