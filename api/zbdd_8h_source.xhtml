<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>zbdd.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">zbdd.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="zbdd_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2015-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Zero-Suppressed Binary Decision Diagram facilities.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/functional/hash.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;boost/iterator/iterator_facade.hpp&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bdd_8h.xhtml">bdd.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="pdag_8h.xhtml">pdag.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// Representation of non-terminal nodes in ZBDD.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// Complement variables are represented with negative indices.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// The order of the complement is higher than the order of the variable.</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml">   44</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml">NonTerminal</a>&lt;SetNode&gt; {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aa2bf4709641f22f80fb9e2577a00fa6a">NonTerminal::NonTerminal</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">  /// @returns true if the ZBDD is minimized.</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml#a88d05af2b9f4f08b7bc66a31c2b9e249">   49</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a88d05af2b9f4f08b7bc66a31c2b9e249">minimal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> minimal_; }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">  /// Sets the indication of a minimized ZBDD.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  /// @param[in] flag  A flag for minimized ZBDD.</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml#a9a5012fd0d0152c13f69c25d075065b9">   54</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a9a5012fd0d0152c13f69c25d075065b9">minimal</a>(<span class="keywordtype">bool</span> flag) { minimal_ = flag; }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  /// @returns The registered order of the largest set in the ZBDD.</span></div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml#a2d7f99792b82961df2e5ecfcd735bb5f">   57</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a2d7f99792b82961df2e5ecfcd735bb5f">max_set_order</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> max_set_order_; }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  /// Registers the order of the largest set in the ZBDD</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  /// represented by this vertex.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// @param[in] order  The order/size of the largest set.</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml#a416cd8a033c44198e03e081b10ca88fb">   63</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a416cd8a033c44198e03e081b10ca88fb">max_set_order</a>(<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>) { max_set_order_ = <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>; }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  /// @returns Whatever count is stored in this node.</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml#a687ac81766268cd0094acbfcd7c26af0">   66</a></span>&#160;<span class="comment"></span>  std::int64_t <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a687ac81766268cd0094acbfcd7c26af0">count</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> count_; }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  /// Stores numerical value for later retrieval.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  /// This can be a helper functionality</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// for counting the number of sets or nodes.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  /// @param[in] number  A number with a meaning for the caller.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">  /// @note This field is provided for ZBDD processing techniques</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">  ///       that use mutually exclusive meta-data about the node</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  ///       in different stages of ZBDD processing.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  ///       Usually, the data is not needed after the technique is done.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  ///       In contrast to providing separate fields or using hash tables</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  ///       for each technique metric,</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  ///       this general-purpose field saves space and time.</span></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1SetNode.xhtml#a49180da369439dfa59bed34a53cb081a">   81</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a49180da369439dfa59bed34a53cb081a">count</a>(std::int64_t number) { count_ = number; }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordtype">bool</span> minimal_ = <span class="keyword">false</span>;  <span class="comment">///&lt; A flag for minimized collection of sets.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> max_set_order_ = 0;  <span class="comment">///&lt; The order of the largest set in the ZBDD.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span>  std::int64_t count_ = 0;  <span class="comment">///&lt; The number of products, nodes, or anything.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">   89</a></span>&#160;<span class="keyword">using</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;SetNode&gt;</a>;  <span class="comment">///&lt; Shared ZBDD set nodes.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">/// Function for hashing a pair of ordered numbers.</span></div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1PairHash.xhtml">   92</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1core_1_1PairHash.xhtml">PairHash</a> {<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  /// Operator overload for hashing two ordered numbers.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// @param[in] p  The pair of numbers.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  /// @returns Hash value of the pair.</span></div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1PairHash.xhtml#a0b517e9e236e45d83fcc11dadd34161c">   98</a></span>&#160;<span class="comment"></span>  std::size_t <a class="code" href="structscram_1_1core_1_1PairHash.xhtml#a0b517e9e236e45d83fcc11dadd34161c">operator()</a>(<span class="keyword">const</span> std::pair&lt;int, int&gt;&amp; p) <span class="keyword">const</span> noexcept {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> boost::hash_value(p);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;};</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/// Hash table with pairs of numbers as keys.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/// @tparam Value  Type of values to be stored in the table.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value&gt;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">  107</a></span>&#160;<span class="keyword">using</span> <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable</a> = std::unordered_map&lt;std::pair&lt;int, int&gt;, Value, <a class="code" href="structscram_1_1core_1_1PairHash.xhtml">PairHash</a>&gt;;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">  109</a></span>&#160;<span class="keyword">using</span> <a class="code" href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">Triplet</a> = std::array&lt;int, 3&gt;;  <span class="comment">///&lt; Triplet of numbers for functions.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">/// Functor for hashing triplets of ordered numbers.</span></div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1TripletHash.xhtml">  112</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1core_1_1TripletHash.xhtml">TripletHash</a> {<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  /// Operator overload for hashing three ordered numbers.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  /// @param[in] triplet  Three numbers.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  /// @returns Hash value of the triplet.</span></div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="structscram_1_1core_1_1TripletHash.xhtml#ac1ee3814d80090309daa8498c576d08c">  118</a></span>&#160;<span class="comment"></span>  std::size_t <a class="code" href="structscram_1_1core_1_1TripletHash.xhtml#ac1ee3814d80090309daa8498c576d08c">operator()</a>(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">Triplet</a>&amp; triplet) <span class="keyword">const</span> noexcept {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> boost::hash_range(triplet.begin(), triplet.end());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;};</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/// Hash table with triplets of numbers as keys.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/// @tparam Value  Type of values to be stored in the table.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Value&gt;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="zbdd_8h.xhtml#a217d792272286fe3f14fbe7420d3c0a9">  127</a></span>&#160;<span class="keyword">using</span> <a class="code" href="zbdd_8h.xhtml#a217d792272286fe3f14fbe7420d3c0a9">TripletTable</a> = std::unordered_map&lt;Triplet, Value, TripletHash&gt;;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">/// Zero-Suppressed Binary Decision Diagrams for set manipulations.</span></div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml">  130</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">  132</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;Vertex&lt;SetNode&gt;</a>&gt;;  <span class="comment">///&lt; ZBDD vertex base.</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a335b8ada37f49919670e93dfc8ef307c">  133</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a335b8ada37f49919670e93dfc8ef307c">TerminalPtr</a> = <a class="code" href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">IntrusivePtr&lt;Terminal&lt;SetNode&gt;</a>&gt;;  <span class="comment">///&lt; Terminal vertex.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// Iterator over products in a ZBDD container.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// The implementation is complicated with the incorporation of modules.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// A single stack is used by all consecutive and recursive modules.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// @pre No constant ZBDD modules resulting in the Base set.</span></div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">  140</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      : <span class="keyword">public</span> boost::iterator_facade&lt;const_iterator, const std::vector&lt;int&gt;,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                      boost::forward_traversal_tag&gt; {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span>boost::iterator_core_access;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">    /// Iterator over sets in the module ZBDD represented by a proxy node.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">    /// Modules within a module (i.e., sub-modules) are recursive,</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">    /// while consecutive modules are not.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span>    <span class="keyword">class </span>module_iterator {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;     <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">      /// Constructs module iterator based on the host ZBDD iterator.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">      ///</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">      /// @param[in] node  The proxy node for module.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">      ///                  nullptr for the root ZBDD itself.</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">      /// @param[in] zbdd  The module ZBDD.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">      /// @param[in,out] it  The host iterator with product stacks for output.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">      /// @param[in] sentinel  The flag for end iterators.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span>      module_iterator(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>* node, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; zbdd, <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a>* it,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                      <span class="keywordtype">bool</span> sentinel = <span class="keyword">false</span>)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;          : sentinel_(sentinel),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            start_pos_(it-&gt;product_.size()),</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            end_pos_(start_pos_),</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            it_(*it),</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            node_(node),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            zbdd_(zbdd) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (!sentinel_) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          sentinel_ = !GenerateProduct(zbdd_.root());</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          end_pos_ = it_.product_.size();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">      /// Only single iterator per module is allowed.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span>      module_iterator(module_iterator&amp;&amp;) noexcept = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">      /// @returns true if a new product has been generated for the host set.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span>      <span class="keyword">explicit</span> <span class="keyword">operator</span> bool()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !sentinel_; }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">      /// Generates the next set.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span>      <span class="keywordtype">void</span> operator++() {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">if</span> (sentinel_)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;          <span class="keywordflow">return</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        assert(end_pos_ &gt;= start_pos_ &amp;&amp; <span class="stringliteral">&quot;Corrupted sentinel.&quot;</span>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">while</span> (start_pos_ != it_.product_.size()) {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;          <span class="keywordflow">if</span> (!module_stack_.empty() &amp;&amp;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;              it_.product_.size() == module_stack_.back().end_pos_) {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>* node = module_stack_.back().node_;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">for</span> (++module_stack_.back(); module_stack_.back();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                 ++module_stack_.back()) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;              <span class="keywordflow">if</span> (GenerateProduct(node-&gt;<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()))</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">goto</span> outer_break;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            module_stack_.pop_back();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">if</span> (GenerateProduct(node-&gt;<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>()))</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;              <span class="keywordflow">break</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;          } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (GenerateProduct(Pop()-&gt;low())) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;          }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      outer_break:</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        end_pos_ = it_.product_.size();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        sentinel_ = start_pos_ == end_pos_;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;     <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">      /// Generates a next product in the ZBDD traversal.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">      ///</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">      /// @param[in] vertex  The vertex to start adding into the product.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">      ///</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">      /// @returns true if a new product has been generated.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">      ///</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">      /// @post If the new product is generated,</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">      ///       the product and stack containers are updated accordingly.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span>      <span class="keywordtype">bool</span> GenerateProduct(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ref</a>(vertex).<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>();</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">if</span> (it_.product_.size() &gt;= it_.zbdd_.settings().limit_order())</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>&amp; node = <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">SetNode::Ref</a>(vertex);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">if</span> (node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>()) {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;          module_stack_.emplace_back(</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;              &amp;node, *zbdd_.modules_.find(node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>())-&gt;second, &amp;it_);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;          <span class="keywordflow">for</span> (; module_stack_.back(); ++module_stack_.back()) {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">if</span> (GenerateProduct(node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()))</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;              <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;          }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;          assert(it_.product_.size() == module_stack_.back().start_pos_);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;          module_stack_.pop_back();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;          <span class="keywordflow">return</span> GenerateProduct(node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;          Push(&amp;node);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;          <span class="keywordflow">return</span> GenerateProduct(node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()) || GenerateProduct(Pop()-&gt;low());</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">      /// Removes the current leaf node from the product.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">      ///</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">      /// @returns The current leaf node in the product.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"></span>      <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>* Pop() noexcept {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        assert(start_pos_ &lt; it_.product_.size() &amp;&amp; <span class="stringliteral">&quot;Access beyond the range!&quot;</span>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>* leaf = it_.node_stack_.back();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        it_.node_stack_.pop_back();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        it_.product_.pop_back();</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> leaf;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">      /// Updates the current product with a literal.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">      ///</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">      /// @param[in] set_node  The current leaf set node to add to the product.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span>      <span class="keywordtype">void</span> Push(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>* set_node) noexcept {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        it_.node_stack_.push_back(set_node);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        it_.product_.push_back(set_node-&gt;<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>());</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordtype">bool</span> sentinel_;  <span class="comment">///&lt; The signal to end the iteration.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span>      <span class="keyword">const</span> <span class="keywordtype">int</span> start_pos_;  <span class="comment">///&lt; The initial position on the start.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span>      <span class="keywordtype">int</span> end_pos_;  <span class="comment">///&lt; The current end position in the product.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span>      <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a>&amp; it_;  <span class="comment">///&lt; The host iterator.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>      <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>* node_;  <span class="comment">///&lt; The proxy node representing the module.</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"></span>      <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; zbdd_;  <span class="comment">///&lt; The module ZBDD.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span><span class="comment">      /// The stack for consecutive modules&#39; iterators.</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span>      std::vector&lt;module_iterator&gt; module_stack_;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    };</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">    /// @param[in] zbdd  The container to iterate over.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">    /// @param[in] sentinel  The flag to turn the iterator into an end sentinel.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">    /// @pre The ZBDD container is not modified during the iteration.</span></div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml#ab30280dc9792a0c4f7a7775b6b9ac78f">  270</a></span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml#ab30280dc9792a0c4f7a7775b6b9ac78f">const_iterator</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; zbdd, <span class="keywordtype">bool</span> sentinel = <span class="keyword">false</span>)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        : sentinel_(sentinel), zbdd_(zbdd), it_(nullptr, zbdd, this, sentinel) {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      sentinel_ = !it_;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">    /// The copy constructor is only for begin and end iterators.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">    /// @param[in] other  Begin or End iterator.</span></div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml#a0d1a328eeab377a667af8de7ca7ade9c">  278</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml#a0d1a328eeab377a667af8de7ca7ade9c">const_iterator</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a>&amp; other) noexcept</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        : sentinel_(other.sentinel_),</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;          zbdd_(other.zbdd_),</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;          it_(<span class="keyword">nullptr</span>, zbdd_, <span class="keyword">this</span>, sentinel_) {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      assert(*<span class="keyword">this</span> == other &amp;&amp; <span class="stringliteral">&quot;Copy ctor is only for begin/end iterators.&quot;</span>);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;   <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">    /// Standard forward iterator functionality returning products.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> increment() {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      assert(!sentinel_ &amp;&amp; <span class="stringliteral">&quot;Incrementing an end iterator.&quot;</span>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      ++it_;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;      sentinel_ = !it_;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordtype">bool</span> equal(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a>&amp; other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;      assert(!(sentinel_ &amp;&amp; !product_.empty()) &amp;&amp; <span class="stringliteral">&quot;Uncleared products.&quot;</span>);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      <span class="keywordflow">return</span> sentinel_ == other.sentinel_ &amp;&amp; &amp;zbdd_ == &amp;other.zbdd_ &amp;&amp;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;             product_ == other.product_;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; dereference()<span class="keyword"> const </span>{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      assert(!sentinel_ &amp;&amp; <span class="stringliteral">&quot;Dereferencing end iterator.&quot;</span>);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      <span class="keywordflow">return</span> product_;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">bool</span> sentinel_;  <span class="comment">///&lt; The marker for the end of traversal.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span>    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; zbdd_;  <span class="comment">///&lt; The source container for the products.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"></span>    std::vector&lt;int&gt; product_;  <span class="comment">///&lt; The current product.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"></span>    std::vector&lt;const SetNode*&gt; node_stack_;  <span class="comment">///&lt; The traversal stack.</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"></span>    module_iterator it_;  <span class="comment">///&lt; The root module iterator for the whole ZBDD.</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">  /// Converts Reduced Ordered BDD</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">  /// into Zero-Suppressed BDD.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">  /// @param[in] bdd  ROBDD with the ITE vertices.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  /// @param[in] settings  Settings for analysis.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">  /// @pre BDD has attributed edges with only one terminal (1/True).</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">  /// @post The input BDD structure is not changed.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">  /// @note The input BDD is not passed as a constant</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">  ///       because ZBDD needs BDD facilities to calculate prime implicants.</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">  ///       However, ZBDD guarantees to preserve the original BDD structure.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>(<a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings) noexcept;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">  /// Constructor with the analysis target.</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">  /// ZBDD is directly produced from a PDAG.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">  /// @param[in] graph  Preprocessed and fully normalized PDAG.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">  /// @param[in] settings  The analysis settings.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">  /// @pre The passed PDAG already has variable ordering.</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">  /// @note The construction may take considerable time.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings) noexcept;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>() noexcept = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">  /// Runs the analysis</span></div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">  /// with the representation of a PDAG as ZBDD.</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">  /// @param[in] graph  The optional PDAG with non-declarative substitutions.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">  /// @post Substitutions destroy all the modules.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Analyze(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph = <span class="keyword">nullptr</span>) noexcept;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">  /// @returns Products generated by the analysis.</span></div><div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a281614ffe42ed055312c3c91657cbf89">  347</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a281614ffe42ed055312c3c91657cbf89">products</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">  /// @returns Iterators over sets in the ZBDD.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#aa9fe9b536749648e0ba973d455c19c93">  351</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa9fe9b536749648e0ba973d455c19c93">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a>(*<span class="keyword">this</span>); }</div><div class="line"><a name="l00352"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a881275ff480909efdf8ec49c2fdcc3a6">  352</a></span>&#160;  <span class="keyword">auto</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a881275ff480909efdf8ec49c2fdcc3a6">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">const_iterator</a>(*<span class="keyword">this</span>, <span class="comment">/*sentinel=*/</span><span class="keyword">true</span>); }<span class="comment"></span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">  /// @returns The number of *products* in the ZBDD.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">  /// @note This is not cheap.</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">  ///       The complexity is O(N) on the number of *sets* in ZBDD.</span></div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a7947e6b7a94bd315fcbf3c7a08bad59b">  359</a></span>&#160;<span class="comment"></span>  std::size_t <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7947e6b7a94bd315fcbf3c7a08bad59b">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> std::distance(<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), <a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>()); }</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">  /// @returns true for ZBDD with no products.</span></div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a284d6ef787a71e3c3519a06480f93cb3">  362</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a284d6ef787a71e3c3519a06480f93cb3">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>() == <a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>(); }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">  /// @returns true if the ZBDD represents a base/unity set.</span></div><div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a9387ad9ed66536ba2ea9ad54c37e448c">  365</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a9387ad9ed66536ba2ea9ad54c37e448c">base</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> root_ == kBase_; }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">  /// The common constructor to initialize member variables.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">  /// @param[in] settings  Settings that control analysis complexity.</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">  /// @param[in] coherent  A flag for coherent modular functions.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">  /// @param[in] module_index  The index of a module if known.</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings, <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">coherent</a> = <span class="keyword">false</span>,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                <span class="keywordtype">int</span> module_index = 0) noexcept;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">  /// @returns Current root vertex of the ZBDD.</span></div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">  377</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> root_; }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">  /// Sets a new root vertex for ZBDD.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">  /// @param[in] vertex  A vertex already registered in this ZBDD.</span></div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#ad2e32b346caadd0e71a8acd0212593f9">  382</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ad2e32b346caadd0e71a8acd0212593f9">root</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) { root_ = vertex; }</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">  /// @returns Analysis setting with this ZBDD.</span></div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">  385</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kSettings_; }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  /// @returns A set of registered and fully processed modules;</span></div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">  388</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::map&lt;int, std::unique_ptr&lt;Zbdd&gt;&gt;&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">return</span> modules_;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">  /// Logs properties of the Zbdd.</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Log() noexcept;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">  /// Finds or adds a unique SetNode in the ZBDD.</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">  /// All vertices in the ZBDD must be created with this function.</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">  /// Otherwise, the ZBDD may not be reduced,</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">  /// and vertices will miss crucial meta-information about the ZBDD.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">  /// @param[in] index  Positive or negative index of the node.</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">  /// @param[in] high  The high vertex.</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">  /// @param[in] low  The low vertex.</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">  /// @param[in] order The order for the vertex variable.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">  /// @param[in] module  The indication of a proxy for a modular ZBDD.</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">  /// @param[in] coherent  The indication of a coherent proxy.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">  /// @returns Set node with the given parameters.</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">  /// @warning This function is not aware of reduction rules.</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment"></span>  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> FindOrAddVertex(<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>, <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                             <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a> = <span class="keyword">false</span>,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                             <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">coherent</a> = <span class="keyword">false</span>) noexcept;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">  /// Find or adds a ZBDD SetNode vertex using information from gates.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">  /// @param[in] gate  Gate with index, order, and other information.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">  /// @param[in] high  The new high vertex.</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">  /// @param[in] low  The new low vertex.</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">  /// @returns SetNode for a replacement.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// @warning This function is not aware of reduction rules.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"></span>  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> FindOrAddVertex(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                             <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">  /// Applies Boolean operation to two vertices representing sets.</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">  /// This is the main function for the operation.</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">  /// @tparam Type  The operator enum.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument ZBDD set.</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument ZBDD set.</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">  /// @param[in] limit_order  The limit on the order for the computations.</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">  /// @returns The resulting ZBDD vertex.</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">  /// @post The limit on the set order is guaranteed.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;Operator Type&gt;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> Apply(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                  <span class="keywordtype">int</span> limit_order) noexcept;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">  /// Applies Boolean operation to two vertices representing sets.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">  /// This is a convenience function</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">  /// if the operator type cannot be determined at compile time.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">  /// @param[in] type  The operator or type of the gate.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument ZBDD set.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument ZBDD set.</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">  /// @param[in] limit_order  The limit on the order for the computations.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">  /// @returns The resulting ZBDD vertex.</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">  /// @pre The operator is either AND or OR.</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">  /// @post The limit on the set order is guaranteed.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> Apply(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two, <span class="keywordtype">int</span> limit_order) noexcept;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">  /// Applies Boolean operation to ZBDD graph non-terminal vertices.</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">  /// @tparam Type  The operator enum.</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument set vertex.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument set vertex.</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">  /// @param[in] limit_order  The limit on the order for the computations.</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">  /// @returns The resulting ZBDD vertex.</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">  /// @pre Argument vertices are ordered.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;Operator Type&gt;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> Apply(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; arg_one, <span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; arg_two,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                  <span class="keywordtype">int</span> limit_order) noexcept;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">  /// Removes complements of variables from products.</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="comment">  /// This procedure only needs to be performed for non-coherent graphs</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">  /// with minimal cut sets as output.</span></div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment">  /// @param[in] vertex  The variable vertex in the ZBDD.</span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">  /// @param[in,out] wide_results  Memoisation of the processed vertices.</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">  /// @returns Processed vertex.</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">  /// @post Sub-modules are not processed.</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">  /// @post Complements of modules are not eliminated.</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> EliminateComplements(</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;      <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;      std::unordered_map&lt;int, VertexPtr&gt;* wide_results) noexcept;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">  /// Removes constant modules from products.</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">  /// Constant modules are likely to happen after complement elimination.</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">  /// This procedure is inherently bottom-up,</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">  /// so the caller must make sure</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">  /// that the modules have already been pre-processed.</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">  /// @pre All modules have been processed.</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> EliminateConstantModules() noexcept;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">  /// Removes subsets in ZBDD.</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">  /// @param[in] vertex  The variable node in the set.</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">  /// @returns Processed vertex.</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> Minimize(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">  /// Traverses ZBDD to find modules and adjusted cut-offs.</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">  /// Modules within modules are not gathered.</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex to start with.</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">  /// @param[in] current_order  The product order from the top to the module.</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="comment">  /// @param[in,out] modules  A map of module indices, coherence, and cut-offs.</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">  /// @returns The minimum product order from the bottom.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">  /// @returns -1 if the vertex is terminal Empty on low branch only.</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">  /// @pre The ZBDD is minimal.</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> GatherModules(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">int</span> current_order,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                    std::map&lt;<span class="keywordtype">int</span>, std::pair&lt;bool, int&gt;&gt;* modules) noexcept;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="comment">  /// Applies non-declarative substitutions at the end of analysis.</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">  /// @param[in] substitutions  The substitutions defined in PDAG.</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ApplySubstitutions(</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;      <span class="keyword">const</span> std::vector&lt;Pdag::Substitution&gt;&amp; substitutions) noexcept;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">  /// Clears all memoization tables.</span></div><div class="line"><a name="l00527"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">  527</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">ClearTables</a>() noexcept {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    and_table_.clear();</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    or_table_.clear();</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    minimal_results_.clear();</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    subsume_table_.clear();</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    prune_results_.clear();</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">  /// Freezes the graph.</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">  /// Releases all possible memory from memoization and unique tables.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">  /// @pre No more graph modifications after the freeze.</span></div><div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a3e6359ba152137912cbafc500c2e6430">  539</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3e6359ba152137912cbafc500c2e6430">Freeze</a>() noexcept {</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    unique_table_.Release();</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">Zbdd::ClearTables</a>();</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    and_table_.reserve(0);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    or_table_.reserve(0);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    minimal_results_.reserve(0);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    subsume_table_.reserve(0);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">  /// Joins a ZBDD representing a module gate.</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment">  /// @param[in] index  The index of the module.</span></div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment">  /// @param[in] container  The container of the module graph.</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment">  /// @pre The module products are final,</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">  ///      and no more processing or sanitizing is needed.</span></div><div class="line"><a name="l00555"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">  555</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">JoinModule</a>(<span class="keywordtype">int</span> index, std::unique_ptr&lt;Zbdd&gt; container) noexcept {</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    assert(!modules_.count(index));</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    assert(container-&gt;root()-&gt;terminal() ||</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;           <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">SetNode::Ref</a>(container-&gt;root()).<a class="code" href="classscram_1_1core_1_1SetNode.xhtml#a88d05af2b9f4f08b7bc66a31c2b9e249">minimal</a>());</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    modules_.emplace(index, std::move(container));</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">  /// @todo Redesign vertex management and creation.</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">  ///       The management mechanism must be encapsulated.</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">  ///       Invariants must be private.</span></div><div class="line"><a name="l00565"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">  565</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a335b8ada37f49919670e93dfc8ef307c">TerminalPtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;  <span class="comment">///&lt; Terminal Base (Unity/1) set.</span></div><div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">  566</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a335b8ada37f49919670e93dfc8ef307c">TerminalPtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;  <span class="comment">///&lt; Terminal Empty (Null/0) set.</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">SetNodeWeakPtr</a> = <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">WeakIntrusivePtr&lt;SetNode&gt;</a>;  <span class="comment">///&lt; Pointer for tables.</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> ComputeTable = <a class="code" href="zbdd_8h.xhtml#a217d792272286fe3f14fbe7420d3c0a9">TripletTable&lt;VertexPtr&gt;</a>;  <span class="comment">///&lt; General computation table.</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment"></span><span class="comment">  /// Module entry in the tables with its original gate index.</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> ModuleEntry = std::pair&lt;const int, std::unique_ptr&lt;Zbdd&gt;&gt;;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">  /// Converts a modular BDD function</span></div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">  /// into Zero-Suppressed BDD.</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">  /// @param[in] module  Modular BDD function.</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">  /// @param[in] coherent  A flag for coherent modular functions.</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment">  /// @param[in] bdd  ROBDD with the ITE vertices.</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">  /// @param[in] settings  Settings for analysis.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">  /// @param[in] module_index  The of a module if known.</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment">  /// @pre BDD has attributed edges with only one terminal (1/True).</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">  /// @post The input BDD structure is not changed.</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">  /// @note The input BDD is not passed as a constant</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">  ///       because ZBDD needs BDD facilities to calculate prime implicants.</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">  ///       However, ZBDD guarantees to preserve the original BDD structure.</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>(<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a>&amp; <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>, <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">coherent</a>, <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;       <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings, <span class="keywordtype">int</span> module_index = 0) noexcept;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="comment">  /// Constructs ZBDD from modular PDAGs.</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment">  /// This constructor does not handle constant or single variable graphs.</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">  /// These cases are expected to be handled</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">  /// after calling this constructor.</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">  /// In these special cases,</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">  /// this constructor guarantees</span></div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment">  /// all initialization except for the root.</span></div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">  /// @param[in] gate  The root gate of a module.</span></div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">  /// @param[in] settings  Analysis settings.</span></div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="comment">  /// @post The root vertex pointer is uninitialized</span></div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">  ///       if the PDAG is constant or single variable.</span></div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>(const <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, const <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings) noexcept;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">  /// Finds a replacement for an existing node</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment">  /// or adds a new node based on an existing node.</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">  /// @param[in] node  An existing node.</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment">  /// @param[in] high  The new high vertex.</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">  /// @param[in] low  The new low vertex.</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">  /// @returns Set node for a replacement.</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">  /// @warning This function is not aware of reduction rules.</span></div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment"></span>  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> FindOrAddVertex(const <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node, const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                             const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">  /// Adds a new or finds an existing reduced ZBDD vertex</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">  /// with parameters of a prototype BDD ITE vertex.</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">  /// @param[in] ite  The prototype BDD ITE vertex.</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">  /// @param[in] complement  Vertex represents complement of a variable.</span></div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">  /// @param[in] high  The high ZBDD vertex.</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">  /// @param[in] low  The low ZBDD vertex.</span></div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">  /// @returns Resultant reduced vertex.</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> GetReducedVertex(const <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                             const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                             const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">  /// Finds a replacement reduced vertex for an existing node,</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">  /// or adds a new node based on an existing node.</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">  /// @param[in] node  An existing node.</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">  /// @param[in] high  The new high vertex.</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">  /// @param[in] low  The new low vertex.</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">  /// @returns Set node for a replacement.</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> GetReducedVertex(const <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node, const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                             const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment">  /// Computes the key for computation results.</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment">  /// The key is used in computation memoisation tables.</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment">  /// @param[in] arg_one  First argument.</span></div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">  /// @param[in] arg_two  Second argument.</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">  /// @param[in] limit_order  The limit on the order for the computations.</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">  /// @returns A triplet of integers for the computation key.</span></div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment">  /// @pre The arguments are not the same functions.</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="comment">  ///      Equal ID functions are handled by the reduction.</span></div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment">  /// @pre Even though the arguments are not SetNodePtr type,</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment">  ///      they are ZBDD SetNode vertices.</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment"></span>  <a class="code" href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">Triplet</a> GetResultKey(const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one, const <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                       <span class="keywordtype">int</span> limit_order) noexcept;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="comment">  /// Converts BDD graph into ZBDD graph.</span></div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment">  /// @param[in] vertex  Vertex of the ROBDD graph.</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment">  /// @param[in] complement  Interpretation of the vertex as complement.</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment">  /// @param[in] bdd_graph  The main ROBDD as helper database.</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="comment">  /// @param[in] limit_order  The maximum size of requested sets.</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment">  /// @param[in,out] ites  Processed function graphs with ids and limit order.</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment">  /// @returns Pointer to the root vertex of the ZBDD graph.</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment">  /// @post The input BDD structure is not changed.</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> ConvertBdd(const <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>::<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                       <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph, <span class="keywordtype">int</span> limit_order,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                       <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable</a>&lt;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&gt;* ites) noexcept;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="comment">  /// Converts BDD if-then-else vertex into ZBDD graph.</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment">  /// This overload differs in that</span></div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment">  /// it does not register the results.</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment">  /// It is used by the BDD vertex to ZBDD converter,</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment">  /// and this function should not be called directly.</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="comment">  /// @param[in] ite  ITE vertex of the ROBDD graph.</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment">  /// @param[in] complement  Interpretation of the vertex as complement.</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">  /// @param[in] bdd_graph  The main ROBDD as helper database.</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment">  /// @param[in] limit_order  The maximum size of requested sets.</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment">  /// @param[in,out] ites  Processed function graphs with ids and limit order.</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">  /// @returns Pointer to the root vertex of the ZBDD graph.</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> ConvertBdd(const <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement, <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                       <span class="keywordtype">int</span> limit_order, <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable</a>&lt;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&gt;* ites) noexcept;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment">  /// Converts BDD if-then-else vertex into ZBDD graph for prime implicants.</span></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment">  /// This is used by the BDD vertex to ZBDD converter,</span></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment">  /// and this function should not be called directly.</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">  /// @param[in] ite  ITE vertex of the ROBDD graph.</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment">  /// @param[in] complement  Interpretation of the vertex as complement.</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="comment">  /// @param[in] bdd_graph  The main ROBDD as helper database.</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="comment">  /// @param[in] limit_order  The maximum size of requested sets.</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">  /// @param[in,out] ites  Processed function graphs with ids and limit order.</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="comment">  /// @returns Pointer to the root vertex of the ZBDD graph.</span></div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> ConvertBddPrimeImplicants(const <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                      <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph, <span class="keywordtype">int</span> limit_order,</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                      <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable</a>&lt;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&gt;* ites) noexcept;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="comment">  /// Transforms a PDAG gate into a Zbdd set graph.</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="comment">  /// @param[in] gate  The root gate of the PDAG.</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment">  /// @param[in,out] gates  Processed gates with use counts.</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment">  /// @param[out] module_gates  Sub-module gates.</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">  /// @returns The top vertex of the Zbdd graph.</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">  /// @pre The memoization container is not used outside of this function.</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment">  /// @post Sub-module gates are not processed.</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  ConvertGraph(const <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate,</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;               std::unordered_map&lt;<span class="keywordtype">int</span>, std::pair&lt;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>, <span class="keywordtype">int</span>&gt;&gt;* <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>,</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;               std::unordered_map&lt;<span class="keywordtype">int</span>, const <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>*&gt;* module_gates) noexcept;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment">  /// Processes complements in a SetNode with processed high/low edges.</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment">  /// @param[in] node  SetNode to be processed.</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment">  /// @param[in] high  Processed high edge.</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="comment">  /// @param[in] low  Processed low edge.</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment">  /// @returns Processed ZBDD vertex without complements.</span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">  /// @post Sub-modules are not processed.</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment">  /// @post Complements of modules are not eliminated.</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="comment"></span>  VertexPtr EliminateComplement(const <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node, const VertexPtr&amp; high,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                const VertexPtr&amp; low) noexcept;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="comment">  /// Removes constant modules from products.</span></div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment">  /// @param[in] vertex  The variable vertex in the ZBDD.</span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="comment">  /// @param[in,out] results  Memoisation of the processed vertices.</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment">  /// @returns Processed vertex.</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment">  /// @pre All sub-modules are already processed.</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment"></span>  VertexPtr EliminateConstantModules(</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;      const VertexPtr&amp; vertex,</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;      std::unordered_map&lt;<span class="keywordtype">int</span>, VertexPtr&gt;* results) noexcept;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment">  /// Processes constant modules in a SetNode with processed high/low edges.</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment">  /// @param[in] node  SetNode to be processed.</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment">  /// @param[in] high  Processed high edge.</span></div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment">  /// @param[in] low  Processed low edge.</span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="comment">  /// @returns Processed ZBDD vertex without constant modules.</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment">  /// @pre All sub-modules are already processed.</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment"></span>  VertexPtr EliminateConstantModule(const <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node,</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                    const VertexPtr&amp; high,</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                    const VertexPtr&amp; low) noexcept;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment">  /// Applies subsume operation on two sets.</span></div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment">  /// Subsume operation removes</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment">  /// paths that exist in Low branch from High branch.</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">  /// @param[in] high  True/then/high branch of a variable.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment">  /// @param[in] low  False/else/low branch of a variable.</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment">  /// @returns Minimized high branch for a variable.</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment"></span>  VertexPtr Subsume(const VertexPtr&amp; high, const VertexPtr&amp; low) noexcept;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="comment">  /// Prunes the ZBDD graph with the cut-off.</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of the ZBDD.</span></div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="comment">  /// @param[in] limit_order  The cut-off order for the sets.</span></div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="comment">  /// @returns The root vertex of the pruned ZBDD.</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment">  /// @post If the ZBDD is minimal,</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment">  ///       the resultant pruned ZBDD is minimal.</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment"></span>  VertexPtr Prune(const VertexPtr&amp; vertex, <span class="keywordtype">int</span> limit_order) noexcept;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="comment">  /// Checks if a set node represents a gate.</span></div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment">  /// Apply operations and truncation operations</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment">  /// should avoid accounting non-module gates</span></div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="comment">  /// if they exist in ZBDD.</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment">  /// @param[in] node  A node to be tested.</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="comment">  /// @returns true for modules by default.</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="comment"></span>  virtual <span class="keywordtype">bool</span> IsGate(const <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>&amp; node) noexcept { <span class="keywordflow">return</span> node.module(); }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="comment">  /// Checks if a node have a possibility to represent Unity.</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="comment">  /// @param[in] node  SetNode to test for possibility of Unity.</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="comment">  /// @returns false if the passed node can never be Unity.</span></div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> MayBeUnity(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>&amp; node) noexcept;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="comment">  /// Counts the number of SetNodes</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment">  /// excluding the nodes in the modules.</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex to start counting.</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="comment">  /// @returns The total number of SetNode vertices</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="comment">  ///          including vertices in modules.</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">  /// @pre SetNode marks are clear (false).</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> CountSetNodes(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="comment">  /// Counts the total number of sets in ZBDD.</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of ZBDD.</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment">  /// @param[in] modules  Unroll sets with modules.</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="comment">  /// @returns The number of products in ZBDD.</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="comment">  /// @pre SetNode marks are clear (false).</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment"></span>  std::int64_t CountProducts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="comment">  /// Cleans up non-terminal vertex marks</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment">  /// by setting them to &quot;false&quot;.</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of the graph.</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment">  /// @param[in] modules  Clear marks in modules as well.</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment">  /// @pre The graph is marked &quot;true&quot; contiguously.</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ClearMarks(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment">  /// Cleans up non-terminal vertex count fields</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="comment">  /// by setting them to 0.</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of the graph.</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;<span class="comment">  /// @param[in] modules  Clear counts in modules as well.</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment">  /// @pre The graph node marks are clear.</span></div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment">  /// @post Traversed marks are set to &#39;true&#39;.</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ClearCounts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment">  /// Checks ZBDD graphs for errors in the structure.</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="comment">  /// Errors are assertions that fail at runtime.</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of ZBDD.</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment">  /// @param[in] modules  Test modules as well.</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">  /// @pre SetNode marks are clear (false).</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> TestStructure(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a> kSettings_;  <span class="comment">///&lt; Analysis settings.</span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> root_;  <span class="comment">///&lt; The root vertex of ZBDD.</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> coherent_;  <span class="comment">///&lt; Inherited coherence from BDD.</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> module_index_;  <span class="comment">///&lt; Identifier for a module if any.</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">  /// Table of unique SetNodes denoting sets.</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment">  /// The key consists of (index, id_high, id_low) triplet.</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1UniqueTable.xhtml">UniqueTable&lt;SetNode&gt;</a> unique_table_;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment">  /// Table of processed computations over sets.</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="comment">  /// The argument sets are recorded with their IDs (not vertex indices).</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="comment">  /// In order to keep only unique computations,</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="comment">  /// the argument IDs must be ordered.</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="comment">  /// The key is {min_id, max_id, max_order}.</span></div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="comment"></span>  ComputeTable and_table_;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;  ComputeTable or_table_;<span class="comment"></span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">  /// Memoization of minimal ZBDD vertices.</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment"></span>  std::unordered_map&lt;int, VertexPtr&gt; minimal_results_;<span class="comment"></span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment">  /// The results of subsume operations over sets.</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment"></span>  <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable&lt;VertexPtr&gt;</a> subsume_table_;<span class="comment"></span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">  /// The results of pruning operations.</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment"></span>  <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable&lt;VertexPtr&gt;</a> prune_results_;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;  std::map&lt;int, std::unique_ptr&lt;Zbdd&gt;&gt; modules_;  <span class="comment">///&lt; Module graphs.</span></div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> set_id_;  <span class="comment">///&lt; Identification assignment for new set graphs.</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="keyword">namespace </span>zbdd {</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment">/// Storage for generated cut sets in MOCUS.</span></div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment">/// The semantics is similar to a set of cut sets.</span></div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment">/// The container assumes special variable ordering.</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment">/// Gates to be processed must be ordered to the top.</span></div><div class="line"><a name="l00885"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml">  885</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml">CutSetContainer</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a> {</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment">  /// Default constructor to initialize member variables.</span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="comment">  /// @param[in] settings  Settings that control analysis complexity.</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment">  /// @param[in] module_index  The of a module if known.</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment">  /// @param[in] gate_index_bound  The exclusive lower bound for gate indices.</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment">  /// @pre No complements of gates.</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="comment">  /// @pre Gates are indexed sequentially</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">  ///      starting from a number larger than the lower bound.</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">  /// @pre Basic events are indexed sequentially</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="comment">  ///      up to a number less than or equal to the given lower bound.</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml">CutSetContainer</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings, <span class="keywordtype">int</span> module_index,</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                  <span class="keywordtype">int</span> gate_index_bound) noexcept;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment">  /// Converts a PDAG gate into intermediate cut sets.</span></div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment">  /// @param[in] gate  The target AND/OR gate with arguments.</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="comment">  /// @returns The root vertex of the ZBDD representing the gate cut sets.</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> ConvertGate(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate) noexcept;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment">  /// Finds a gate in intermediate cut sets.</span></div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment">  /// @returns The index of the gate in intermediate cut sets.</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment">  /// @returns 0 if no gates are found.</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment">  /// @pre Variable ordering puts the gate to the top (root).</span></div><div class="line"><a name="l00914"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a9f6c0cef12a80aefbfb357022d558053">  914</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a9f6c0cef12a80aefbfb357022d558053">GetNextGate</a>() noexcept {</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>()-&gt;<a class="code" href="classscram_1_1core_1_1Vertex.xhtml#acfa7d6caa5bc11bc95cb35012169ab15">terminal</a>())</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;      <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>&amp; node = <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">SetNode::Ref</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>());</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keywordflow">return</span> CutSetContainer::IsGate(node) &amp;&amp; !node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>() ? node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>() : 0;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;  }</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment">  /// Extracts (removes!) intermediate cut sets</span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="comment">  /// containing a node with a given index.</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment">  /// @param[in] index  The index of the gate.</span></div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">  /// @returns The root of the ZBDD containing the intermediate cut sets.</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment">  /// @pre Variable ordering puts the gate to the top (root).</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">  /// @post The extracted cut sets are pre-processed</span></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">  ///       by removing the vertex with the index of the gate.</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> ExtractIntermediateCutSets(<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>) noexcept;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment">  /// Expands the intermediate ZBDD representation of a gate</span></div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment">  /// in intermediate cut sets containing the gate.</span></div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment">  /// @param[in] gate_zbdd  The intermediate ZBDD of the gate.</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="comment">  /// @param[in] cut_sets  A collection of cut sets.</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="comment">  /// @returns The root vertex of the resulting ZBDD.</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="comment">  /// @pre The intermediate cut sets are pre-processed</span></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment">  ///      by removing the vertex with the index of the gate.</span></div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> ExpandGate(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; gate_zbdd,</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; cut_sets) noexcept;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="comment">  /// Merges a set of cut sets into the main container.</span></div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment">  /// @param[in] vertex  The root ZBDD vertex representing the cut sets.</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment">  /// @pre The argument ZBDD cut sets are managed by this container.</span></div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Merge(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment">  /// Eliminates all complements from cut sets.</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">  /// This can only be done</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">  /// if the cut set generation is certain not to have conflicts.</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment">  /// @pre The cut sets have negative literals, i.e., non-coherent.</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="comment">  /// @post Sub-modules are not processed.</span></div><div class="line"><a name="l00961"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a49532388bd9b917f4351f94f728518aa">  961</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a49532388bd9b917f4351f94f728518aa">EliminateComplements</a>() noexcept {</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    std::unordered_map&lt;int, VertexPtr&gt; wide_results;</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">Zbdd::EliminateComplements</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>(), &amp;wide_results));</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;  }</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment">  /// Removes constant modules from cut sets.</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">  /// Constant modules are likely to happen after complement elimination.</span></div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;<span class="comment">  /// @pre All modules have been processed.</span></div><div class="line"><a name="l00970"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a1022ad7a4699257a6f0c0809d8f1903d">  970</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a1022ad7a4699257a6f0c0809d8f1903d">EliminateConstantModules</a>() noexcept { <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">Zbdd::EliminateConstantModules</a>(); }</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment">  /// Minimizes cut sets in the container.</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment">  /// @post Sub-modules are not processed.</span></div><div class="line"><a name="l00975"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a1648d3f24a95302fac2a40e95f743dda">  975</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a1648d3f24a95302fac2a40e95f743dda">Minimize</a>() noexcept { <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Zbdd::Minimize</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>())); }</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">  /// Gathers all module indices in the cut sets.</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="comment">  /// @returns An unordered map module of indices, coherence, and cut-offs.</span></div><div class="line"><a name="l00980"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a478c89f64731781882b50ec55898900b">  980</a></span>&#160;<span class="comment"></span>  std::map&lt;int, std::pair&lt;bool, int&gt;&gt; <a class="code" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a478c89f64731781882b50ec55898900b">GatherModules</a>() noexcept {</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    assert(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">Zbdd::modules</a>().empty() &amp;&amp; <span class="stringliteral">&quot;Unexpected call with defined modules?!&quot;</span>);</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    std::map&lt;int, std::pair&lt;bool, int&gt;&gt; modules;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">Zbdd::GatherModules</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">Zbdd::root</a>(), 0, &amp;modules);</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keywordflow">return</span> modules;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;  }</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">Zbdd::JoinModule</a>;  <span class="comment">///&lt; Joins fully processed modules.</span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">Zbdd::Log</a>;  <span class="comment">///&lt; Logs properties of the container.</span></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;<span class="comment">  /// Checks if a set node represents a gate.</span></div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="comment">  /// @param[in] node  A node to be tested.</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="comment">  /// @returns true if the index of the node belongs to a gate.</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="comment">  /// @pre There are no complements of gates.</span></div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;<span class="comment">  /// @pre Gate indices have a lower bound.</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> IsGate(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>&amp; node) noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <span class="keywordflow">return</span> node.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>() &gt; gate_index_bound_;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;  }</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;  <span class="keywordtype">int</span> gate_index_bound_;  <span class="comment">///&lt; The exclusive lower bound for the gate indices.</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;}  <span class="comment">// namespace zbdd</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="classscram_1_1core_1_1Zbdd_1_1const__iterator_xhtml_a0d1a328eeab377a667af8de7ca7ade9c"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml#a0d1a328eeab377a667af8de7ca7ade9c">scram::core::Zbdd::const_iterator::const_iterator</a></div><div class="ttdeci">const_iterator(const const_iterator &amp;other) noexcept</div><div class="ttdoc">The copy constructor is only for begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00278">zbdd.h:278</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_adeb100923176ebd5f820c75b79280796"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">scram::core::NonTerminal::low</a></div><div class="ttdeci">const VertexPtr &amp; low() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00296">bdd.h:296</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a7c1129acd9810b5b9ff4952f587ce490"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">scram::core::Zbdd::ClearTables</a></div><div class="ttdeci">void ClearTables() noexcept</div><div class="ttdoc">Clears all memoization tables. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00527">zbdd.h:527</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a73cd06a4022ce5cd60f9f667fec8d51f"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">scram::core::Zbdd::VertexPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Vertex&lt; SetNode &gt;&gt; VertexPtr</div><div class="ttdoc">ZBDD vertex base. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00132">zbdd.h:132</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aeb83fd37f2aee74ac41e6ccadba82d39"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">scram::core::Zbdd::EliminateConstantModules</a></div><div class="ttdeci">void EliminateConstantModules() noexcept</div><div class="ttdoc">Removes constant modules from products. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00574">zbdd.cc:574</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1PairHash_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1PairHash.xhtml">scram::core::PairHash</a></div><div class="ttdoc">Function for hashing a pair of ordered numbers. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00092">zbdd.h:92</a></div></div>
<div class="ttc" id="bdd_8h_xhtml"><div class="ttname"><a href="bdd_8h.xhtml">bdd.h</a></div><div class="ttdoc">Fault tree analysis with the Binary Decision Diagram algorithms. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml">scram::core::Zbdd</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagrams for set manipulations. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00130">zbdd.h:130</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_a2d7f99792b82961df2e5ecfcd735bb5f"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#a2d7f99792b82961df2e5ecfcd735bb5f">scram::core::SetNode::max_set_order</a></div><div class="ttdeci">int max_set_order() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00057">zbdd.h:57</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a66b1888c00815cc350464f0cffc0abed"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">scram::core::Zbdd::kBase_</a></div><div class="ttdeci">const TerminalPtr kBase_</div><div class="ttdoc">Terminal Base (Unity/1) set. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00565">zbdd.h:565</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml">scram::core::Bdd</a></div><div class="ttdoc">Analysis of PDAGs with Binary Decision Diagrams. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00690">bdd.h:690</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1PairHash_xhtml_a0b517e9e236e45d83fcc11dadd34161c"><div class="ttname"><a href="structscram_1_1core_1_1PairHash.xhtml#a0b517e9e236e45d83fcc11dadd34161c">scram::core::PairHash::operator()</a></div><div class="ttdeci">std::size_t operator()(const std::pair&lt; int, int &gt; &amp;p) const noexcept</div><div class="ttdoc">Operator overload for hashing two ordered numbers. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00098">zbdd.h:98</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a9b539b6c85bb597cb634bb3f78c6ba72"><div class="ttname"><a href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">scram::core::PairTable</a></div><div class="ttdeci">std::unordered_map&lt; std::pair&lt; int, int &gt;, Value, PairHash &gt; PairTable</div><div class="ttdoc">Hash table with pairs of numbers as keys. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00107">zbdd.h:107</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a3dbb8ef5da2882daf6c39e9724eae459"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">scram::core::Zbdd::Minimize</a></div><div class="ttdeci">VertexPtr Minimize(const VertexPtr &amp;vertex) noexcept</div><div class="ttdoc">Removes subsets in ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00613">zbdd.cc:613</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a217d792272286fe3f14fbe7420d3c0a9"><div class="ttname"><a href="zbdd_8h.xhtml#a217d792272286fe3f14fbe7420d3c0a9">scram::core::TripletTable</a></div><div class="ttdeci">std::unordered_map&lt; Triplet, Value, TripletHash &gt; TripletTable</div><div class="ttdoc">Hash table with triplets of numbers as keys. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00127">zbdd.h:127</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1zbdd_1_1CutSetContainer_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml">scram::core::zbdd::CutSetContainer</a></div><div class="ttdoc">Storage for generated cut sets in MOCUS. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00885">zbdd.h:885</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1zbdd_1_1CutSetContainer_xhtml_a9f6c0cef12a80aefbfb357022d558053"><div class="ttname"><a href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a9f6c0cef12a80aefbfb357022d558053">scram::core::zbdd::CutSetContainer::GetNextGate</a></div><div class="ttdeci">int GetNextGate() noexcept</div><div class="ttdoc">Finds a gate in intermediate cut sets. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00914">zbdd.h:914</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a7947e6b7a94bd315fcbf3c7a08bad59b"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a7947e6b7a94bd315fcbf3c7a08bad59b">scram::core::Zbdd::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00359">zbdd.h:359</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ae819f5439416479971018ac134233091"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">scram::core::Zbdd::Log</a></div><div class="ttdeci">void Log() noexcept</div><div class="ttdoc">Logs properties of the Zbdd. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00047">zbdd.cc:47</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a284d6ef787a71e3c3519a06480f93cb3"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a284d6ef787a71e3c3519a06480f93cb3">scram::core::Zbdd::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00362">zbdd.h:362</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in a PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00281">pdag.h:281</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_a88d05af2b9f4f08b7bc66a31c2b9e249"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#a88d05af2b9f4f08b7bc66a31c2b9e249">scram::core::SetNode::minimal</a></div><div class="ttdeci">bool minimal() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00049">zbdd.h:49</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a4ecbf60e6ac51e5260e8d8139c1b8599"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">scram::core::Zbdd::JoinModule</a></div><div class="ttdeci">void JoinModule(int index, std::unique_ptr&lt; Zbdd &gt; container) noexcept</div><div class="ttdoc">Joins a ZBDD representing a module gate. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00555">zbdd.h:555</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aa599878612e128fa09e17d0520280dbe"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">scram::core::Zbdd::root</a></div><div class="ttdeci">const VertexPtr &amp; root() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00377">zbdd.h:377</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ad2e32b346caadd0e71a8acd0212593f9"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ad2e32b346caadd0e71a8acd0212593f9">scram::core::Zbdd::root</a></div><div class="ttdeci">void root(const VertexPtr &amp;vertex)</div><div class="ttdoc">Sets a new root vertex for ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00382">zbdd.h:382</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml_a7a25b0b40498f4876571a5dac4e724c3"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">scram::core::Terminal::value</a></div><div class="ttdeci">bool value() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00221">bdd.h:221</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml">scram::core::NonTerminal</a></div><div class="ttdoc">Representation of non-terminal vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00230">bdd.h:230</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml">scram::core::Terminal</a></div><div class="ttdoc">Representation of terminal vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00130">bdd.h:130</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a281614ffe42ed055312c3c91657cbf89"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a281614ffe42ed055312c3c91657cbf89">scram::core::Zbdd::products</a></div><div class="ttdeci">const Zbdd &amp; products() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00347">zbdd.h:347</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">scram::core::Bdd::Function</a></div><div class="ttdoc">Holder of computation resultant functions and gate representations. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00696">bdd.h:696</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1TripletHash_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1TripletHash.xhtml">scram::core::TripletHash</a></div><div class="ttdoc">Functor for hashing triplets of ordered numbers. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00112">zbdd.h:112</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ac474673e432b2ea0908b230886f7f6a2"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">scram::core::Zbdd::kEmpty_</a></div><div class="ttdeci">const TerminalPtr kEmpty_</div><div class="ttdoc">Terminal Empty (Null/0) set. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00566">zbdd.h:566</a></div></div>
<div class="ttc" id="bdd_8h_xhtml_a3c1414c7067129c4689c40c7a2dab6de"><div class="ttname"><a href="bdd_8h.xhtml#a3c1414c7067129c4689c40c7a2dab6de">scram::core::IntrusivePtr</a></div><div class="ttdeci">boost::intrusive_ptr&lt; T &gt; IntrusivePtr</div><div class="ttdoc">The default management of BDD vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00045">bdd.h:45</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_a416cd8a033c44198e03e081b10ca88fb"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#a416cd8a033c44198e03e081b10ca88fb">scram::core::SetNode::max_set_order</a></div><div class="ttdeci">void max_set_order(int order)</div><div class="ttdoc">Registers the order of the largest set in the ZBDD represented by this vertex. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00063">zbdd.h:63</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a881275ff480909efdf8ec49c2fdcc3a6"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a881275ff480909efdf8ec49c2fdcc3a6">scram::core::Zbdd::end</a></div><div class="ttdeci">auto end() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00352">zbdd.h:352</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a516f0d2f35ad213399f83fb9ab102561"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">scram::core::Zbdd::GatherModules</a></div><div class="ttdeci">int GatherModules(const VertexPtr &amp;vertex, int current_order, std::map&lt; int, std::pair&lt; bool, int &gt;&gt; *modules) noexcept</div><div class="ttdoc">Traverses ZBDD to find modules and adjusted cut-offs. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00716">zbdd.cc:716</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_1_1const__iterator_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml">scram::core::Zbdd::const_iterator</a></div><div class="ttdoc">Iterator over products in a ZBDD container. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00140">zbdd.h:140</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a9230422e92d086c34f67bcb864bfc8a9"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">scram::core::NonTerminal::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00276">bdd.h:276</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a001ce06da985df4ab7c1e77a37d7b109"><div class="ttname"><a href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">scram::core::Triplet</a></div><div class="ttdeci">std::array&lt; int, 3 &gt; Triplet</div><div class="ttdoc">Triplet of numbers for functions. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00109">zbdd.h:109</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a9387ad9ed66536ba2ea9ad54c37e448c"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a9387ad9ed66536ba2ea9ad54c37e448c">scram::core::Zbdd::base</a></div><div class="ttdeci">bool base() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00365">zbdd.h:365</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml">scram::core::SetNode</a></div><div class="ttdoc">Representation of non-terminal nodes in ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00044">zbdd.h:44</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a335b8ada37f49919670e93dfc8ef307c"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a335b8ada37f49919670e93dfc8ef307c">scram::core::Zbdd::TerminalPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Terminal&lt; SetNode &gt;&gt; TerminalPtr</div><div class="ttdoc">Terminal vertex. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00133">zbdd.h:133</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ac3ac27090b550d973b20bd971c3de9f9"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">scram::core::Zbdd::EliminateComplements</a></div><div class="ttdeci">VertexPtr EliminateComplements(const VertexPtr &amp;vertex, std::unordered_map&lt; int, VertexPtr &gt; *wide_results) noexcept</div><div class="ttdoc">Removes complements of variables from products. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00546">zbdd.cc:546</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aed1eaa96df30e6eaa32e9e51427c9743"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">scram::core::Zbdd::modules</a></div><div class="ttdeci">const std::map&lt; int, std::unique_ptr&lt; Zbdd &gt; &gt; &amp; modules() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00388">zbdd.h:388</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00881">pdag.cc:881</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1zbdd_1_1CutSetContainer_xhtml_a478c89f64731781882b50ec55898900b"><div class="ttname"><a href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a478c89f64731781882b50ec55898900b">scram::core::zbdd::CutSetContainer::GatherModules</a></div><div class="ttdeci">std::map&lt; int, std::pair&lt; bool, int &gt; &gt; GatherModules() noexcept</div><div class="ttdoc">Gathers all module indices in the cut sets. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00980">zbdd.h:980</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a7b184b2ba68a289aae9f3737f1d13b97"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">scram::core::NonTerminal::high</a></div><div class="ttdeci">const VertexPtr &amp; high() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00293">bdd.h:293</a></div></div>
<div class="ttc" id="bdd_8h_xhtml_a2b39509bba3a81b0dc11f6e3acc98e25"><div class="ttname"><a href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">scram::core::ItePtr</a></div><div class="ttdeci">IntrusivePtr&lt; Ite &gt; ItePtr</div><div class="ttdoc">Shared if-then-else vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00370">bdd.h:370</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_1_1const__iterator_xhtml_ab30280dc9792a0c4f7a7775b6b9ac78f"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd_1_1const__iterator.xhtml#ab30280dc9792a0c4f7a7775b6b9ac78f">scram::core::Zbdd::const_iterator::const_iterator</a></div><div class="ttdeci">const_iterator(const Zbdd &amp;zbdd, bool sentinel=false)</div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00270">zbdd.h:270</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_aeeaafd82ae5890a7ec3462c68ffc8628"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">scram::core::NonTerminal::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00267">bdd.h:267</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00817">pdag.cc:817</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a3e6359ba152137912cbafc500c2e6430"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a3e6359ba152137912cbafc500c2e6430">scram::core::Zbdd::Freeze</a></div><div class="ttdeci">void Freeze() noexcept</div><div class="ttdoc">Freezes the graph. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00539">zbdd.h:539</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1zbdd_1_1CutSetContainer_xhtml_a1648d3f24a95302fac2a40e95f743dda"><div class="ttname"><a href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a1648d3f24a95302fac2a40e95f743dda">scram::core::zbdd::CutSetContainer::Minimize</a></div><div class="ttdeci">void Minimize() noexcept</div><div class="ttdoc">Minimizes cut sets in the container. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00975">zbdd.h:975</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ab71281cd644eb442dd2d3ee1c5df56c4"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">scram::core::Zbdd::settings</a></div><div class="ttdeci">const Settings &amp; settings() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00385">zbdd.h:385</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00883">pdag.cc:883</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1TripletHash_xhtml_ac1ee3814d80090309daa8498c576d08c"><div class="ttname"><a href="structscram_1_1core_1_1TripletHash.xhtml#ac1ee3814d80090309daa8498c576d08c">scram::core::TripletHash::operator()</a></div><div class="ttdeci">std::size_t operator()(const Triplet &amp;triplet) const noexcept</div><div class="ttdoc">Operator overload for hashing three ordered numbers. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00118">zbdd.h:118</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1UniqueTable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1UniqueTable.xhtml">scram::core::UniqueTable</a></div><div class="ttdoc">A hash table for keeping BDD reduced. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00396">bdd.h:396</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a8a62276408638914927627187b3ced57"><div class="ttname"><a href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">scram::core::SetNodePtr</a></div><div class="ttdeci">IntrusivePtr&lt; SetNode &gt; SetNodePtr</div><div class="ttdoc">Shared ZBDD set nodes. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00089">zbdd.h:89</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_a687ac81766268cd0094acbfcd7c26af0"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#a687ac81766268cd0094acbfcd7c26af0">scram::core::SetNode::count</a></div><div class="ttdeci">std::int64_t count() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00066">zbdd.h:66</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1zbdd_1_1CutSetContainer_xhtml_a49532388bd9b917f4351f94f728518aa"><div class="ttname"><a href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a49532388bd9b917f4351f94f728518aa">scram::core::zbdd::CutSetContainer::EliminateComplements</a></div><div class="ttdeci">void EliminateComplements() noexcept</div><div class="ttdoc">Eliminates all complements from cut sets. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00961">zbdd.h:961</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_aa2bf4709641f22f80fb9e2577a00fa6a"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#aa2bf4709641f22f80fb9e2577a00fa6a">scram::core::NonTerminal::NonTerminal</a></div><div class="ttdeci">NonTerminal(int index, int order, int id, const VertexPtr &amp;high, const VertexPtr &amp;low)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00255">bdd.h:255</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00260">pdag.h:260</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">scram::core::WeakIntrusivePtr&lt; SetNode &gt;</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_a49180da369439dfa59bed34a53cb081a"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#a49180da369439dfa59bed34a53cb081a">scram::core::SetNode::count</a></div><div class="ttdeci">void count(std::int64_t number)</div><div class="ttdoc">Stores numerical value for later retrieval. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00081">zbdd.h:81</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Vertex_xhtml_acfa7d6caa5bc11bc95cb35012169ab15"><div class="ttname"><a href="classscram_1_1core_1_1Vertex.xhtml#acfa7d6caa5bc11bc95cb35012169ab15">scram::core::Vertex&lt; SetNode &gt;::terminal</a></div><div class="ttdeci">bool terminal() const</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00176">bdd.h:176</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_a9a5012fd0d0152c13f69c25d075065b9"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#a9a5012fd0d0152c13f69c25d075065b9">scram::core::SetNode::minimal</a></div><div class="ttdeci">void minimal(bool flag)</div><div class="ttdoc">Sets the indication of a minimized ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00054">zbdd.h:54</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_adcdd0c5114aa6a1d32a03928adc07c49"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#adcdd0c5114aa6a1d32a03928adc07c49">scram::core::NonTerminal&lt; SetNode &gt;::coherent</a></div><div class="ttdeci">bool coherent() const</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00282">bdd.h:282</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1IntrusivePtrCast_xhtml_af153c12dc6133b7d9f9b7a57bba29f1d"><div class="ttname"><a href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">scram::core::IntrusivePtrCast&lt; SetNode &gt;::Ref</a></div><div class="ttdeci">static SetNode &amp; Ref(const IntrusivePtr&lt; Vertex&lt; SetNode &gt;&gt; &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00067">bdd.h:67</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_af5853746ad388f479a7aa45c5d843466"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">scram::core::NonTerminal&lt; SetNode &gt;::order</a></div><div class="ttdeci">int order() const</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00270">bdd.h:270</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aa9fe9b536749648e0ba973d455c19c93"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aa9fe9b536749648e0ba973d455c19c93">scram::core::Zbdd::begin</a></div><div class="ttdeci">auto begin() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00351">zbdd.h:351</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml">scram::core::Pdag</a></div><div class="ttdoc">PDAG is a propositional directed acyclic graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00780">pdag.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1zbdd_1_1CutSetContainer_xhtml_a1022ad7a4699257a6f0c0809d8f1903d"><div class="ttname"><a href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a1022ad7a4699257a6f0c0809d8f1903d">scram::core::zbdd::CutSetContainer::EliminateConstantModules</a></div><div class="ttdeci">void EliminateConstantModules() noexcept</div><div class="ttdoc">Removes constant modules from cut sets. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00970">zbdd.h:970</a></div></div>
<div class="ttc" id="pdag_8h_xhtml"><div class="ttname"><a href="pdag_8h.xhtml">pdag.h</a></div><div class="ttdoc">Classes and facilities to represent fault trees as PDAGs with event and gate indices instead of ID na...</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
