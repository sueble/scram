<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>numerical.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">numerical.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="numerical_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// A collection of numerical expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// @note The PI value is located in constant expressions.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="constant_8h.xhtml">constant.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">src/expression.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/// Creates a functor out of function pointer to common cmath functions.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">double</span> (*F)(<span class="keywordtype">double</span>)&gt;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Functor.xhtml">   36</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Functor.xhtml">Functor</a> {<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  /// Forwards the call to the wrapped function.</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Functor.xhtml#ab0013767a3e75dc7f222232922e1423c">   38</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="structscram_1_1mef_1_1Functor.xhtml#ab0013767a3e75dc7f222232922e1423c">operator()</a>(<span class="keywordtype">double</span> arg) { <span class="keywordflow">return</span> F(arg); }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;};</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// Expression with a functor wrapping a function.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">double</span> (*F)(<span class="keywordtype">double</span>)&gt;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a5a459c2c80e5c53c6f81efef19f07d92">   43</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;Functor&lt;F&gt;</a>, 1&gt;;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// Creates a functor for functions with two arguments.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">double</span> (*F)(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>)&gt;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Bifunctor.xhtml">   47</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Bifunctor.xhtml">Bifunctor</a> {  <span class="comment">// Nasty abuse of terminology :(. Haskellers will hate this.</span><span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">  /// Forwards the call to the wrapped function.</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Bifunctor.xhtml#aa1b673c2e816198e9830e43abd30a886">   49</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="structscram_1_1mef_1_1Bifunctor.xhtml#aa1b673c2e816198e9830e43abd30a886">operator()</a>(<span class="keywordtype">double</span> arg_one, <span class="keywordtype">double</span> arg_two) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> F(arg_one, arg_two);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/// Expression with a bifunctor wrapping a function.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">double</span> (*F)(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>)&gt;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a07e3874256114af5dbe4b8c9c5af326c">   56</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">BifunctorExpression</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;Bifunctor&lt;F&gt;</a>, 2&gt;;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#af7e465d054e927e109802a577bf1a2cb">   58</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Neg</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;std::negate&lt;&gt;</a>, 1&gt;;  <span class="comment">///&lt; Negation.</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a804ce76c83542eb53d6da4c06cb9c1f0">   59</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Add</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;std::plus&lt;&gt;</a>, -1&gt;;  <span class="comment">///&lt; Sum operation.</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#aa97069a2c920e07990f6f10edbc49e77">   60</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Sub</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;std::minus&lt;&gt;</a>, -1&gt;;  <span class="comment">///&lt; Subtraction from the first.</span></div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a7ae608a3e3a5e95704c103b9925e4c5c">   61</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Mul</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;std::multiplies&lt;&gt;</a>, -1&gt;;  <span class="comment">///&lt; Product.</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a625a191f5089e546a071872fbcf2eed9">   62</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Div</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;std::divides&lt;&gt;</a>, -1&gt;;  <span class="comment">///&lt; Division of the first.</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a79328e01db5a3951cba70eb221ac869e">   63</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Abs</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::abs&gt;</a>;  <span class="comment">///&lt; The absolute value.</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#ad263e38c78f975ec1a8946f4e954ed47">   64</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Acos</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::acos&gt;</a>;  <span class="comment">///&lt; Arc cosine.</span></div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a0a9a53b2d91c007820dc0c4536f2f2ae">   65</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Asin</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::asin&gt;</a>;  <span class="comment">///&lt; Arc sine.</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a9f735336f89f8238f9b7cdec05761276">   66</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Atan</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::atan&gt;</a>;  <span class="comment">///&lt; Arc tangent.</span></div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a3ff7b2f059c0169cdb892c620dc31613">   67</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Cos</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::cos&gt;</a>;  <span class="comment">///&lt; Cosine.</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a2e230bf04444cb8dbf37aa55dee66fb9">   68</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Sin</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::sin&gt;</a>;  <span class="comment">///&lt; Sine.</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#adfc2deab5f3d565487a9172eb46e3b80">   69</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Tan</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::tan&gt;</a>;  <span class="comment">///&lt; Tangent.</span></div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a0c83ea88335abcc87bf57f04760448f0">   70</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Cosh</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::cosh&gt;</a>;  <span class="comment">///&lt; Hyperbolic cosine.</span></div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#abf46d63365c2a7617042bfdc8d2fa990">   71</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Sinh</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::sinh&gt;</a>;  <span class="comment">///&lt; Hyperbolic sine.</span></div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a3c0944be0aa4f6a553bc5072da0758db">   72</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Tanh</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::tanh&gt;</a>;  <span class="comment">///&lt; Hyperbolic tangent.</span></div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a29e02ec7f01721fb70b4f418c7427922">   73</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Exp</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::exp&gt;</a>;  <span class="comment">///&lt; Exponential.</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#af3b350057c8fd2b7e553aefdb40fc8a4">   74</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Log</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::log&gt;</a>;  <span class="comment">///&lt; Natural logarithm.</span></div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a93b551f6095c44bcd103e81fe0f4e7a6">   75</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Log10</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::log10&gt;</a>;  <span class="comment">///&lt; Decimal logarithm.</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#acb7ec0a34f20c551a2b0b94e8e773892">   76</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Mod</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;std::modulus&lt;int&gt;</a>, 2&gt;;  <span class="comment">///&lt; Modulo (%) operation.</span></div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#aba4d83136de297ce76261c42b0ca726a">   77</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Pow</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">BifunctorExpression&lt;&amp;std::pow&gt;</a>;  <span class="comment">///&lt; Base raised to a power.</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a23bd4e9aa922595ef8df4a3cbb566ea9">   78</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Sqrt</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::sqrt&gt;</a>;  <span class="comment">///&lt; Square root.</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a3ea5f6e503f2be363f44c6741707d249">   79</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Ceil</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::ceil&gt;</a>;  <span class="comment">///&lt; Nearest (&gt;=) integer.</span></div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a81ed353f4487f9d0c79353236794cfaa">   80</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Floor</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">FunctorExpression&lt;&amp;std::floor&gt;</a>;  <span class="comment">///&lt; Nearest (&lt;=) integer.</span></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#afc5aeca6ec55b883ba77ea9f2a117aca">   81</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Min</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;Bifunctor&lt;&amp;std::fmin&gt;</a>, -1&gt;;  <span class="comment">///&lt; Minimum value.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="numerical_8h.xhtml#a91037c9334f528bf475a047fa5c47ecf">   82</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Max</a> = <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression&lt;Bifunctor&lt;&amp;std::fmax&gt;</a>, -1&gt;;  <span class="comment">///&lt; Maximum value.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">/// The average of argument expression values.</span></div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mean.xhtml">   85</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Mean.xhtml">Mean</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;Mean&gt; {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// Checks the number of provided arguments upon initialization.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @param[in] args  Arguments of this expression.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  /// @throws ValidityError  The number of arguments is fewer than 2.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Mean.xhtml">Mean</a>(std::vector&lt;Expression*&gt; args);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mean.xhtml#ad94cf687c6332df11d9b3d50e8c66dde">   94</a></span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1Mean.xhtml#ad94cf687c6332df11d9b3d50e8c66dde">interval</a>() noexcept<span class="keyword"> override </span>{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">double</span> min_value = 0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">double</span> max_value = 0;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>()) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> arg_interval = arg-&gt;interval();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      min_value += arg_interval.lower();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      max_value += arg_interval.upper();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    min_value /= <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().size();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    max_value /= <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().size();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> Interval::closed(min_value, max_value);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  /// Computes the expression value with a given argument value extractor.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mean.xhtml#ab75b082938d5f6ed2b7bd2d45c3c850b">  109</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Mean.xhtml#ab75b082938d5f6ed2b7bd2d45c3c850b">Compute</a>(F&amp;&amp; eval) noexcept {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">double</span> sum = 0;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>())</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      sum += eval(arg);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> sum / <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().size();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/// @cond Doxygen_With_Smart_Using_Declaration</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">/// Validation specialization for math functions.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keywordtype">void</span> Div::Validate() <span class="keyword">const</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> Acos::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  assert(args().size() == 1);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <a class="code" href="expression_8cc.xhtml#aa5f8250f3fc162fc8c018bd57c877a0e">EnsureWithin</a>(args().front(), Interval::closed(-1, 1), <span class="stringliteral">&quot;Arc cos&quot;</span>);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> Asin::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  assert(args().size() == 1);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <a class="code" href="expression_8cc.xhtml#aa5f8250f3fc162fc8c018bd57c877a0e">EnsureWithin</a>(args().front(), Interval::closed(-1, 1), <span class="stringliteral">&quot;Arc sin&quot;</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> Log::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  assert(args().size() == 1);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <a class="code" href="expression_8cc.xhtml#a0361a4eda6025e09ca91ec2d1447ad1b">EnsurePositive</a>(args().front(), <span class="stringliteral">&quot;Natural Logarithm&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> Log10::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  assert(args().size() == 1);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <a class="code" href="expression_8cc.xhtml#a0361a4eda6025e09ca91ec2d1447ad1b">EnsurePositive</a>(args().front(), <span class="stringliteral">&quot;Decimal Logarithm&quot;</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">void</span> Mod::Validate() <span class="keyword">const</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keywordtype">void</span> Pow::Validate() <span class="keyword">const</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> Sqrt::Validate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  assert(args().size() == 1);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <a class="code" href="expression_8cc.xhtml#a9b787fed653e7b5a1b6d6ace04643516">EnsureNonNegative</a>(args().front(), <span class="stringliteral">&quot;Square root&quot;</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/// Interval specialization for math functions.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keyword">inline</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> Acos::interval() noexcept {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="keywordflow">return</span> Interval::closed(0, <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#ae70e7705b55883bb393228fbb2835542">ConstantExpression::kPi</a>.value());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">inline</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> Asin::interval() noexcept {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordtype">double</span> half_pi = <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#ae70e7705b55883bb393228fbb2835542">ConstantExpression::kPi</a>.<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#a197f6d6d89864e714e0e7f937fd011f1">value</a>() / 2;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">return</span> Interval::closed(-half_pi, half_pi);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">inline</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> Atan::interval() noexcept {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keywordtype">double</span> half_pi = <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#ae70e7705b55883bb393228fbb2835542">ConstantExpression::kPi</a>.<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#a197f6d6d89864e714e0e7f937fd011f1">value</a>() / 2;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">return</span> Interval::closed(-half_pi, half_pi);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">inline</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> Cos::interval() noexcept {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keywordflow">return</span> Interval::closed(-1, 1);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">inline</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> Sin::interval() noexcept {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordflow">return</span> Interval::closed(-1, 1);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">/// @endcond</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="structscram_1_1mef_1_1Functor_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Functor.xhtml">scram::mef::Functor</a></div><div class="ttdoc">Creates a functor out of function pointer to common cmath functions. </div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00036">numerical.h:36</a></div></div>
<div class="ttc" id="expression_8h_xhtml_afc9530f5ba8d4c2ccf0b40c7422a44c0"><div class="ttname"><a href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">scram::mef::Interval</a></div><div class="ttdeci">boost::icl::continuous_interval&lt; double &gt; Interval</div><div class="ttdoc">Validation domain interval for expression values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00035">expression.h:35</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Bifunctor_xhtml_aa1b673c2e816198e9830e43abd30a886"><div class="ttname"><a href="structscram_1_1mef_1_1Bifunctor.xhtml#aa1b673c2e816198e9830e43abd30a886">scram::mef::Bifunctor::operator()</a></div><div class="ttdeci">double operator()(double arg_one, double arg_two)</div><div class="ttdoc">Forwards the call to the wrapped function. </div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00049">numerical.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00078">expression.h:78</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a0361a4eda6025e09ca91ec2d1447ad1b"><div class="ttname"><a href="expression_8cc.xhtml#a0361a4eda6025e09ca91ec2d1447ad1b">scram::mef::EnsurePositive</a></div><div class="ttdeci">void EnsurePositive(Expression *expression, const std::string &amp;description)</div><div class="ttdoc">Ensures that expression yields positive (&gt; 0) values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00074">expression.cc:74</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_aa5f8250f3fc162fc8c018bd57c877a0e"><div class="ttname"><a href="expression_8cc.xhtml#aa5f8250f3fc162fc8c018bd57c877a0e">scram::mef::EnsureWithin</a></div><div class="ttdeci">void EnsureWithin(Expression *expression, const Interval &amp;interval, const char *type)</div><div class="ttdoc">Ensures that expression values are within the interval. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00091">expression.cc:91</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mean_xhtml_ab75b082938d5f6ed2b7bd2d45c3c850b"><div class="ttname"><a href="classscram_1_1mef_1_1Mean.xhtml#ab75b082938d5f6ed2b7bd2d45c3c850b">scram::mef::Mean::Compute</a></div><div class="ttdeci">double Compute(F &amp;&amp;eval) noexcept</div><div class="ttdoc">Computes the expression value with a given argument value extractor. </div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00109">numerical.h:109</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mean_xhtml_ad94cf687c6332df11d9b3d50e8c66dde"><div class="ttname"><a href="classscram_1_1mef_1_1Mean.xhtml#ad94cf687c6332df11d9b3d50e8c66dde">scram::mef::Mean::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00094">numerical.h:94</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mean_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Mean.xhtml">scram::mef::Mean</a></div><div class="ttdoc">The average of argument expression values. </div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00085">numerical.h:85</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a9b787fed653e7b5a1b6d6ace04643516"><div class="ttname"><a href="expression_8cc.xhtml#a9b787fed653e7b5a1b6d6ace04643516">scram::mef::EnsureNonNegative</a></div><div class="ttdeci">void EnsureNonNegative(Expression *expression, const std::string &amp;description)</div><div class="ttdoc">Ensures that expression yields non-negative (&gt;= 0) values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00082">expression.cc:82</a></div></div>
<div class="ttc" id="constant_8h_xhtml"><div class="ttname"><a href="constant_8h.xhtml">constant.h</a></div><div class="ttdoc">Constant expressions that cannot have uncertainties. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExpressionFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExpressionFormula.xhtml">scram::mef::ExpressionFormula</a></div><div class="ttdoc">CRTP for Expressions with the same formula to evaluate and sample. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00140">expression.h:140</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression.xhtml">scram::mef::NaryExpression</a></div><div class="ttdoc">n-ary expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00163">expression.h:163</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Bifunctor_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Bifunctor.xhtml">scram::mef::Bifunctor</a></div><div class="ttdoc">Creates a functor for functions with two arguments. </div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00047">numerical.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_ae70e7705b55883bb393228fbb2835542"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#ae70e7705b55883bb393228fbb2835542">scram::mef::ConstantExpression::kPi</a></div><div class="ttdeci">static ConstantExpression kPi</div><div class="ttdoc">Constant PI value. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00032">constant.h:32</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_a197f6d6d89864e714e0e7f937fd011f1"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#a197f6d6d89864e714e0e7f937fd011f1">scram::mef::ConstantExpression::value</a></div><div class="ttdeci">double value() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00040">constant.h:40</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Functor_xhtml_ab0013767a3e75dc7f222232922e1423c"><div class="ttname"><a href="structscram_1_1mef_1_1Functor.xhtml#ab0013767a3e75dc7f222232922e1423c">scram::mef::Functor::operator()</a></div><div class="ttdeci">double operator()(double arg)</div><div class="ttdoc">Forwards the call to the wrapped function. </div><div class="ttdef"><b>Definition:</b> <a href="numerical_8h_source.xhtml#l00038">numerical.h:38</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
