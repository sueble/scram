<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>scram::core::Preprocessor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>scram</b></li><li class="navelem"><b>core</b></li><li class="navelem"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml">Preprocessor</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classscram_1_1core_1_1Preprocessor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">scram::core::Preprocessor Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>The class provides main preprocessing operations over a PDAG to simplify the fault tree and to help analysis run more efficiently.  
 <a href="classscram_1_1core_1_1Preprocessor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="preprocessor_8h_source.xhtml">preprocessor.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for scram::core::Preprocessor:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml">DecompositionProcessor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Functor for processing of decomposition setups with common nodes.  <a href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">GateSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of unique gates.  <a href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper struct for algorithms that must make an optimal decision how to merge or factor out common arguments of gates into new gates.  <a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a41db9fe9261126a080c87113223eaf18"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a41db9fe9261126a080c87113223eaf18">Preprocessor</a> (<a class="el" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a> *graph) noexcept</td></tr>
<tr class="memdesc:a41db9fe9261126a080c87113223eaf18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs a preprocessor of a PDAG representing a fault tree.  <a href="#a41db9fe9261126a080c87113223eaf18">More...</a><br /></td></tr>
<tr class="separator:a41db9fe9261126a080c87113223eaf18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ee92284aef510ce01a71c962d50f51c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5ee92284aef510ce01a71c962d50f51c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a5ee92284aef510ce01a71c962d50f51c">operator()</a> () noexcept</td></tr>
<tr class="memdesc:a5ee92284aef510ce01a71c962d50f51c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs the graph preprocessing. <br /></td></tr>
<tr class="separator:a5ee92284aef510ce01a71c962d50f51c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a2b6705e815fa3d02119c405b483766d5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a2b6705e815fa3d02119c405b483766d5">Run</a> () noexcept=0</td></tr>
<tr class="memdesc:a2b6705e815fa3d02119c405b483766d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of unique gates by semantics.  <a href="#a2b6705e815fa3d02119c405b483766d5">More...</a><br /></td></tr>
<tr class="separator:a2b6705e815fa3d02119c405b483766d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44f820b6fe2c23594c818432b33e26a6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a44f820b6fe2c23594c818432b33e26a6">RunPhaseOne</a> () noexcept</td></tr>
<tr class="memdesc:a44f820b6fe2c23594c818432b33e26a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The initial phase of preprocessing.  <a href="#a44f820b6fe2c23594c818432b33e26a6">More...</a><br /></td></tr>
<tr class="separator:a44f820b6fe2c23594c818432b33e26a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d5f89471499508eb9e6c01ea43e0f15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a9d5f89471499508eb9e6c01ea43e0f15">RunPhaseTwo</a> () noexcept</td></tr>
<tr class="memdesc:a9d5f89471499508eb9e6c01ea43e0f15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Preprocessing phase of the original structure of the graph.  <a href="#a9d5f89471499508eb9e6c01ea43e0f15">More...</a><br /></td></tr>
<tr class="separator:a9d5f89471499508eb9e6c01ea43e0f15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf2c66723172a85b2ae87ef2a034cd1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#abf2c66723172a85b2ae87ef2a034cd1f">RunPhaseThree</a> () noexcept</td></tr>
<tr class="memdesc:abf2c66723172a85b2ae87ef2a034cd1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Application of gate normalization.  <a href="#abf2c66723172a85b2ae87ef2a034cd1f">More...</a><br /></td></tr>
<tr class="separator:abf2c66723172a85b2ae87ef2a034cd1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c224938dfba861f061525658bd7b156"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a5c224938dfba861f061525658bd7b156">RunPhaseFour</a> () noexcept</td></tr>
<tr class="memdesc:a5c224938dfba861f061525658bd7b156"><td class="mdescLeft">&#160;</td><td class="mdescRight">Propagation of complements.  <a href="#a5c224938dfba861f061525658bd7b156">More...</a><br /></td></tr>
<tr class="separator:a5c224938dfba861f061525658bd7b156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3569bbcd5e863c750cdfa69115399600"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a3569bbcd5e863c750cdfa69115399600">RunPhaseFive</a> () noexcept</td></tr>
<tr class="memdesc:a3569bbcd5e863c750cdfa69115399600"><td class="mdescLeft">&#160;</td><td class="mdescRight">The final phase that cleans up the graph, and puts the structure of the graph ready for analysis.  <a href="#a3569bbcd5e863c750cdfa69115399600">More...</a><br /></td></tr>
<tr class="separator:a3569bbcd5e863c750cdfa69115399600"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad13e133278ea7563c1ba037c05c35aa2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ad13e133278ea7563c1ba037c05c35aa2">NormalizeGates</a> (bool full) noexcept</td></tr>
<tr class="memdesc:ad13e133278ea7563c1ba037c05c35aa2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes the gates of the whole PDAG into OR, AND gates.  <a href="#ad13e133278ea7563c1ba037c05c35aa2">More...</a><br /></td></tr>
<tr class="separator:ad13e133278ea7563c1ba037c05c35aa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ee8f65454835d8de931a2d38bf8b276"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a6ee8f65454835d8de931a2d38bf8b276">NotifyParentsOfNegativeGates</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:a6ee8f65454835d8de931a2d38bf8b276"><td class="mdescLeft">&#160;</td><td class="mdescRight">Notifies all parents of negative gates, such as NOT, NOR, and NAND, before transforming these gates into basic gates of OR and AND.  <a href="#a6ee8f65454835d8de931a2d38bf8b276">More...</a><br /></td></tr>
<tr class="separator:a6ee8f65454835d8de931a2d38bf8b276"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfe2eda90c983750e28db49900a4909d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#abfe2eda90c983750e28db49900a4909d">NormalizeGate</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, bool full) noexcept</td></tr>
<tr class="memdesc:abfe2eda90c983750e28db49900a4909d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes complex gates into OR, AND gates.  <a href="#abfe2eda90c983750e28db49900a4909d">More...</a><br /></td></tr>
<tr class="separator:abfe2eda90c983750e28db49900a4909d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45cf08c3809e801be50eda53dd68fca6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a45cf08c3809e801be50eda53dd68fca6">NormalizeXorGate</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:a45cf08c3809e801be50eda53dd68fca6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes a gate with XOR logic.  <a href="#a45cf08c3809e801be50eda53dd68fca6">More...</a><br /></td></tr>
<tr class="separator:a45cf08c3809e801be50eda53dd68fca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b5719bcfcfd1678928befe31d9b729"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a56b5719bcfcfd1678928befe31d9b729">NormalizeVoteGate</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:a56b5719bcfcfd1678928befe31d9b729"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes a VOTE gate with a vote number.  <a href="#a56b5719bcfcfd1678928befe31d9b729">More...</a><br /></td></tr>
<tr class="separator:a56b5719bcfcfd1678928befe31d9b729"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff25812178063fd0f9bfd9a87cebb5af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aff25812178063fd0f9bfd9a87cebb5af">PropagateComplements</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, bool keep_modules, std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *complements) noexcept</td></tr>
<tr class="memdesc:aff25812178063fd0f9bfd9a87cebb5af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Propagates complements of argument gates down to leafs according to the De Morgan's law in order to remove any negative logic from the graph's gates.  <a href="#aff25812178063fd0f9bfd9a87cebb5af">More...</a><br /></td></tr>
<tr class="separator:aff25812178063fd0f9bfd9a87cebb5af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00288bef180767d7c79e3c79a33ef2d8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a00288bef180767d7c79e3c79a33ef2d8">CoalesceGates</a> (bool common) noexcept</td></tr>
<tr class="memdesc:a00288bef180767d7c79e3c79a33ef2d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Runs gate coalescence on the whole PDAG.  <a href="#a00288bef180767d7c79e3c79a33ef2d8">More...</a><br /></td></tr>
<tr class="separator:a00288bef180767d7c79e3c79a33ef2d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a0500bd52152df42fca486c97043140"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a3a0500bd52152df42fca486c97043140">CoalesceGates</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, bool common) noexcept</td></tr>
<tr class="memdesc:a3a0500bd52152df42fca486c97043140"><td class="mdescLeft">&#160;</td><td class="mdescRight">Coalesces positive argument gates with the same OR or AND logic as parents.  <a href="#a3a0500bd52152df42fca486c97043140">More...</a><br /></td></tr>
<tr class="separator:a3a0500bd52152df42fca486c97043140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0abd7f5b54f98643644110b160569bd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ac0abd7f5b54f98643644110b160569bd">ProcessMultipleDefinitions</a> () noexcept</td></tr>
<tr class="memdesc:ac0abd7f5b54f98643644110b160569bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects and replaces multiple definitions of gates.  <a href="#ac0abd7f5b54f98643644110b160569bd">More...</a><br /></td></tr>
<tr class="separator:ac0abd7f5b54f98643644110b160569bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0bdf196274427420631bc20f95cb72a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ae0bdf196274427420631bc20f95cb72a">DetectMultipleDefinitions</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, std::unordered_map&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>, std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt;&gt; *multi_def, <a class="el" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">GateSet</a> *unique_gates) noexcept</td></tr>
<tr class="memdesc:ae0bdf196274427420631bc20f95cb72a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Traverses the PDAG to collect multiple definitions of gates.  <a href="#ae0bdf196274427420631bc20f95cb72a">More...</a><br /></td></tr>
<tr class="separator:ae0bdf196274427420631bc20f95cb72a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9856913eee7b854abfbe8d8330566d3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aa9856913eee7b854abfbe8d8330566d3">DetectModules</a> () noexcept</td></tr>
<tr class="memdesc:aa9856913eee7b854abfbe8d8330566d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Traverses the PDAG to detect modules.  <a href="#aa9856913eee7b854abfbe8d8330566d3">More...</a><br /></td></tr>
<tr class="separator:aa9856913eee7b854abfbe8d8330566d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac83a0afe1f22761907f2a017abd96268"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ac83a0afe1f22761907f2a017abd96268">AssignTiming</a> (int time, const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:ac83a0afe1f22761907f2a017abd96268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Traverses the given gate and assigns time of visit to nodes.  <a href="#ac83a0afe1f22761907f2a017abd96268">More...</a><br /></td></tr>
<tr class="separator:ac83a0afe1f22761907f2a017abd96268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbce0b5c45a445c3b70ae298b9518281"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#afbce0b5c45a445c3b70ae298b9518281">FindModules</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:afbce0b5c45a445c3b70ae298b9518281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines modules from original gates that have been already timed.  <a href="#afbce0b5c45a445c3b70ae298b9518281">More...</a><br /></td></tr>
<tr class="separator:afbce0b5c45a445c3b70ae298b9518281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e97ffcda9c98ffc5aff93214f827c18"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a4e97ffcda9c98ffc5aff93214f827c18">ProcessModularArgs</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, const std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; &amp;non_shared_args, std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *modular_args, std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *non_modular_args) noexcept</td></tr>
<tr class="memdesc:a4e97ffcda9c98ffc5aff93214f827c18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes gate arguments found during the module detection.  <a href="#a4e97ffcda9c98ffc5aff93214f827c18">More...</a><br /></td></tr>
<tr class="separator:a4e97ffcda9c98ffc5aff93214f827c18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a434534b6a7c3fccc82c073e6aced90b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a434534b6a7c3fccc82c073e6aced90b1">CreateNewModule</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, const std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; &amp;args) noexcept</td></tr>
<tr class="memdesc:a434534b6a7c3fccc82c073e6aced90b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new module as an argument of an existing gate if the logic of the existing parent gate allows a sub-module.  <a href="#a434534b6a7c3fccc82c073e6aced90b1">More...</a><br /></td></tr>
<tr class="separator:a434534b6a7c3fccc82c073e6aced90b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa65bdffb78291a0e41a34d34bf3fa198"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aa65bdffb78291a0e41a34d34bf3fa198">FilterModularArgs</a> (std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *modular_args, std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *non_modular_args) noexcept</td></tr>
<tr class="memdesc:aa65bdffb78291a0e41a34d34bf3fa198"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if a group of modular arguments share anything with non-modular arguments.  <a href="#aa65bdffb78291a0e41a34d34bf3fa198">More...</a><br /></td></tr>
<tr class="separator:aa65bdffb78291a0e41a34d34bf3fa198"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c10e807e558b06a1573c08ed13e205e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a5c10e807e558b06a1573c08ed13e205e">GroupModularArgs</a> (std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *modular_args, std::vector&lt; std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt;&gt; *groups) noexcept</td></tr>
<tr class="memdesc:a5c10e807e558b06a1573c08ed13e205e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Groups modular arguments by their common elements.  <a href="#a5c10e807e558b06a1573c08ed13e205e">More...</a><br /></td></tr>
<tr class="separator:a5c10e807e558b06a1573c08ed13e205e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affe78b1e830afb73585affe0ada477be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#affe78b1e830afb73585affe0ada477be">CreateNewModules</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, const std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; &amp;modular_args, const std::vector&lt; std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt;&gt; &amp;groups) noexcept</td></tr>
<tr class="memdesc:affe78b1e830afb73585affe0ada477be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates new module gates from groups of modular arguments if the logic of the parent gate allows sub-modules.  <a href="#affe78b1e830afb73585affe0ada477be">More...</a><br /></td></tr>
<tr class="separator:affe78b1e830afb73585affe0ada477be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4dae5abf76e5da8b8c9f4371550b7dc"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#af4dae5abf76e5da8b8c9f4371550b7dc">GatherModules</a> () noexcept</td></tr>
<tr class="memdesc:af4dae5abf76e5da8b8c9f4371550b7dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers all modules in the PDAG.  <a href="#af4dae5abf76e5da8b8c9f4371550b7dc">More...</a><br /></td></tr>
<tr class="separator:af4dae5abf76e5da8b8c9f4371550b7dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab97a52e27ad8bf7ed049ae1a764f8fba"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ab97a52e27ad8bf7ed049ae1a764f8fba">MergeCommonArgs</a> () noexcept</td></tr>
<tr class="memdesc:ab97a52e27ad8bf7ed049ae1a764f8fba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifies common arguments of gates, and merges the common arguments into new gates.  <a href="#ab97a52e27ad8bf7ed049ae1a764f8fba">More...</a><br /></td></tr>
<tr class="separator:ab97a52e27ad8bf7ed049ae1a764f8fba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a651b32816243e37c58b7835220997ef2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a651b32816243e37c58b7835220997ef2">MergeCommonArgs</a> (<a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="el" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>) noexcept</td></tr>
<tr class="memdesc:a651b32816243e37c58b7835220997ef2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Merges common arguments for a specific group of gates.  <a href="#a651b32816243e37c58b7835220997ef2">More...</a><br /></td></tr>
<tr class="separator:a651b32816243e37c58b7835220997ef2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13778626bd9ce007e01b7bbd8d11e850"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a13778626bd9ce007e01b7bbd8d11e850">MarkCommonArgs</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, <a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="el" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>) noexcept</td></tr>
<tr class="memdesc:a13778626bd9ce007e01b7bbd8d11e850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks common arguments of gates with a specific operator.  <a href="#a13778626bd9ce007e01b7bbd8d11e850">More...</a><br /></td></tr>
<tr class="separator:a13778626bd9ce007e01b7bbd8d11e850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef197badfb47bb3c604fd93d6260e635"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aef197badfb47bb3c604fd93d6260e635">GatherCommonArgs</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, <a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="el" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>, <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> *group) noexcept</td></tr>
<tr class="memdesc:aef197badfb47bb3c604fd93d6260e635"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers common arguments of the gates in the group of a specific operator.  <a href="#aef197badfb47bb3c604fd93d6260e635">More...</a><br /></td></tr>
<tr class="separator:aef197badfb47bb3c604fd93d6260e635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba011f495cdec8449a315c17fe67a8c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aba011f495cdec8449a315c17fe67a8c0">FilterMergeCandidates</a> (<a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> *candidates) noexcept</td></tr>
<tr class="memdesc:aba011f495cdec8449a315c17fe67a8c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filters merge candidates and their shared arguments to detect opportunities for simplifications like gate substitutions.  <a href="#aba011f495cdec8449a315c17fe67a8c0">More...</a><br /></td></tr>
<tr class="separator:aba011f495cdec8449a315c17fe67a8c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adabd895d60a8ee0950f75da9a98fa155"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#adabd895d60a8ee0950f75da9a98fa155">GroupCandidatesByArgs</a> (<a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> *candidates, std::vector&lt; <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> &gt; *groups) noexcept</td></tr>
<tr class="memdesc:adabd895d60a8ee0950f75da9a98fa155"><td class="mdescLeft">&#160;</td><td class="mdescRight">Groups candidates with common arguments.  <a href="#adabd895d60a8ee0950f75da9a98fa155">More...</a><br /></td></tr>
<tr class="separator:adabd895d60a8ee0950f75da9a98fa155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9b5fba2247a02afe6cf480a405b6ca0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#af9b5fba2247a02afe6cf480a405b6ca0">GroupCommonParents</a> (int num_common_args, const <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> &amp;group, <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> *parents) noexcept</td></tr>
<tr class="memdesc:af9b5fba2247a02afe6cf480a405b6ca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds intersections of common arguments of gates.  <a href="#af9b5fba2247a02afe6cf480a405b6ca0">More...</a><br /></td></tr>
<tr class="separator:af9b5fba2247a02afe6cf480a405b6ca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f35278c0542722dc42cc74358522a64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a4f35278c0542722dc42cc74358522a64">GroupCommonArgs</a> (const <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> &amp;options, <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a> *table) noexcept</td></tr>
<tr class="memdesc:a4f35278c0542722dc42cc74358522a64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Groups common args for merging.  <a href="#a4f35278c0542722dc42cc74358522a64">More...</a><br /></td></tr>
<tr class="separator:a4f35278c0542722dc42cc74358522a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c51e098f0ff45be068f68296323f45f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a3c51e098f0ff45be068f68296323f45f">FindOptionGroup</a> (<a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *all_options, <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">MergeTable::OptionGroup</a> *best_group) noexcept</td></tr>
<tr class="memdesc:a3c51e098f0ff45be068f68296323f45f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds an optimal way of grouping options.  <a href="#a3c51e098f0ff45be068f68296323f45f">More...</a><br /></td></tr>
<tr class="separator:a3c51e098f0ff45be068f68296323f45f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbaee2a993e0538280dc437d0a3b849f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#adbaee2a993e0538280dc437d0a3b849f">FindBaseOption</a> (<a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *all_options, MergeTable::MergeGroup::iterator *best_option) noexcept</td></tr>
<tr class="memdesc:adbaee2a993e0538280dc437d0a3b849f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds the starting option for group formation.  <a href="#adbaee2a993e0538280dc437d0a3b849f">More...</a><br /></td></tr>
<tr class="separator:adbaee2a993e0538280dc437d0a3b849f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf534fb9d9510d712a78cb5d27572ec1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#acf534fb9d9510d712a78cb5d27572ec1">TransformCommonArgs</a> (<a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *group) noexcept</td></tr>
<tr class="memdesc:acf534fb9d9510d712a78cb5d27572ec1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms common arguments of gates into new gates.  <a href="#acf534fb9d9510d712a78cb5d27572ec1">More...</a><br /></td></tr>
<tr class="separator:acf534fb9d9510d712a78cb5d27572ec1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4737f354474154b3cea9773c25616d27"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a4737f354474154b3cea9773c25616d27">DetectDistributivity</a> () noexcept</td></tr>
<tr class="memdesc:a4737f354474154b3cea9773c25616d27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects and manipulates AND and OR gate distributivity for the whole graph.  <a href="#a4737f354474154b3cea9773c25616d27">More...</a><br /></td></tr>
<tr class="separator:a4737f354474154b3cea9773c25616d27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79fe8e90f0e8fbc20a76610aaf09fe6e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a79fe8e90f0e8fbc20a76610aaf09fe6e">DetectDistributivity</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:a79fe8e90f0e8fbc20a76610aaf09fe6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects and manipulates AND and OR gate distributivity.  <a href="#a79fe8e90f0e8fbc20a76610aaf09fe6e">More...</a><br /></td></tr>
<tr class="separator:a79fe8e90f0e8fbc20a76610aaf09fe6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b29173b8f6d18031d7a8cacbac15ce1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a4b29173b8f6d18031d7a8cacbac15ce1">HandleDistributiveArgs</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, <a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> distr_type, std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *candidates) noexcept</td></tr>
<tr class="memdesc:a4b29173b8f6d18031d7a8cacbac15ce1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manipulates gates with distributive arguments.  <a href="#a4b29173b8f6d18031d7a8cacbac15ce1">More...</a><br /></td></tr>
<tr class="separator:a4b29173b8f6d18031d7a8cacbac15ce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29d3775965ee487d000591739fdbaa4b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a29d3775965ee487d000591739fdbaa4b">FilterDistributiveArgs</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *candidates) noexcept</td></tr>
<tr class="memdesc:a29d3775965ee487d000591739fdbaa4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects relationships between the gate and its distributive arguments to remove unnecessary candidates.  <a href="#a29d3775965ee487d000591739fdbaa4b">More...</a><br /></td></tr>
<tr class="separator:a29d3775965ee487d000591739fdbaa4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51340a3bcfa9785e430bab27ee08bbbf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a51340a3bcfa9785e430bab27ee08bbbf">GroupDistributiveArgs</a> (const <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> &amp;options, <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a> *table) noexcept</td></tr>
<tr class="memdesc:a51340a3bcfa9785e430bab27ee08bbbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Groups distributive gate arguments for future factorization.  <a href="#a51340a3bcfa9785e430bab27ee08bbbf">More...</a><br /></td></tr>
<tr class="separator:a51340a3bcfa9785e430bab27ee08bbbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2557ab80c04d7f91372992edfbedd93a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a2557ab80c04d7f91372992edfbedd93a">TransformDistributiveArgs</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, <a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> distr_type, <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *group) noexcept</td></tr>
<tr class="memdesc:a2557ab80c04d7f91372992edfbedd93a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms distributive of arguments gates into a new subgraph.  <a href="#a2557ab80c04d7f91372992edfbedd93a">More...</a><br /></td></tr>
<tr class="separator:a2557ab80c04d7f91372992edfbedd93a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc709ad2e097c24e837889a6a9e4696"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aebc709ad2e097c24e837889a6a9e4696">BooleanOptimization</a> () noexcept</td></tr>
<tr class="memdesc:aebc709ad2e097c24e837889a6a9e4696"><td class="mdescLeft">&#160;</td><td class="mdescRight">Propagates failures of common nodes to detect redundancy.  <a href="#aebc709ad2e097c24e837889a6a9e4696">More...</a><br /></td></tr>
<tr class="separator:aebc709ad2e097c24e837889a6a9e4696"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a394fb1b5b5f9ee31dc81ad8d64353ee3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a394fb1b5b5f9ee31dc81ad8d64353ee3">GatherCommonNodes</a> (std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *common_gates, std::vector&lt; std::weak_ptr&lt; <a class="el" href="classscram_1_1core_1_1Variable.xhtml">Variable</a> &gt;&gt; *common_variables) noexcept</td></tr>
<tr class="memdesc:a394fb1b5b5f9ee31dc81ad8d64353ee3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Traverses the graph to find nodes that have more than one parent.  <a href="#a394fb1b5b5f9ee31dc81ad8d64353ee3">More...</a><br /></td></tr>
<tr class="separator:a394fb1b5b5f9ee31dc81ad8d64353ee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4086c57695d49b4770915d5d53bd47de"><td class="memTemplParams" colspan="2">template&lt;class N &gt; </td></tr>
<tr class="memitem:a4086c57695d49b4770915d5d53bd47de"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a4086c57695d49b4770915d5d53bd47de">ProcessCommonNode</a> (const std::weak_ptr&lt; N &gt; &amp;common_node) noexcept</td></tr>
<tr class="memdesc:a4086c57695d49b4770915d5d53bd47de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to simplify the graph by removing redundancies generated by a common node.  <a href="#a4086c57695d49b4770915d5d53bd47de">More...</a><br /></td></tr>
<tr class="separator:a4086c57695d49b4770915d5d53bd47de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b83bc14261cee28f0e1553222b7d5e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a3b83bc14261cee28f0e1553222b7d5e5">MarkAncestors</a> (const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;node, <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> *module) noexcept</td></tr>
<tr class="memdesc:a3b83bc14261cee28f0e1553222b7d5e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks ancestor gates true.  <a href="#a3b83bc14261cee28f0e1553222b7d5e5">More...</a><br /></td></tr>
<tr class="separator:a3b83bc14261cee28f0e1553222b7d5e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a8bac98061d7f82633486ed6a36861"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ae9a8bac98061d7f82633486ed6a36861">PropagateState</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;node) noexcept</td></tr>
<tr class="memdesc:ae9a8bac98061d7f82633486ed6a36861"><td class="mdescLeft">&#160;</td><td class="mdescRight">Propagates failure or success of a common node by setting its ancestors' optimization values to 1 or -1 if they fail or succeed according to their Boolean logic.  <a href="#ae9a8bac98061d7f82633486ed6a36861">More...</a><br /></td></tr>
<tr class="separator:ae9a8bac98061d7f82633486ed6a36861"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a019e679ad9077caac8c48253d42647ff"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a019e679ad9077caac8c48253d42647ff">DetermineGateState</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, int num_failure, int num_success) noexcept</td></tr>
<tr class="memdesc:a019e679ad9077caac8c48253d42647ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if a gate fails or succeeds due to failed/succeeded arguments.  <a href="#a019e679ad9077caac8c48253d42647ff">More...</a><br /></td></tr>
<tr class="separator:a019e679ad9077caac8c48253d42647ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4539f18d3dde97514ca267b41d30d220"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a4539f18d3dde97514ca267b41d30d220">CollectStateDestinations</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, int index, std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *destinations) noexcept</td></tr>
<tr class="memdesc:a4539f18d3dde97514ca267b41d30d220"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collects failure or success destinations and marks non-redundant nodes.  <a href="#a4539f18d3dde97514ca267b41d30d220">More...</a><br /></td></tr>
<tr class="separator:a4539f18d3dde97514ca267b41d30d220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad79145fdd5487ef0537728f74e6a94e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ad79145fdd5487ef0537728f74e6a94e4">CollectRedundantParents</a> (const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;node, std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *destinations, std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *redundant_parents) noexcept</td></tr>
<tr class="memdesc:ad79145fdd5487ef0537728f74e6a94e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects if parents of a node are redundant.  <a href="#ad79145fdd5487ef0537728f74e6a94e4">More...</a><br /></td></tr>
<tr class="separator:ad79145fdd5487ef0537728f74e6a94e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6edfe2a6d9836942944921a8de0c011e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a6edfe2a6d9836942944921a8de0c011e">ProcessRedundantParents</a> (const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;node, const std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; &amp;redundant_parents) noexcept</td></tr>
<tr class="memdesc:a6edfe2a6d9836942944921a8de0c011e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects if parents of a node are redundant.  <a href="#a6edfe2a6d9836942944921a8de0c011e">More...</a><br /></td></tr>
<tr class="separator:a6edfe2a6d9836942944921a8de0c011e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa42b66bb888f665bc68324cca15452ad"><td class="memTemplParams" colspan="2">template&lt;class N &gt; </td></tr>
<tr class="memitem:aa42b66bb888f665bc68324cca15452ad"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#aa42b66bb888f665bc68324cca15452ad">ProcessStateDestinations</a> (const std::shared_ptr&lt; N &gt; &amp;node, const std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; &amp;destinations) noexcept</td></tr>
<tr class="memdesc:aa42b66bb888f665bc68324cca15452ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transforms failure or success destination according to the logic and the common node.  <a href="#aa42b66bb888f665bc68324cca15452ad">More...</a><br /></td></tr>
<tr class="separator:aa42b66bb888f665bc68324cca15452ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eb477e9ecd0552b2b554d7df56df652"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a5eb477e9ecd0552b2b554d7df56df652">ClearStateMarks</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:a5eb477e9ecd0552b2b554d7df56df652"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears all the ancestor marks used in Boolean optimization steps.  <a href="#a5eb477e9ecd0552b2b554d7df56df652">More...</a><br /></td></tr>
<tr class="separator:a5eb477e9ecd0552b2b554d7df56df652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae12f3096132d7f6e9daa779724255f7e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ae12f3096132d7f6e9daa779724255f7e">DecomposeCommonNodes</a> () noexcept</td></tr>
<tr class="memdesc:ae12f3096132d7f6e9daa779724255f7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Shannon decomposition for common nodes in the PDAG.  <a href="#ae12f3096132d7f6e9daa779724255f7e">More...</a><br /></td></tr>
<tr class="separator:ae12f3096132d7f6e9daa779724255f7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26434bec1bc5a496f80c9cbad1ed3a62"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a26434bec1bc5a496f80c9cbad1ed3a62">ReplaceGate</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;replacement) noexcept</td></tr>
<tr class="memdesc:a26434bec1bc5a496f80c9cbad1ed3a62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces one gate in the graph with another.  <a href="#a26434bec1bc5a496f80c9cbad1ed3a62">More...</a><br /></td></tr>
<tr class="separator:a26434bec1bc5a496f80c9cbad1ed3a62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c6e290b05a37759627487a6e028b1ca"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a1c6e290b05a37759627487a6e028b1ca">RegisterToClear</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate) noexcept</td></tr>
<tr class="memdesc:a1c6e290b05a37759627487a6e028b1ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers mutated gates for potential deletion later.  <a href="#a1c6e290b05a37759627487a6e028b1ca">More...</a><br /></td></tr>
<tr class="separator:a1c6e290b05a37759627487a6e028b1ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa7788f0a789a43a8bd1bb7ee8a5e22"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a3fa7788f0a789a43a8bd1bb7ee8a5e22">GatherNodes</a> (std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *<a class="el" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, std::vector&lt; <a class="el" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a> &gt; *<a class="el" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>) noexcept</td></tr>
<tr class="memdesc:a3fa7788f0a789a43a8bd1bb7ee8a5e22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers all nodes in the PDAG.  <a href="#a3fa7788f0a789a43a8bd1bb7ee8a5e22">More...</a><br /></td></tr>
<tr class="separator:a3fa7788f0a789a43a8bd1bb7ee8a5e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9caf4677a024ed935d831210b57b8ed9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a9caf4677a024ed935d831210b57b8ed9">GatherNodes</a> (const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;gate, std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *<a class="el" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, std::vector&lt; <a class="el" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a> &gt; *<a class="el" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>) noexcept</td></tr>
<tr class="memdesc:a9caf4677a024ed935d831210b57b8ed9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers nodes in the sub-graph.  <a href="#a9caf4677a024ed935d831210b57b8ed9">More...</a><br /></td></tr>
<tr class="separator:a9caf4677a024ed935d831210b57b8ed9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a0786b7068cd15b0ffd76a71e33e898e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#a0786b7068cd15b0ffd76a71e33e898e6">graph_</a></td></tr>
<tr class="memdesc:a0786b7068cd15b0ffd76a71e33e898e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The PDAG to preprocess.  <a href="#a0786b7068cd15b0ffd76a71e33e898e6">More...</a><br /></td></tr>
<tr class="separator:a0786b7068cd15b0ffd76a71e33e898e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The class provides main preprocessing operations over a PDAG to simplify the fault tree and to help analysis run more efficiently. </p>

<p>Definition at line <a class="el" href="preprocessor_8h_source.xhtml#l00089">89</a> of file <a class="el" href="preprocessor_8h_source.xhtml">preprocessor.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a41db9fe9261126a080c87113223eaf18"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">scram::core::Preprocessor::Preprocessor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a> *&#160;</td>
          <td class="paramname"><em>graph</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs a preprocessor of a PDAG representing a fault tree. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">graph</td><td>The PDAG to be preprocessed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>There should not be another shared pointer to the root gate outside of the passed PDAG. Upon preprocessing a new root gate may be assigned to the graph, and, if there is an extra pointer to the previous top gate outside of the graph, the destructor will not be called as expected by the preprocessing algorithms, which will mess the new structure of the PDAG. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00170">170</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a2b6705e815fa3d02119c405b483766d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::Run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Container of unique gates by semantics. </p>
<p>Runs the default preprocessing that achieves the graph in a normal form. </p>

<p>Implemented in <a class="el" href="classscram_1_1core_1_1CustomPreprocessor_3_01Zbdd_01_4.xhtml#a5185075f852c647c7aa4313d23420ee5">scram::core::CustomPreprocessor&lt; Zbdd &gt;</a>.</p>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00177">177</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>Referenced by <a class="el" href="preprocessor_8cc_source.xhtml#l02352">GatherNodes()</a>, and <a class="el" href="preprocessor_8cc_source.xhtml#l02374">scram::core::CustomPreprocessor&lt; Zbdd &gt;::Run()</a>.</p>

<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor_a2b6705e815fa3d02119c405b483766d5_icgraph.svg" width="520" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a44f820b6fe2c23594c818432b33e26a6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::RunPhaseOne </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The initial phase of preprocessing. </p>
<p>The most basic cleanup algorithms are applied. The cleanup should benefit all other phases and algorithms.</p>
<dl class="section note"><dt>Note</dt><dd>The constants or house events in the graph are cleaned. Any constant state gates must be removed by the future preprocessing algorithms as they introduce these constant state gates. </dd>
<dd>
NULL type (pass-through) gates are processed. Any NULL type gates must be processed and removed by the future preprocessing algorithms as they introduce these NULL type gates.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>This phase also runs partial normalization of gates; however, the preprocessing algorithms should not rely on this. If the partial normalization messes some significant algorithm, it may be removed from this phase in future. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00320">320</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00079">scram::DEBUG2</a>, <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="preprocessor_8cc_source.xhtml#l00311">SANITY_ASSERT</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a9d5f89471499508eb9e6c01ea43e0f15"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::RunPhaseTwo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Preprocessing phase of the original structure of the graph. </p>
<p>This phase attempts to leverage the existing information from the structure of the graph to maximize the optimization and to make the preprocessing techniques efficient.</p>
<dl class="section note"><dt>Note</dt><dd>Multiple definitions of gates are detected and processed. </dd>
<dd>
Modules are detected and created. </dd>
<dd>
Non-module and non-multiple gates are coalesced. </dd>
<dd>
Boolean optimization is applied. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00335">335</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00079">scram::DEBUG2</a>, <a class="el" href="preprocessor_8cc_source.xhtml#l00311">SANITY_ASSERT</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="abf2c66723172a85b2ae87ef2a034cd1f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::RunPhaseThree </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Application of gate normalization. </p>
<p>After this phase, the graph is in normal form.</p>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> normalization is conducted. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00363">363</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00079">scram::DEBUG2</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, <a class="el" href="preprocessor_8cc_source.xhtml#l00311">SANITY_ASSERT</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a5c224938dfba861f061525658bd7b156"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::RunPhaseFour </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Propagation of complements. </p>
<p>Complements are propagated down to the variables in the graph. After this phase, the graph is in negation normal form.</p>
<dl class="section note"><dt>Note</dt><dd>Complements are propagated to the variables of the graph. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00377">377</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00079">scram::DEBUG2</a>, <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, <a class="el" href="preprocessor_8cc_source.xhtml#l00311">SANITY_ASSERT</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a3569bbcd5e863c750cdfa69115399600"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::RunPhaseFive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The final phase that cleans up the graph, and puts the structure of the graph ready for analysis. </p>
<p>This phase makes the graph structure alternating AND/OR gate layers. </p>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00404">404</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00079">scram::DEBUG2</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, <a class="el" href="preprocessor_8cc_source.xhtml#l00311">SANITY_ASSERT</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="ad13e133278ea7563c1ba037c05c35aa2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::NormalizeGates </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>full</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Normalizes the gates of the whole PDAG into OR, AND gates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">full</td><td>A flag to handle complex gates like XOR and K/N, which generate a lot more new gates and make the structure of the graph more complex.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The negation of the top gate is saved and handled as a special case for negation propagation because it does not have a parent. </dd>
<dd>
New gates are created only upon full normalization of complex gates like XOR and K/N. </dd>
<dd>
The full normalization is meant to be called only once.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>The root get may still be NULL type. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> ordering may be used for full normalization. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> visit information is used. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00480">480</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a6ee8f65454835d8de931a2d38bf8b276"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::NotifyParentsOfNegativeGates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Notifies all parents of negative gates, such as NOT, NOR, and NAND, before transforming these gates into basic gates of OR and AND. </p>
<p>The argument gates are swapped with a negative sign.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The gate to start processing.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This function is a helper function for <a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ad13e133278ea7563c1ba037c05c35aa2" title="Normalizes the gates of the whole PDAG into OR, AND gates. ">NormalizeGates()</a>.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks must be clear. </dd>
<dd>
This function does not change the types of gates. </dd>
<dd>
The root gate does not have parents, so it is not handled here. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00511">511</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="abfe2eda90c983750e28db49900a4909d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::NormalizeGate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>full</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Normalizes complex gates into OR, AND gates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate to be processed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">full</td><td>A flag to handle complex gates like XOR and K/N.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This is a helper function for <a class="el" href="classscram_1_1core_1_1Preprocessor.xhtml#ad13e133278ea7563c1ba037c05c35aa2" title="Normalizes the gates of the whole PDAG into OR, AND gates. ">NormalizeGates()</a>.</dd>
<dd>
This function registers NULL type gates for future removal.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks must be clear. </dd>
<dd>
The parents of negative gates are assumed to be notified about the change of their arguments' types. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00521">521</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a45cf08c3809e801be50eda53dd68fca6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::NormalizeXorGate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Normalizes a gate with XOR logic. </p>
<p>This is a helper function for the main gate normalization function.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate to normalize.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>This is a helper function for NormalizeGate. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00562">562</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a56b5719bcfcfd1678928befe31d9b729"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::NormalizeVoteGate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Normalizes a VOTE gate with a vote number. </p>
<p>The gate is turned into an OR gate of recursively normalized VOTE and AND arg gates according to the formula K/N(x, y_i) = OR(AND(x, K-1/N-1(y_i)), K/N-1(y_i))) with y_i being the rest of formula arguments, which exclude x. This representation is more friendly to other preprocessing and analysis techniques than the alternative, which is OR of AND gates of combinations. Normalization of K/N gates is aware of variable ordering.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The VOTE gate to normalize.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd><a class="el" href="classscram_1_1core_1_1Variable.xhtml" title="Boolean variables in a Boolean formula or graph. ">Variable</a> ordering is assigned to arguments. </dd>
<dd>
This helper function is called from NormalizeGate. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00585">585</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="aff25812178063fd0f9bfd9a87cebb5af"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::PropagateComplements </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep_modules</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>complements</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Propagates complements of argument gates down to leafs according to the De Morgan's law in order to remove any negative logic from the graph's gates. </p>
<p>The resulting graph will contain only positive gates, OR and AND types. After this function, the PDAG is in negation normal form.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The starting gate to traverse the graph. This is for recursive purposes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keep_modules</td><td>A flag to NOT propagate complements to modules. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">complements</td><td>The processed complements of shared gates.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The graph must be normalized. It must contain only OR and AND gates.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks must be clear. </dd>
<dd>
If the root gate has a negative sign, it must be handled before calling this function. The arguments and type of the gate must be inverted according to the logic of the root gate. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00631">631</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a00288bef180767d7c79e3c79a33ef2d8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::CoalesceGates </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>common</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Runs gate coalescence on the whole PDAG. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">common</td><td>A flag to also coalesce common/shared gates. These gates may be important for other algorithms.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the graph has been changed.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Module gates are omitted from coalescing to preserve them.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00683">683</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a3a0500bd52152df42fca486c97043140"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::CoalesceGates </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>common</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Coalesces positive argument gates with the same OR or AND logic as parents. </p>
<p>This function merges similar logic gates of NAND and NOR as well.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The starting gate to traverse the graph. This is for recursive purposes. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">common</td><td>A flag to also join common gates. These gates may be important for other algorithms.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the given graph has been changed by this function. </dd>
<dd>
false if no change has been made.</dd></dl>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classscram_1_1core_1_1Constant.xhtml" title="Representation of a node that is a Boolean constant TRUE. ">Constant</a> state gates may be generated upon joining. These gates are registered for future processing. </dd>
<dd>
It is impossible that this function generates NULL type gates. </dd>
<dd>
Module gates are omitted from coalescing to preserve them.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00695">695</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="ac0abd7f5b54f98643644110b160569bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::ProcessMultipleDefinitions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects and replaces multiple definitions of gates. </p>
<p>Gates with the same logic and inputs but different indices are considered redundant.</p>
<dl class="section return"><dt>Returns</dt><dd>true if multiple definitions are found and replaced.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This function does not recursively detect multiple definitions due to replaced redundant arguments of gates. The replaced gates are considered a new graph, and this function must be called again to verify that the new graph does not have multiple definitions. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00746">746</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, <a class="el" href="logger_8h_source.xhtml#l00082">scram::DEBUG5</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="ae0bdf196274427420631bc20f95cb72a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::DetectMultipleDefinitions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>, std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>multi_def</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">GateSet</a> *&#160;</td>
          <td class="paramname"><em>unique_gates</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Traverses the PDAG to collect multiple definitions of gates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The gate to traverse the sub-graph. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">multi_def</td><td>Detected multiple definitions. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">unique_gates</td><td>A set of semantically unique gates.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks must be clear. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00778">778</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="aa9856913eee7b854abfbe8d8330566d3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::DetectModules </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Traverses the PDAG to detect modules. </p>
<p>Modules are independent sub-graphs without common nodes with the rest of the graph. </p>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00801">801</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, <a class="el" href="pdag_8h_source.xhtml#l00821">scram::core::Pdag::kVisit</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="ac83a0afe1f22761907f2a017abd96268"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int scram::core::Preprocessor::AssignTiming </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Traverses the given gate and assigns time of visit to nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">time</td><td>The current time. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate to traverse and assign time to.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The final time of traversing. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00820">820</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="afbce0b5c45a445c3b70ae298b9518281"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::FindModules </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Determines modules from original gates that have been already timed. </p>
<p>This function can also create new modules from the existing graph.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate to test for modularity. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00837">837</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, and <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>.</p>

</div>
</div>
<a class="anchor" id="a4e97ffcda9c98ffc5aff93214f827c18"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::ProcessModularArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>non_shared_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>modular_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>non_modular_args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Processes gate arguments found during the module detection. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate with the arguments. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">non_shared_args</td><td>Args that belong only to this gate. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">modular_args</td><td>Args that may be grouped into new modules. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">non_modular_args</td><td>Args that cannot be grouped into modules. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00902">902</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a434534b6a7c3fccc82c073e6aced90b1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> scram::core::Preprocessor::CreateNewModule </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new module as an argument of an existing gate if the logic of the existing parent gate allows a sub-module. </p>
<p>The existing arguments of the original gate are used to create the new module. If the new module must contain all the arguments, the original gate is asserted to be a module, and no operation is performed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The parent gate for a module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Modular arguments to be added into the new module.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the new module if it is created. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00930">930</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, and <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>.</p>

</div>
</div>
<a class="anchor" id="aa65bdffb78291a0e41a34d34bf3fa198"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::FilterModularArgs </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>modular_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>non_modular_args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if a group of modular arguments share anything with non-modular arguments. </p>
<p>If so, then the modular arguments are not actually modular, and those arguments are removed from modular containers. This is due to chain of nodes that are shared between modular and non-modular arguments.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">modular_args</td><td>Candidates for modular grouping. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">non_modular_args</td><td>Non modular arguments. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00968">968</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a5c10e807e558b06a1573c08ed13e205e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GroupModularArgs </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>modular_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt;&gt; *&#160;</td>
          <td class="paramname"><em>groups</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Groups modular arguments by their common elements. </p>
<p>The gates created with these modular arguments are guaranteed to be independent modules.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">modular_args</td><td>Candidates for modular grouping. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">groups</td><td>Grouped modular arguments. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l00997">997</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, and <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>.</p>

</div>
</div>
<a class="anchor" id="affe78b1e830afb73585affe0ada477be"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::CreateNewModules </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>modular_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; std::pair&lt; int, <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &gt;&gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>groups</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates new module gates from groups of modular arguments if the logic of the parent gate allows sub-modules. </p>
<p>The existing arguments of the original gate are used to create the new modules. If all the parent gate arguments are modular and within one group, the parent gate is asserted to be a module gate, and no operation is performed.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The parent gate for a module. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">modular_args</td><td>All the modular arguments. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">groups</td><td>Grouped modular arguments. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01041">1041</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="af4dae5abf76e5da8b8c9f4371550b7dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; scram::core::Preprocessor::GatherModules </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gathers all modules in the PDAG. </p>
<dl class="section return"><dt>Returns</dt><dd>Unique modules encountered breadth-first.</dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>Module detection and marking has already been performed.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01068">1068</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8h_source.xhtml#l00366">scram::core::Gate::args()</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, and <a class="el" href="pdag_8h_source.xhtml#l00404">scram::core::Gate::mark()</a>.</p>

<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor_af4dae5abf76e5da8b8c9f4371550b7dc_cgraph.svg" width="428" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ab97a52e27ad8bf7ed049ae1a764f8fba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::MergeCommonArgs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Identifies common arguments of gates, and merges the common arguments into new gates. </p>
<p>This technique helps uncover the common structure within gates that are not modules.</p>
<dl class="section return"><dt>Returns</dt><dd>true if the graph structure is changed by this technique.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This technique works only with OR/AND gates. Partial or full normalization may make this technique more effective. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Constant.xhtml" title="Representation of a node that is a Boolean constant TRUE. ">Constant</a> arguments are not expected.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used for traversal. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> counts are used for common node detection. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01096">1096</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a651b32816243e37c58b7835220997ef2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::MergeCommonArgs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a>&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Merges common arguments for a specific group of gates. </p>
<p>The gates are grouped by their operators. This is a helper function that divides the main merging technique by the gate types.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>The operator that defines the group.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if common args are merged into gates.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The operator or logic of the gates must allow merging. OR/AND operators are expected.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used for traversal. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> counts are used for common node detection. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01113">1113</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, <a class="el" href="preprocessor_8h_source.xhtml#l00490">scram::core::Preprocessor::MergeTable::groups</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>, and <a class="el" href="pdag_8cc_source.xhtml#l00882">op</a>.</p>

</div>
</div>
<a class="anchor" id="a13778626bd9ce007e01b7bbd8d11e850"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::MarkCommonArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Marks common arguments of gates with a specific operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The gate to start the traversal. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>The operator of gates which arguments must be marked.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> count information is used to mark the common arguments.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used for linear traversal. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01160">1160</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00882">op</a>.</p>

</div>
</div>
<a class="anchor" id="aef197badfb47bb3c604fd93d6260e635"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GatherCommonArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> *&#160;</td>
          <td class="paramname"><em>group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gathers common arguments of the gates in the group of a specific operator. </p>
<p>The common arguments must be marked by the second visit exit time.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The gate to start the traversal. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>The operator of gates in the group. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">group</td><td>The group of the gates with their common arguments.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The common arguments are sorted. </dd>
<dd>
The gathering is limited by modules. That is, no search is performed in submodules because they don't have common args with the supermodule.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used for linear traversal. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01184">1184</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00882">op</a>.</p>

</div>
</div>
<a class="anchor" id="aba011f495cdec8449a315c17fe67a8c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::FilterMergeCandidates </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> *&#160;</td>
          <td class="paramname"><em>candidates</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Filters merge candidates and their shared arguments to detect opportunities for simplifications like gate substitutions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">candidates</td><td>The group of merge candidate gates</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The simplifications are based on optimistic heuristics, and the end result may not be the most optimal.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>May produce NULL type and constant gates.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000015">Todo:</a></b></dt><dd>Consider repeating until no change can be made. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01223">1223</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00883">end</a>.</p>

</div>
</div>
<a class="anchor" id="adabd895d60a8ee0950f75da9a98fa155"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GroupCandidatesByArgs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> *&#160;</td>
          <td class="paramname"><em>candidates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> &gt; *&#160;</td>
          <td class="paramname"><em>groups</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Groups candidates with common arguments. </p>
<p>The groups do not intersect either by candidates or common arguments.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">candidates</td><td>The group of the gates with their common args. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">groups</td><td>Non-intersecting collection of groups of candidates.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Groups with only one member are discarded. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01280">1280</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00064">BLOG</a>, and <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>.</p>

</div>
</div>
<a class="anchor" id="af9b5fba2247a02afe6cf480a405b6ca0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GroupCommonParents </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_common_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> &amp;&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> *&#160;</td>
          <td class="paramname"><em>parents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds intersections of common arguments of gates. </p>
<p>Gates with the same common arguments are grouped to represent common parents for the arguments.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_common_args</td><td>The least number common arguments to consider. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">group</td><td>The group of the gates with their common arguments. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">parents</td><td>Grouped common parent gates for the sets of common arguments.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The common arguments are sorted. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01347">1347</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a4f35278c0542722dc42cc74358522a64"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GroupCommonArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a> *&#160;</td>
          <td class="paramname"><em>table</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Groups common args for merging. </p>
<p>The common parents of arguments are isolated into groups so that other groups are not affected by the merging operations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">options</td><td>Combinations of common args and distributive gates. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">table</td><td>Groups of distributive gates for separate manipulation. </td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000014">Todo:</a></b></dt><dd>This strategy deletes too many groups. The intersections must be considered for each option. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01369">1369</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00817">gates</a>.</p>

</div>
</div>
<a class="anchor" id="a3c51e098f0ff45be068f68296323f45f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::FindOptionGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *&#160;</td>
          <td class="paramname"><em>all_options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">MergeTable::OptionGroup</a> *&#160;</td>
          <td class="paramname"><em>best_group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds an optimal way of grouping options. </p>
<p>The goal of this function is to maximize the effect of gate merging or common argument factorization.</p>
<p>After common arguments and parents are grouped, the merging technique must find the most optimal strategy to create new gates that will represent the common arguments. The strategy may favor modularity, size, or other parameters of the new structure of the final graph. The common elements within the groups of common parents and common arguments create the biggest challenge for finding the optimal solution. For example, { (a, b) : (p1, p2), (b, c) : (p2, p3) } The strategy has to make the most optimal choice between two mutually exclusive options.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">all_options</td><td>The sorted set of options. The options must be sorted in ascending size of common arguments. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">best_group</td><td>The optimal group of options.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The all_options parameter is not passed by const reference because the best group must store non const pointers to options. It is expected that the chosen options will be manipulated by the user of this function through these pointers. However, this function guarantees not to manipulate or change the set of all options.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000016">Todo:</a></b></dt><dd>The current logic misses opportunities that may branch with the same base option. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01406">1406</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="adbaee2a993e0538280dc437d0a3b849f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::FindBaseOption </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *&#160;</td>
          <td class="paramname"><em>all_options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">MergeTable::MergeGroup::iterator *&#160;</td>
          <td class="paramname"><em>best_option</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds the starting option for group formation. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">all_options</td><td>The sorted set of options. The options must be sorted in ascending size of common arguments. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">best_option</td><td>The optimal starting option if any. If not found, iterator at the end of the group. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01439">1439</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="acf534fb9d9510d712a78cb5d27572ec1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::TransformCommonArgs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transforms common arguments of gates into new gates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">group</td><td>Group of merge options for manipulation. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01472">1472</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00082">scram::DEBUG5</a>, and <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>.</p>

</div>
</div>
<a class="anchor" id="a4737f354474154b3cea9773c25616d27"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::DetectDistributivity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects and manipulates AND and OR gate distributivity for the whole graph. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the graph is changed. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01515">1515</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a79fe8e90f0e8fbc20a76610aaf09fe6e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::DetectDistributivity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects and manipulates AND and OR gate distributivity. </p>
<p>For example, (a | b) &amp; (a | c) = a | b &amp; c.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The gate which arguments and subgraph must be tested.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if transformations are performed.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This algorithm does not produce constant gates. </dd>
<dd>
NULL type gates are registered if produced.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks must be clear. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01525">1525</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a4b29173b8f6d18031d7a8cacbac15ce1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::HandleDistributiveArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a>&#160;</td>
          <td class="paramname"><em>distr_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>candidates</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Manipulates gates with distributive arguments. </p>
<p>Designed to work with distributivity detection and manipulation logic.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate which arguments must be manipulated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">distr_type</td><td>The type of distributive arguments. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">candidates</td><td>Candidates for distributivity check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if transformations are performed. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01563">1563</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, <a class="el" href="logger_8h_source.xhtml#l00082">scram::DEBUG5</a>, <a class="el" href="pdag_8cc_source.xhtml#l00817">gates</a>, <a class="el" href="preprocessor_8h_source.xhtml#l00490">scram::core::Preprocessor::MergeTable::groups</a>, and <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>.</p>

</div>
</div>
<a class="anchor" id="a29d3775965ee487d000591739fdbaa4b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::FilterDistributiveArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>candidates</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects relationships between the gate and its distributive arguments to remove unnecessary candidates. </p>
<p>The determination of redundant candidates follow the Boolean logic. For example, if any argument is superset of another argument, it can be removed from the gate.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate which arguments must be filtered. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">candidates</td><td>Candidates for distributivity check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the candidates and the gate are manipulated.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>The redundant candidates are also removed from the gate. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01623">1623</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a51340a3bcfa9785e430bab27ee08bbbf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GroupDistributiveArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> &amp;&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a> *&#160;</td>
          <td class="paramname"><em>table</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Groups distributive gate arguments for future factorization. </p>
<p>The function tries to maximize the return from the gate manipulations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">options</td><td>Combinations of common args and distributive gates. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">table</td><td>Groups of distributive gates for separate manipulation.</td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000017">Todo:</a></b></dt><dd>Evaluate various grouping strategies as in common arg merging. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01678">1678</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00817">gates</a>.</p>

</div>
</div>
<a class="anchor" id="a2557ab80c04d7f91372992edfbedd93a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::TransformDistributiveArgs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a>&#160;</td>
          <td class="paramname"><em>distr_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> *&#160;</td>
          <td class="paramname"><em>group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transforms distributive of arguments gates into a new subgraph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The parent gate of all the distributive arguments. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">distr_type</td><td>The type of distributive arguments. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">group</td><td>Group of distributive args options for manipulation. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01709">1709</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00817">gates</a>.</p>

</div>
</div>
<a class="anchor" id="aebc709ad2e097c24e837889a6a9e4696"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::BooleanOptimization </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Propagates failures of common nodes to detect redundancy. </p>
<p>The graph structure is optimized by removing the redundancies if possible. This optimization helps reduce the number of common nodes.</p>
<dl class="section warning"><dt>Warning</dt><dd>Boolean optimization may replace the root gate of the graph. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> visit information is manipulated. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are manipulated. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> optimization values are manipulated. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01778">1778</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a394fb1b5b5f9ee31dc81ad8d64353ee3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GatherCommonNodes </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>common_gates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::weak_ptr&lt; <a class="el" href="classscram_1_1core_1_1Variable.xhtml">Variable</a> &gt;&gt; *&#160;</td>
          <td class="paramname"><em>common_variables</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Traverses the graph to find nodes that have more than one parent. </p>
<p>Common nodes are encountered breadth-first, and they are unique.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">common_gates</td><td>Gates with more than one parent. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">common_variables</td><td>Common variables.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classscram_1_1core_1_1Constant.xhtml" title="Representation of a node that is a Boolean constant TRUE. ">Constant</a> nodes are not expected to be operated.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> visit information is manipulated. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01796">1796</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8h_source.xhtml#l00366">scram::core::Gate::args()</a>, <a class="el" href="pdag_8h_source.xhtml#l00821">scram::core::Pdag::kVisit</a>, and <a class="el" href="pdag_8h_source.xhtml#l00152">scram::core::Node::Visit()</a>.</p>

<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor_a394fb1b5b5f9ee31dc81ad8d64353ee3_cgraph.svg" width="423" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a4086c57695d49b4770915d5d53bd47de"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class N &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::ProcessCommonNode </td>
          <td>(</td>
          <td class="paramtype">const std::weak_ptr&lt; N &gt; &amp;&#160;</td>
          <td class="paramname"><em>common_node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tries to simplify the graph by removing redundancies generated by a common node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">N</td><td>Non-Node, concrete (i.e. <a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a>, etc.) type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">common_node</td><td>A node with more than one parent. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01827">1827</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00081">scram::DEBUG4</a>, and <a class="el" href="logger_8h_source.xhtml#l00060">LOG</a>.</p>

</div>
</div>
<a class="anchor" id="a3b83bc14261cee28f0e1553222b7d5e5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::MarkAncestors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> *&#160;</td>
          <td class="paramname"><em>module</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Marks ancestor gates true. </p>
<p>The marking stops at the root of an independent subgraph for algorithmic efficiency.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>The child node. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">module</td><td>The root module gate ancestor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are clear.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Since very specific branches are marked 'true', cleanup must be performed after/with the use of the ancestors. If the cleanup is done improperly or not at all, the default global contract of clean marks will be broken. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01878">1878</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="ae9a8bac98061d7f82633486ed6a36861"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int scram::core::Preprocessor::PropagateState </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Propagates failure or success of a common node by setting its ancestors' optimization values to 1 or -1 if they fail or succeed according to their Boolean logic. </p>
<p>The failure of an argument is similar to propagating constant TRUE/1. The success of an argument is similar to propagating constant FALSE/-1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The root gate under consideration. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>The node that is the source of failure.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total multiplicity of the node.</dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>The optimization value of the main common node is 1 or -1. </dd>
<dd>
The marks of ancestor gates are 'true'.</dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>The marks of all ancestor gates are reset to 'false'. </dd>
<dd>
All ancestor gates are marked with the descendant index. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01895">1895</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8h_source.xhtml#l00137">scram::core::Node::opti_value()</a>.</p>

<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor_ae9a8bac98061d7f82633486ed6a36861_cgraph.svg" width="398" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a019e679ad9077caac8c48253d42647ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::DetermineGateState </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_failure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num_success</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Determines if a gate fails or succeeds due to failed/succeeded arguments. </p>
<p>If gates fails, its optimization value is set to 1. If it succeeds, its optimization value is -1. If the state is indeterminate, the optimization value is 0.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>The gate with the arguments. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_failure</td><td>The number of failure (TRUE/1) arguments. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_success</td><td>The number of success (FALSE/-1) arguments. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01937">1937</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a4539f18d3dde97514ca267b41d30d220"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int scram::core::Preprocessor::CollectStateDestinations </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>destinations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collects failure or success destinations and marks non-redundant nodes. </p>
<p>The optimization value for non-redundant gates are set to 2.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The non-failed gate which sub-graph is to be traversed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>The index of the main state-source common node. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">destinations</td><td>Destinations of the state.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of encounters with the destinations. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l01990">1990</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="ad79145fdd5487ef0537728f74e6a94e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::CollectRedundantParents </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>destinations</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>redundant_parents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects if parents of a node are redundant. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>The common node. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">destinations</td><td>Destinations of the state. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">redundant_parents</td><td>A set of redundant parents.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>Destinations have valid state (Success or Failure). </dd>
<dd>
Non-redundant parents have optimization value 2.</dd></dl>
<dl class="section post"><dt>Postcondition</dt><dd>Destinations that are also redundant parents are removed if the semantics of the transformations is equivalent. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02015">2015</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a6edfe2a6d9836942944921a8de0c011e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::ProcessRedundantParents </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>redundant_parents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects if parents of a node are redundant. </p>
<p>If there are redundant parents, depending on the logic of the parent, the node is removed from the parent unless it is also in the destination set with specific logic. In the latter case, the parent is removed from the destinations.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>The common node. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">redundant_parents</td><td>A set of redundant parents.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classscram_1_1core_1_1Constant.xhtml" title="Representation of a node that is a Boolean constant TRUE. ">Constant</a> gates are registered for removal. </dd>
<dd>
Null type gates are registered for removal. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02040">2040</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="aa42b66bb888f665bc68324cca15452ad"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class N &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::ProcessStateDestinations </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; N &gt; &amp;&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::unordered_map&lt; int, <a class="el" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>destinations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Transforms failure or success destination according to the logic and the common node. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">N</td><td>Non-Node, concrete (i.e. <a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a>, etc.) type.</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>The common node. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">destinations</td><td>Destination gates for the state.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>This function will replace the root gate of the graph if it is the destination. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02053">2053</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a5eb477e9ecd0552b2b554d7df56df652"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::ClearStateMarks </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clears all the ancestor marks used in Boolean optimization steps. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The top ancestor of the common node.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>All ancestor gates are marked with the descendant index. </dd>
<dd>
The common node itself is not the ancestor.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>The common node must be cleaned separately. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02086">2086</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="ae12f3096132d7f6e9daa779724255f7e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::DecomposeCommonNodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The Shannon decomposition for common nodes in the PDAG. </p>
<p>This procedure is also called "Constant Propagation", but it is confusing with the actual propagation of house events and constant gates.</p>
<p>The main two operations are performed according to the Shannon decomposition of particular setups:</p>
<p>x &amp; f(x, y) = x &amp; f(1, y) x | f(x, y) = x | f(0, y)</p>
<dl class="section return"><dt>Returns</dt><dd>true if the setups are found and processed.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>This preprocessing algorithm may introduce clones of existing shared gates, which may increase the size of the graph and complicate application and performance of other algorithms.</dd></dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> descendant marks are used. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> ancestor marks are used. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> visit information is used. </dd>
<dd>
<a class="el" href="classscram_1_1core_1_1Gate.xhtml" title="An indexed gate for use in a PDAG. ">Gate</a> marks are used. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02099">2099</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="logger_8h_source.xhtml#l00080">scram::DEBUG3</a>, <a class="el" href="pdag_8h_source.xhtml#l00820">scram::core::Pdag::kGateMark</a>, <a class="el" href="pdag_8h_source.xhtml#l00821">scram::core::Pdag::kVisit</a>, and <a class="el" href="logger_8h_source.xhtml#l00055">TIMER</a>.</p>

</div>
</div>
<a class="anchor" id="a26434bec1bc5a496f80c9cbad1ed3a62"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::ReplaceGate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>replacement</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replaces one gate in the graph with another. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gate</td><td>An existing gate to be replaced. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">replacement</td><td>A gate that will replace the old gate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section post"><dt>Postcondition</dt><dd>The sign of the existing gate as an argument is transferred to the replacement gate.</dd>
<dd>
If any parent becomes constant or NULL type, the parent is registered for removal. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02331">2331</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a1c6e290b05a37759627487a6e028b1ca"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool scram::core::Preprocessor::RegisterToClear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers mutated gates for potential deletion later. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The mutated gate under examination.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the gate is registered for clearance.</dd></dl>
<dl class="section pre"><dt>Precondition</dt><dd>The caller will later call the appropriate cleanup functions. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02342">2342</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

</div>
</div>
<a class="anchor" id="a3fa7788f0a789a43a8bd1bb7ee8a5e22"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GatherNodes </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>gates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>variables</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gathers all nodes in the PDAG. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">gates</td><td>A set of gates. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">variables</td><td>A set of variables.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classscram_1_1core_1_1Node.xhtml" title="An abstract base class that represents a node in a PDAG. ">Node</a> visit information is manipulated. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02346">2346</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00817">gates</a>, <a class="el" href="pdag_8h_source.xhtml#l00821">scram::core::Pdag::kVisit</a>, and <a class="el" href="pdag_8cc_source.xhtml#l00819">variables</a>.</p>

<p>Referenced by <a class="el" href="preprocessor_8cc_source.xhtml#l02374">scram::core::CustomPreprocessor&lt; Zbdd &gt;::Run()</a>.</p>

<p><div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor_a3fa7788f0a789a43a8bd1bb7ee8a5e22_icgraph.svg" width="490" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a9caf4677a024ed935d831210b57b8ed9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scram::core::Preprocessor::GatherNodes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &amp;&#160;</td>
          <td class="paramname"><em>gate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>gates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a> &gt; *&#160;</td>
          <td class="paramname"><em>variables</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gathers nodes in the sub-graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">gate</td><td>The root gate to traverse. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">gates</td><td>A set of gates. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">variables</td><td>A set of variables.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section pre"><dt>Precondition</dt><dd>Visited nodes are marked. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8cc_source.xhtml#l02352">2352</a> of file <a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a>.</p>

<p>References <a class="el" href="pdag_8cc_source.xhtml#l00817">gates</a>, <a class="el" href="preprocessor_8cc_source.xhtml#l00177">Run()</a>, and <a class="el" href="pdag_8cc_source.xhtml#l00819">variables</a>.</p>

<p><div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classscram_1_1core_1_1Preprocessor_a9caf4677a024ed935d831210b57b8ed9_cgraph.svg" width="471" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a0786b7068cd15b0ffd76a71e33e898e6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* scram::core::Preprocessor::graph_</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The PDAG to preprocess. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000018">Todo:</a></b></dt><dd>Eliminate the protected data. </dd></dl>

<p>Definition at line <a class="el" href="preprocessor_8h_source.xhtml#l00995">995</a> of file <a class="el" href="preprocessor_8h_source.xhtml">preprocessor.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="preprocessor_8h_source.xhtml">preprocessor.h</a></li>
<li><a class="el" href="preprocessor_8cc_source.xhtml">preprocessor.cc</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
