<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event_tree_analysis.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event_tree_analysis.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event__tree__analysis_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span><span class="comment"></span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// Implementation of event tree analysis facilities.</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event__tree__analysis_8h.xhtml">event_tree_analysis.h</a>&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="numerical_8h.xhtml">expression/numerical.h</a>&quot;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="find__iterator_8h.xhtml">ext/find_iterator.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="instruction_8h.xhtml">instruction.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1EventTreeAnalysis.xhtml#a3e3404417cbdcf92474e5653ec24f936">   28</a></span>&#160;<a class="code" href="classscram_1_1core_1_1EventTreeAnalysis.xhtml#a3e3404417cbdcf92474e5653ec24f936">EventTreeAnalysis::EventTreeAnalysis</a>(</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">mef::InitiatingEvent</a>&amp; initiating_event, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="structscram_1_1mef_1_1Context.xhtml">mef::Context</a>* context)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Analysis.xhtml">Analysis</a>(settings),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      initiating_event_(initiating_event),</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      context_(context) {}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// The model cloning functions.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// Clones the formula without any instruction application.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span>std::unique_ptr&lt;mef::Formula&gt; Clone(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">mef::Formula</a>&amp; formula) noexcept {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">auto</span> new_formula = std::make_unique&lt;mef::Formula&gt;(formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#aaf6992ab41ab8ae013211fd861e726db">type</a>());</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">mef::Formula::EventArg</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>())</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    new_formula-&gt;AddArgument(arg);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">mef::FormulaPtr</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>())</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    new_formula-&gt;AddArgument(Clone(*arg));</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordflow">return</span> new_formula;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/// Clones the formula by applying the set-instructions.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/// @param[in] formula  The formula to be deep-cloned.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// @param[in] set_instructions  The set instructions to change arguments.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/// @param[in] clones  The storage container for newly created clones.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// @returns The deep-copy of the argument formula with new (changed) arguments.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span>std::unique_ptr&lt;mef::Formula&gt;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;Clone(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">mef::Formula</a>&amp; formula,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keyword">const</span> std::unordered_map&lt;std::string, bool&gt;&amp; set_instructions,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      std::vector&lt;std::unique_ptr&lt;mef::Event&gt;&gt;* clones) noexcept {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keyword">auto</span> new_formula = std::make_unique&lt;mef::Formula&gt;(formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#aaf6992ab41ab8ae013211fd861e726db">type</a>());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keyword">struct </span>{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">mef::Formula::EventArg</a> operator()(<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">mef::BasicEvent</a>* arg) { <span class="keywordflow">return</span> arg; }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">mef::Formula::EventArg</a> operator()(<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">mef::HouseEvent</a>* arg) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(set_house, arg-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>())) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> (it-&gt;second == arg-&gt;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">state</a>())</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;          <span class="keywordflow">return</span> arg;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">auto</span> clone = std::make_unique&lt;mef::HouseEvent&gt;(</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            arg-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>(), <span class="stringliteral">&quot;__clone__.&quot;</span> + arg-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>(),</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            mef::RoleSpecifier::kPrivate);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        clone-&gt;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">state</a>(it-&gt;second);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">auto</span>* ptr = clone.get();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        event_register-&gt;emplace_back(std::move(clone));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> ptr;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <span class="keywordflow">return</span> arg;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">mef::Formula::EventArg</a> operator()(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">mef::Gate</a>* arg) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keywordflow">if</span> (set_house.empty())</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> arg;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      <span class="keyword">auto</span> clone = std::make_unique&lt;mef::Gate&gt;(</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          arg-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>(), <span class="stringliteral">&quot;__clone__.&quot;</span> + arg-&gt;<a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>(), mef::RoleSpecifier::kPrivate);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      clone-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(Clone(arg-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(), set_house, event_register));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keyword">auto</span>* ptr = clone.get();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      event_register-&gt;emplace_back(std::move(clone));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keywordflow">return</span> ptr;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> std::unordered_map&lt;std::string, bool&gt;&amp; set_house;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::vector&lt;std::unique_ptr&lt;mef::Event&gt;&gt;* event_register;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  } cloner{set_instructions, clones};</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">mef::Formula::EventArg</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>())</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    new_formula-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a3c7077dfcef1e6fe5393a15e71eb5b44">AddArgument</a>(std::visit(cloner, arg));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">mef::FormulaPtr</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>())</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    new_formula-&gt;AddArgument(Clone(*arg, set_instructions, clones));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">return</span> new_formula;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;EventTreeAnalysis::PathCollector::PathCollector(<span class="keyword">const</span> PathCollector&amp; other)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    : expressions(other.expressions), set_instructions(other.set_instructions) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">mef::FormulaPtr</a>&amp; formula : other.formulas)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    formulas.push_back(core::Clone(*formula));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1EventTreeAnalysis.xhtml#a070c68c0d67edb30c9bf57e226aaf88e">  105</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1EventTreeAnalysis.xhtml#a070c68c0d67edb30c9bf57e226aaf88e">EventTreeAnalysis::Analyze</a>() noexcept {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  assert(initiating_event_.<a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">event_tree</a>());</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  SequenceCollector collector{initiating_event_, *context_};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  CollectSequences(initiating_event_.<a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">event_tree</a>()-&gt;initial_state(), &amp;collector);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; sequence : collector.sequences) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">auto</span> gate = std::make_unique&lt;mef::Gate&gt;(<span class="stringliteral">&quot;__&quot;</span> + sequence.first-&gt;name());</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::vector&lt;mef::FormulaPtr&gt; gate_formulas;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::vector&lt;mef::Expression*&gt; arg_expressions;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">for</span> (PathCollector&amp; path_collector : sequence.second) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="keywordflow">if</span> (path_collector.formulas.size() == 1) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        gate_formulas.push_back(std::move(path_collector.formulas.front()));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (path_collector.formulas.size() &gt; 1) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">auto</span> and_formula = std::make_unique&lt;mef::Formula&gt;(mef::kAnd);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">mef::FormulaPtr</a>&amp; arg_formula : path_collector.formulas)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;          and_formula-&gt;AddArgument(std::move(arg_formula));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        gate_formulas.push_back(std::move(and_formula));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">if</span> (path_collector.expressions.size() == 1) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        arg_expressions.push_back(path_collector.expressions.front());</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (path_collector.expressions.size() &gt; 1) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        expressions_.push_back(</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            std::make_unique&lt;mef::Mul&gt;(std::move(path_collector.expressions)));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        arg_expressions.push_back(expressions_.back().get());</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    assert(gate_formulas.empty() || arg_expressions.empty());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">bool</span> is_expression_only = !arg_expressions.empty();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span> (gate_formulas.size() == 1) {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      gate-&gt;formula(std::move(gate_formulas.front()));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (gate_formulas.size() &gt; 1) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      <span class="keyword">auto</span> or_formula = std::make_unique&lt;mef::Formula&gt;(mef::kOr);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">mef::FormulaPtr</a>&amp; arg_formula : gate_formulas)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        or_formula-&gt;AddArgument(std::move(arg_formula));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      gate-&gt;formula(std::move(or_formula));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!arg_expressions.empty()) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      <span class="keyword">auto</span> <span class="keyword">event</span> =</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;          std::make_unique&lt;mef::BasicEvent&gt;(<span class="stringliteral">&quot;__&quot;</span> + sequence.first-&gt;name());</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <span class="keywordflow">if</span> (arg_expressions.size() == 1) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">event</span>-&gt;expression(arg_expressions.front());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (arg_expressions.size() &gt; 1) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        expressions_.push_back(</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            std::make_unique&lt;mef::Add&gt;(std::move(arg_expressions)));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keyword">event</span>-&gt;expression(expressions_.back().get());</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      gate-&gt;formula(std::make_unique&lt;mef::Formula&gt;(mef::kNull));</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      gate-&gt;formula().AddArgument(event.get());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      events_.push_back(std::move(event));</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      gate-&gt;formula(std::make_unique&lt;mef::Formula&gt;(mef::kNull));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      gate-&gt;formula().AddArgument(&amp;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">mef::HouseEvent::kTrue</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    sequences_.push_back(</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {*sequence.first, std::move(gate), is_expression_only});</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keywordtype">void</span> EventTreeAnalysis::CollectSequences(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">mef::Branch</a>&amp; initial_state,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                         SequenceCollector* result) noexcept {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">struct </span>Collector {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">class </span>Visitor : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">mef::InstructionVisitor</a> {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;     <span class="keyword">public</span>:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="keyword">explicit</span> Visitor(Collector* collector) : collector_(*collector) {}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">mef::SetHouseEvent</a>* house_event)<span class="keyword"> override </span>{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        collector_.path_collector_.set_instructions[house_event-&gt;<a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">name</a>()] =</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            house_event-&gt;<a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">state</a>();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">mef::Link</a>* link)<span class="keyword"> override </span>{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        is_linked_ = <span class="keyword">true</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        Collector continue_connector(collector_);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keyword">auto</span> save = std::move(collector_.result_-&gt;context.functional_events);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        continue_connector(&amp;link-&gt;<a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>().<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        collector_.result_-&gt;context.functional_events = std::move(save);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">mef::CollectFormula</a>* collect_formula)<span class="keyword"> override </span>{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// clang-format off</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        collector_.path_collector_.formulas.push_back(</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            core::Clone(collect_formula-&gt;<a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">formula</a>(),</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        collector_.path_collector_.set_instructions,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        collector_.clones_));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// clang-format on</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">mef::CollectExpression</a>* collect_expression)<span class="keyword"> override </span>{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        collector_.path_collector_.expressions.push_back(</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            &amp;collect_expression-&gt;<a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">expression</a>());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordtype">bool</span> is_linked()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> is_linked_; }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;     <span class="keyword">private</span>:</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      Collector&amp; collector_;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      <span class="keywordtype">bool</span> is_linked_ = <span class="keyword">false</span>;  <span class="comment">/// Indicate that sequences not be registered.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">mef::Sequence</a>* sequence) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      Visitor visitor(<span class="keyword">this</span>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">mef::Instruction</a>* instruction : sequence-&gt;<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>())</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        instruction-&gt;Accept(&amp;visitor);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      <span class="keywordflow">if</span> (!visitor.is_linked())</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        result_-&gt;sequences[sequence].push_back(std::move(path_collector_));</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Fork.xhtml">mef::Fork</a>* fork)<span class="keyword"> const </span>{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <span class="keyword">const</span> std::string&amp; name = fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>().<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      assert(result_-&gt;context.functional_events.count(name) == <span class="keyword">false</span>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      std::string&amp; state = result_-&gt;context.functional_events[name];</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      assert(state.empty());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">mef::Path</a>&amp; fork_path : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>()) {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        state = fork_path.state();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// clang-format off</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        Collector(*<span class="keyword">this</span>)(&amp;fork_path);  <span class="comment">// NOLINT(runtime/explicit)</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="comment">// clang-format on</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      result_-&gt;context.functional_events.erase(name);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">mef::Branch</a>* branch) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      Visitor visitor(<span class="keyword">this</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">mef::Instruction</a>* instruction : branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">instructions</a>())</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        instruction-&gt;Accept(&amp;visitor);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      std::visit(*<span class="keyword">this</span>, branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    SequenceCollector* result_;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    std::vector&lt;std::unique_ptr&lt;mef::Event&gt;&gt;* clones_;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    PathCollector path_collector_;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  };</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  context_-&gt;functional_events.clear();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  context_-&gt;initiating_event = initiating_event_.name();</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  Collector{result, &amp;events_}(&amp;initial_state);  <span class="comment">// NOLINT(whitespace/braces)</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_a4d7470e83d76df47f6d7e3febb2ae1d1"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">scram::mef::SetHouseEvent::state</a></div><div class="ttdeci">bool state() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00066">instruction.h:66</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_a7e258c5f6332715d5ed6a3fdbf681a8b"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">scram::mef::Id::id</a></div><div class="ttdeci">const std::string &amp; id() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00212">element.h:212</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a12aa312ac26a4fc798ff68816d9482b0"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">const Branch &amp; initial_state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00170">event_tree.h:170</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a3c7077dfcef1e6fe5393a15e71eb5b44"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a3c7077dfcef1e6fe5393a15e71eb5b44">scram::mef::Formula::AddArgument</a></div><div class="ttdeci">void AddArgument(EventArg event_arg)</div><div class="ttdoc">Adds an event into the arguments list. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00093">event.cc:93</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml">scram::mef::InitiatingEvent</a></div><div class="ttdoc">Event-tree Initiating Event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00214">event_tree.h:214</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml">scram::mef::CollectExpression</a></div><div class="ttdoc">The operation of collecting expressions for event tree sequences. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00074">instruction.h:74</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00173">event.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00038">instruction.h:38</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1EventTreeAnalysis_xhtml_a070c68c0d67edb30c9bf57e226aaf88e"><div class="ttname"><a href="classscram_1_1core_1_1EventTreeAnalysis.xhtml#a070c68c0d67edb30c9bf57e226aaf88e">scram::core::EventTreeAnalysis::Analyze</a></div><div class="ttdeci">void Analyze() noexcept</div><div class="ttdoc">Analyzes an event tree given the initiating event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree__analysis_8cc_source.xhtml#l00105">event_tree_analysis.cc:105</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a358b7ba8bf8488abfcd22516474b2ad5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">scram::mef::Formula::EventArg</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00230">event.h:230</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml">scram::mef::HouseEvent</a></div><div class="ttdoc">Representation of a house event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00049">event.h:49</a></div></div>
<div class="ttc" id="numerical_8h_xhtml"><div class="ttname"><a href="numerical_8h.xhtml">numerical.h</a></div><div class="ttdoc">A collection of numerical expressions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_a673197bb550b4b62db7fae7c8a0bd6dc"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">scram::mef::Fork::functional_event</a></div><div class="ttdeci">const FunctionalEvent &amp; functional_event() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00151">event_tree.h:151</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_aaf6992ab41ab8ae013211fd861e726db"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#aaf6992ab41ab8ae013211fd861e726db">scram::mef::Formula::type</a></div><div class="ttdeci">Operator type() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00238">event.h:238</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_aabe81dc526fdae951724e42707c1164f"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">void event_tree(EventTree *event_tree)</div><div class="ttdoc">Associates an event tree to the initiating event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00221">event_tree.h:221</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a15ab4daf36b62127703cf610bdc80183"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">scram::mef::HouseEvent::state</a></div><div class="ttdeci">void state(bool constant)</div><div class="ttdoc">Sets the state for House event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00061">event.h:61</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_a7f4be95643441bdad46a15d58ad15c13"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">scram::mef::Sequence::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00040">event_tree.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a4e86a729bae4629de0217c9f8c6960a0"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">scram::mef::Formula::event_args</a></div><div class="ttdeci">const std::vector&lt; EventArg &gt; &amp; event_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00258">event.h:258</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_ac3ed6a402b65d84fcc5d0c2ed52e8d05"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">scram::mef::Branch::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdoc">Sets the instructions to execute at the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00090">event_tree.h:90</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af3c5953f817cc202b5009cc4557c7d72"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">scram::mef::Formula::formula_args</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; formula_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00259">event.h:259</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Context_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Context.xhtml">scram::mef::Context</a></div><div class="ttdoc">The context for test-event expressions. </div><div class="ttdef"><b>Definition:</b> <a href="test__event_8h_source.xhtml#l00031">test_event.h:31</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1EventTreeAnalysis_xhtml_a3e3404417cbdcf92474e5653ec24f936"><div class="ttname"><a href="classscram_1_1core_1_1EventTreeAnalysis.xhtml#a3e3404417cbdcf92474e5653ec24f936">scram::core::EventTreeAnalysis::EventTreeAnalysis</a></div><div class="ttdeci">EventTreeAnalysis(const mef::InitiatingEvent &amp;initiating_event, const Settings &amp;settings, mef::Context *context)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree__analysis_8cc_source.xhtml#l00028">event_tree_analysis.cc:28</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a3886fbcbb5f9bc2ce3b45bc64a25559a"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">scram::mef::Link::event_tree</a></div><div class="ttdeci">const EventTree &amp; event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00179">instruction.h:179</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml">scram::mef::SetHouseEvent</a></div><div class="ttdoc">The operation to change house-events. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00055">instruction.h:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml">scram::mef::Link</a></div><div class="ttdoc">A link to another event tree in end-states only. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00173">instruction.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_add3768ebd5e4f11c0032f8dcfdf0486e"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">scram::mef::HouseEvent::kTrue</a></div><div class="ttdeci">static HouseEvent kTrue</div><div class="ttdoc">Literal True event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00051">event.h:51</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml">scram::mef::CollectFormula</a></div><div class="ttdoc">The operation of connecting fault tree events into the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00089">instruction.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml_a0be8ace1305ed498fca212a3b1a6938f"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">scram::mef::CollectExpression::expression</a></div><div class="ttdeci">Expression &amp; expression() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00082">instruction.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml_a56a3cfe8798a0ed58a33d9a0b40d729c"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">scram::mef::CollectFormula::formula</a></div><div class="ttdeci">Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00095">instruction.h:95</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml">scram::mef::Path</a></div><div class="ttdoc">Functional-event state paths in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00127">event_tree.h:127</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml">scram::mef::InstructionVisitor</a></div><div class="ttdoc">The base abstract class for instruction visitors. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00186">instruction.h:186</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Analysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Analysis.xhtml">scram::core::Analysis</a></div><div class="ttdoc">Base abstract class for all analysis with settings. </div><div class="ttdef"><b>Definition:</b> <a href="analysis_8h_source.xhtml#l00034">analysis.h:34</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml"><div class="ttname"><a href="find__iterator_8h.xhtml">find_iterator.h</a></div><div class="ttdoc">Convenience iterator adaptor to wrap find calls and results. </div></div>
<div class="ttc" id="event__tree__analysis_8h_xhtml"><div class="ttname"><a href="event__tree__analysis_8h.xhtml">event_tree_analysis.h</a></div><div class="ttdoc">Event tree analysis facilities. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_a78d78cbf5e26fadf3efda96fbe5cb066"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">scram::mef::SetHouseEvent::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00063">instruction.h:63</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00084">event_tree.h:84</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_ac82c25bb78d12a3bac21ea26cc5cdc99"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">scram::mef::Fork::paths</a></div><div class="ttdeci">const std::vector&lt; Path &gt; &amp; paths() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00155">event_tree.h:155</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a2d5ae6a8ba8ca8f81818d4c12172a5b5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">scram::mef::Branch::target</a></div><div class="ttdeci">void target(Target target)</div><div class="ttdoc">Sets the target for the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00100">event_tree.h:100</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="instruction_8h_xhtml"><div class="ttname"><a href="instruction_8h.xhtml">instruction.h</a></div><div class="ttdoc">Model and event tree modifier instructions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml">scram::mef::Fork</a></div><div class="ttdoc">Functional event forks. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00142">event_tree.h:142</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
