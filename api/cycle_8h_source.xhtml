<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>cycle.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cycle.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cycle_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Validation facilities to detect and print cycles in graphs.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;boost/algorithm/string/join.hpp&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/range/adaptor/filtered.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/range/adaptor/reversed.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/range/adaptor/transformed.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event__tree_8h.xhtml">event_tree.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="instruction_8h.xhtml">instruction.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="parameter_8h.xhtml">parameter.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef_1_1cycle.xhtml">scram::mef::cycle</a> {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// Determines the connectors between nodes.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// @param[in] node  The node under cycle investigation.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// @returns The connector belonging to the node.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">   47</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* <a class="code" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">GetConnector</a>(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* node) { <span class="keywordflow">return</span> &amp;node-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(); }</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a9e6597aceeba7d68d9cfac2069efbd37">   48</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* <a class="code" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">GetConnector</a>(<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* node) { <span class="keywordflow">return</span> node; }</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#abbc5efe8d56dfd0fd1bd086b085c41af">   49</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* <a class="code" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">GetConnector</a>(<a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>* node) { <span class="keywordflow">return</span> node; }</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a50a7f12dd3bd0387063997ae5b16971b">   50</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* <a class="code" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">GetConnector</a>(<a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* node) { <span class="keywordflow">return</span> node; }</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#af609a68b90815b8ced53adf15d93df00">   51</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* <a class="code" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">GetConnector</a>(<a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>* node) { <span class="keywordflow">return</span> &amp;node-&gt;<a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>(); }<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/// Retrieves nodes from a connector.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// @param[in] connector  The connector starting from another node.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/// @returns  The iterable collection of nodes on the other end of connection.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#ab063b76c05f086177494eefc8dc57da9">   61</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">auto</span> <a class="code" href="cycle_8h.xhtml#ab063b76c05f086177494eefc8dc57da9">GetNodes</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* connector) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">return</span> connector-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>() |</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;         boost::adaptors::transformed(</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;             [](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a>&amp; event_args) -&gt; <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;               <span class="keywordflow">if</span> (<span class="keyword">auto</span>* arg = std::get_if&lt;Gate*&gt;(&amp;event_args))</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                 <span class="keywordflow">return</span> *arg;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;               <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;             }) |</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;         boost::adaptors::filtered([](<span class="keyword">auto</span>* ptr) { <span class="keywordflow">return</span> ptr != <span class="keyword">nullptr</span>; });</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a71f7c737eb867b62f0c092592028b3f1">   71</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">auto</span> <a class="code" href="cycle_8h.xhtml#ab063b76c05f086177494eefc8dc57da9">GetNodes</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* connector) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordflow">return</span> connector-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a>() | boost::adaptors::transformed([](<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;           <span class="keywordflow">return</span> <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>*<span class="keyword">&gt;</span>(arg);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;         }) |</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;         boost::adaptors::filtered([](<span class="keyword">auto</span>* ptr) { <span class="keywordflow">return</span> ptr != <span class="keyword">nullptr</span>; });</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">/// Retrieves connectors from a connector.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">/// @param[in] connector  The connector starting from another node.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">/// @returns  The iterable collection of connectors.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#aef7ec67f39719b384e5a3ca7f879bdba">   86</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">auto</span> <a class="code" href="cycle_8h.xhtml#aef7ec67f39719b384e5a3ca7f879bdba">GetConnectors</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* connector) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">return</span> connector-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>() |</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;         boost::adaptors::transformed(</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;             [](<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a>&amp; ptr) { <span class="keywordflow">return</span> ptr.get(); });</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#aeed4b968387a7629985a8d3d9528c4e0">   91</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">auto</span> <a class="code" href="cycle_8h.xhtml#aef7ec67f39719b384e5a3ca7f879bdba">GetConnectors</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* connector) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">return</span> connector-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a>() | boost::adaptors::filtered([](<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;           <span class="keywordflow">return</span> <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>*<span class="keyword">&gt;</span>(arg) == <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;         });</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> N&gt;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8h.xhtml#a21de1e2b8ca8017c9c0c5ef3254b433e">ContinueConnector</a>(T* connector, std::vector&lt;N*&gt;* cycle);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">/// Traverses nodes with connectors to find a cycle.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/// Interrupts the detection at first cycle.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/// Nodes get marked.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/// The connector of the node is retrieved via unqualified call to</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">/// GetConnector(node).</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">/// @tparam T  The type of nodes in the graph.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">/// @param[in,out] node  The node to start with.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">/// @param[out] cycle  If a cycle is detected,</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">///                    it is given in reverse,</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">///                    ending with the cycle node.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">/// @returns True if a cycle is found.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/// @post All traversed nodes are marked with non-clear marks.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">  119</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(T* node, std::vector&lt;T*&gt;* cycle) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">if</span> (!node-&gt;mark()) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    node-&gt;mark(NodeMark::kTemporary);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (ContinueConnector(<a class="code" href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">GetConnector</a>(node), cycle)) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="keywordflow">if</span> (cycle-&gt;size() == 1 || cycle-&gt;back() != cycle-&gt;front())</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        cycle-&gt;push_back(node);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    node-&gt;mark(NodeMark::kPermanent);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (node-&gt;mark() == NodeMark::kTemporary) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    assert(cycle-&gt;empty() &amp;&amp; <span class="stringliteral">&quot;The report container must be provided empty.&quot;</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    cycle-&gt;push_back(node);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  assert(node-&gt;mark() == NodeMark::kPermanent);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">/// Helper function to check for cyclic references through connectors.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">/// Connectors may get market upon traversal.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">/// Connectors and nodes of the connector are retrieved via unqualified calls:</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">/// GetConnectors(connector) and GetNodes(connector).</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">/// @tparam T  The type managing the connectors (nodes, edges).</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">/// @tparam N  The node type.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">/// @param[in,out] connector  Connector to nodes.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">/// @param[out] cycle  The cycle path if detected.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">/// @returns True if a cycle is detected.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> N&gt;</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a21de1e2b8ca8017c9c0c5ef3254b433e">  151</a></span>&#160;<span class="keywordtype">bool</span> ContinueConnector(T* connector, std::vector&lt;N*&gt;* cycle) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keywordflow">for</span> (N* node : <a class="code" href="cycle_8h.xhtml#ab063b76c05f086177494eefc8dc57da9">GetNodes</a>(connector)) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(node, cycle))</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>* link : <a class="code" href="cycle_8h.xhtml#aef7ec67f39719b384e5a3ca7f879bdba">GetConnectors</a>(connector)) {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">if</span> (ContinueConnector(link, cycle))</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">/// Cycle detection specialization for event tree named branches.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#aadcc06d587ab75cf72d05c8ef7dc8fee">  165</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> ContinueConnector(<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* connector,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                              std::vector&lt;NamedBranch*&gt;* cycle) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keyword">struct </span>{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">bool</span> operator()(<a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>* branch) { <span class="keywordflow">return</span> <a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(branch, cycle_); }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">bool</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>()) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> (ContinueConnector(&amp;branch, cycle_))</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">bool</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>*) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    decltype(cycle) cycle_;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  } continue_connector{cycle};</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">return</span> std::visit(continue_connector, connector-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/// Cycle detection specialization for visitor-based traversal of instructions.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a8d1dbf23cd6f7bf9ca4457c426a1cfe1">  188</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> ContinueConnector(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* connector,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                              std::vector&lt;Rule*&gt;* cycle) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keyword">struct </span>Visitor : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">struct </span>ArgSelector : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      <span class="keyword">explicit</span> ArgSelector(Visitor* visitor) : visitor_(visitor) {}</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite)<span class="keyword"> override </span>{ visitor_-&gt;Visit(ite); }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a>* block)<span class="keyword"> override </span>{ visitor_-&gt;Visit(block); }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule)<span class="keyword"> override </span>{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// Non-const rules are only needed to mark the nodes.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(const_cast&lt;Rule*&gt;(rule), visitor_-&gt;cycle_))</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;          <span class="keywordflow">throw</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      Visitor* visitor_;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    };</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">explicit</span> Visitor(std::vector&lt;Rule*&gt;* t_cycle)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        : cycle_(t_cycle), selector_(<span class="keyword">this</span>) {}</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite)<span class="keyword"> override </span>{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(&amp;selector_);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>())</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(&amp;selector_);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a>* block)<span class="keyword"> override </span>{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : block-&gt;<a class="code" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">instructions</a>())</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        instruction-&gt;Accept(&amp;selector_);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule)<span class="keyword"> override </span>{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : rule-&gt;<a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>())</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        instruction-&gt;Accept(&amp;selector_);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    std::vector&lt;Rule*&gt;* cycle_;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    ArgSelector selector_;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  } visitor(cycle);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    connector-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(&amp;visitor);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keywordtype">bool</span>&amp; ret_val) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    assert(ret_val &amp;&amp; !cycle-&gt;empty());</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">/// Cycle detection specialization for visitor-based traversal of event-trees.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a3d93263301751ad6e79c87664427ba95">  244</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> ContinueConnector(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* connector,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                              std::vector&lt;Link*&gt;* cycle) {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keyword">struct </span>{</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* branch) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      std::visit(*<span class="keyword">this</span>, branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork) {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>())</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        (*<span class="keyword">this</span>)(&amp;branch);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* sequence) {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keyword">struct </span>Visitor : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml">NullVisitor</a> {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keyword">explicit</span> Visitor(decltype(cycle) t_cycle) : visitor_cycle_(t_cycle) {}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>* link)<span class="keyword"> override </span>{</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;          <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(const_cast&lt;Link*&gt;(link), visitor_cycle_))</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">throw</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        decltype(cycle) visitor_cycle_;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      } visitor(cycle_);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : sequence-&gt;<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>())</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        instruction-&gt;Accept(&amp;visitor);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    decltype(cycle) cycle_;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  } continue_connector{cycle};</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    continue_connector(&amp;connector-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keywordtype">bool</span>&amp; ret_val) {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    assert(ret_val &amp;&amp; !cycle-&gt;empty());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">/// Retrieves a unique name for a node.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a8f86e1c839eb739736a5c3836cd93c5d">  284</a></span>&#160;<span class="keyword">const</span> std::string&amp; <a class="code" href="cycle_8h.xhtml#a8f86e1c839eb739736a5c3836cd93c5d">GetUniqueName</a>(<span class="keyword">const</span> T* node) {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">Id::unique_name</a>(*node);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">/// Specialization for event-tree link name retrieval.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a230f776f001ca1a60c9ad6ee960aa2f0">  290</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> std::string&amp; <a class="code" href="cycle_8h.xhtml#a8f86e1c839eb739736a5c3836cd93c5d">GetUniqueName</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>* node) {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordflow">return</span> node-&gt;<a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>().<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>();</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">/// Prints the detected cycle from the output</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">/// produced by cycle detection functions.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">/// @tparam T  The node type with GetUniqueName(T*) defined.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">/// @param[in] cycle  Cycle containing nodes in reverse order.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">/// @returns String representation of the cycle.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a15cca15d6c6a9db61edc78ca5d195f9a">  303</a></span>&#160;std::string <a class="code" href="cycle_8h.xhtml#a15cca15d6c6a9db61edc78ca5d195f9a">PrintCycle</a>(<span class="keyword">const</span> std::vector&lt;T*&gt;&amp; cycle) {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  assert(cycle.size() &gt; 1);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  assert(cycle.front() == cycle.back() &amp;&amp; <span class="stringliteral">&quot;No cycle is provided.&quot;</span>);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordflow">return</span> boost::join(</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      boost::adaptors::reverse(cycle) |</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;          boost::adaptors::transformed(</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;              [](T* node) -&gt; decltype(<span class="keyword">auto</span>) { <span class="keywordflow">return</span> <a class="code" href="cycle_8h.xhtml#a8f86e1c839eb739736a5c3836cd93c5d">GetUniqueName</a>(node); }),</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      <span class="stringliteral">&quot;-&gt;&quot;</span>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">/// Checks for cycles in a model constructs.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">/// @tparam T  The type of the node.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">/// @tparam SinglePassRange  The range type with node pointers.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">/// @param[in] container  The range with nodes to be tested.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">/// @param[in] type  The type of nodes for error messages.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">/// @throws CycleError  A cycle is detected in the graph of nodes.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> SinglePassRange&gt;</div><div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a8ff9fbf65ad4582369783058a9dec0fc">  323</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="cycle_8h.xhtml#a8ff9fbf65ad4582369783058a9dec0fc">CheckCycle</a>(<span class="keyword">const</span> SinglePassRange&amp; container, <span class="keyword">const</span> <span class="keywordtype">char</span>* type) {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  std::vector&lt;T*&gt; cycle;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; node : container) {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">DetectCycle</a>(&amp;*node, &amp;cycle)) {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1CycleError.xhtml">CycleError</a>(<span class="stringliteral">&quot;Detected a cycle in &quot;</span> + <a class="code" href="cycle_8h.xhtml#a8f86e1c839eb739736a5c3836cd93c5d">GetUniqueName</a>(&amp;*node) +</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                             <span class="stringliteral">&quot; &quot;</span> + std::string(type) + <span class="stringliteral">&quot;:\n&quot;</span> +</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                             <a class="code" href="cycle_8h.xhtml#a15cca15d6c6a9db61edc78ca5d195f9a">PrintCycle</a>(cycle)));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}  <span class="comment">// namespace scram::mef::cycle</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_a3b505b6a9e7ef49095b73d7d65446571"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">scram::mef::IfThenElse::else_instruction</a></div><div class="ttdeci">Instruction * else_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00121">instruction.h:121</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a5e9e5b23ea9b3c45f67cb2c004ece82c"><div class="ttname"><a href="cycle_8h.xhtml#a5e9e5b23ea9b3c45f67cb2c004ece82c">scram::mef::cycle::GetConnector</a></div><div class="ttdeci">const Formula * GetConnector(Gate *node)</div><div class="ttdoc">Determines the connectors between nodes. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00047">cycle.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_abd842ad7d8b94120439b72ea9af71c49"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">scram::mef::IfThenElse::then_instruction</a></div><div class="ttdeci">Instruction * then_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00117">instruction.h:117</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a8f86e1c839eb739736a5c3836cd93c5d"><div class="ttname"><a href="cycle_8h.xhtml#a8f86e1c839eb739736a5c3836cd93c5d">scram::mef::cycle::GetUniqueName</a></div><div class="ttdeci">const std::string &amp; GetUniqueName(const T *node)</div><div class="ttdoc">Retrieves a unique name for a node. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00284">cycle.h:284</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a12aa312ac26a4fc798ff68816d9482b0"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">const Branch &amp; initial_state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00170">event_tree.h:170</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a21de1e2b8ca8017c9c0c5ef3254b433e"><div class="ttname"><a href="cycle_8h.xhtml#a21de1e2b8ca8017c9c0c5ef3254b433e">scram::mef::cycle::ContinueConnector</a></div><div class="ttdeci">bool ContinueConnector(T *connector, std::vector&lt; N * &gt; *cycle)</div><div class="ttdoc">Helper function to check for cyclic references through connectors. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00151">cycle.h:151</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml">scram::mef::CollectExpression</a></div><div class="ttdoc">The operation of collecting expressions for event tree sequences. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00074">instruction.h:74</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00173">event.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_ad92eeb2ebe9c650e3c5ad90526f2d8f9"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#ad92eeb2ebe9c650e3c5ad90526f2d8f9">scram::mef::Id::unique_name</a></div><div class="ttdeci">static const std::string &amp; unique_name(const Element &amp;element)</div><div class="ttdoc">Produces unique name for the model element within the same type. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00226">element.h:226</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00038">instruction.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a358b7ba8bf8488abfcd22516474b2ad5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">scram::mef::Formula::EventArg</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00230">event.h:230</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml">scram::mef::Block</a></div><div class="ttdoc">Compound instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00130">instruction.h:130</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00078">expression.h:78</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_a7f4be95643441bdad46a15d58ad15c13"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">scram::mef::Sequence::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00040">event_tree.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a4e86a729bae4629de0217c9f8c6960a0"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">scram::mef::Formula::event_args</a></div><div class="ttdeci">const std::vector&lt; EventArg &gt; &amp; event_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00258">event.h:258</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml">scram::mef::IfThenElse</a></div><div class="ttdoc">Conditional application of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00102">instruction.h:102</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af3c5953f817cc202b5009cc4557c7d72"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">scram::mef::Formula::formula_args</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; formula_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00259">event.h:259</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_ac003a658a591ba3581a74b4322df67cb"><div class="ttname"><a href="cycle_8h.xhtml#ac003a658a591ba3581a74b4322df67cb">scram::mef::cycle::DetectCycle</a></div><div class="ttdeci">bool DetectCycle(T *node, std::vector&lt; T * &gt; *cycle)</div><div class="ttdoc">Traverses nodes with connectors to find a cycle. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00119">cycle.h:119</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00165">event_tree.h:165</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a3886fbcbb5f9bc2ce3b45bc64a25559a"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">scram::mef::Link::event_tree</a></div><div class="ttdeci">const EventTree &amp; event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00179">instruction.h:179</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml">scram::mef::SetHouseEvent</a></div><div class="ttdoc">The operation to change house-events. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00055">instruction.h:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml_a64ff8a04a3cce0febdf9fce4cc25d19a"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">scram::mef::Instruction::Accept</a></div><div class="ttdeci">virtual void Accept(InstructionVisitor *visitor) const =0</div><div class="ttdoc">Applies the visitor to the object. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml_a78250514b4f9959087dc96f37e74eff0"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">scram::mef::Block::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00137">instruction.h:137</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml">scram::mef::Rule</a></div><div class="ttdoc">A reusable collection of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00146">instruction.h:146</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_ab063b76c05f086177494eefc8dc57da9"><div class="ttname"><a href="cycle_8h.xhtml#ab063b76c05f086177494eefc8dc57da9">scram::mef::cycle::GetNodes</a></div><div class="ttdeci">auto GetNodes(const Formula *connector)</div><div class="ttdoc">Retrieves nodes from a connector. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00061">cycle.h:61</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml">scram::mef::Link</a></div><div class="ttdoc">A link to another event tree in end-states only. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00173">instruction.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml"><div class="ttname"><a href="event__tree_8h.xhtml">event_tree.h</a></div><div class="ttdoc">Event Tree facilities. </div></div>
<div class="ttc" id="namespacescram_1_1mef_1_1cycle_xhtml"><div class="ttname"><a href="namespacescram_1_1mef_1_1cycle.xhtml">scram::mef::cycle</a></div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00038">cycle.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml">scram::mef::CollectFormula</a></div><div class="ttdoc">The operation of connecting fault tree events into the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00089">instruction.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml">scram::mef::InstructionVisitor</a></div><div class="ttdoc">The base abstract class for instruction visitors. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00186">instruction.h:186</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_aef7ec67f39719b384e5a3ca7f879bdba"><div class="ttname"><a href="cycle_8h.xhtml#aef7ec67f39719b384e5a3ca7f879bdba">scram::mef::cycle::GetConnectors</a></div><div class="ttdeci">auto GetConnectors(const Formula *connector)</div><div class="ttdoc">Retrieves connectors from a connector. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00086">cycle.h:86</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00084">event_tree.h:84</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_ac82c25bb78d12a3bac21ea26cc5cdc99"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">scram::mef::Fork::paths</a></div><div class="ttdeci">const std::vector&lt; Path &gt; &amp; paths() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00155">event_tree.h:155</a></div></div>
<div class="ttc" id="parameter_8h_xhtml"><div class="ttname"><a href="parameter_8h.xhtml">parameter.h</a></div><div class="ttdoc">Parameter expressions that act like a shareable variable. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml">scram::mef::NullVisitor</a></div><div class="ttdoc">Visits only instructions and ignores non-instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00215">instruction.h:215</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a15cca15d6c6a9db61edc78ca5d195f9a"><div class="ttname"><a href="cycle_8h.xhtml#a15cca15d6c6a9db61edc78ca5d195f9a">scram::mef::cycle::PrintCycle</a></div><div class="ttdeci">std::string PrintCycle(const std::vector&lt; T * &gt; &amp;cycle)</div><div class="ttdoc">Prints the detected cycle from the output produced by cycle detection functions. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00303">cycle.h:303</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1CycleError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1CycleError.xhtml">scram::mef::CycleError</a></div><div class="ttdoc">Signals unacceptable cycles in invalid structures. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00119">error.h:119</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a2d5ae6a8ba8ca8f81818d4c12172a5b5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">scram::mef::Branch::target</a></div><div class="ttdeci">void target(Target target)</div><div class="ttdoc">Sets the target for the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00100">event_tree.h:100</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NamedBranch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NamedBranch.xhtml">scram::mef::NamedBranch</a></div><div class="ttdoc">Named branches that can be referenced and reused. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00116">event_tree.h:116</a></div></div>
<div class="ttc" id="instruction_8h_xhtml"><div class="ttname"><a href="instruction_8h.xhtml">instruction.h</a></div><div class="ttdoc">Model and event tree modifier instructions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml">scram::mef::Fork</a></div><div class="ttdoc">Functional event forks. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00142">event_tree.h:142</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a8ff9fbf65ad4582369783058a9dec0fc"><div class="ttname"><a href="cycle_8h.xhtml#a8ff9fbf65ad4582369783058a9dec0fc">scram::mef::cycle::CheckCycle</a></div><div class="ttdeci">void CheckCycle(const SinglePassRange &amp;container, const char *type)</div><div class="ttdoc">Checks for cycles in a model constructs. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00323">cycle.h:323</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a6094da386afbd31ffa1843dc270a0e0f"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">scram::mef::Rule::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00154">instruction.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml">scram::mef::Parameter</a></div><div class="ttdoc">This class provides a representation of a variable in basic event description. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00087">parameter.h:87</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
