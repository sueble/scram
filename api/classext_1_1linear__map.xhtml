<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>ext::linear_map&lt; Key, Value, ErasePolicy, Sequence &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>ext</b></li><li class="navelem"><a class="el" href="classext_1_1linear__map.xhtml">linear_map</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classext_1_1linear__map-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ext::linear_map&lt; Key, Value, ErasePolicy, Sequence &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default).  
 <a href="classext_1_1linear__map.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for ext::linear_map&lt; Key, Value, ErasePolicy, Sequence &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__map__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a08d961aa141430246eb00239bfe7fad4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a08d961aa141430246eb00239bfe7fad4"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> = Key</td></tr>
<tr class="memdesc:a08d961aa141430246eb00239bfe7fad4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs. <br /></td></tr>
<tr class="separator:a08d961aa141430246eb00239bfe7fad4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5fd8dbf9ed1c52fa2aa6fbeaeb45042"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad5fd8dbf9ed1c52fa2aa6fbeaeb45042"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> = Value</td></tr>
<tr class="memdesc:ad5fd8dbf9ed1c52fa2aa6fbeaeb45042"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs. <br /></td></tr>
<tr class="separator:ad5fd8dbf9ed1c52fa2aa6fbeaeb45042"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5183f0827ab239c836c433ef067264a7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5183f0827ab239c836c433ef067264a7"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> = std::pair&lt; <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a>, <a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> &gt;</td></tr>
<tr class="memdesc:a5183f0827ab239c836c433ef067264a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs. <br /></td></tr>
<tr class="separator:a5183f0827ab239c836c433ef067264a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7af8be3bff39fcc6367973f777b2601"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad7af8be3bff39fcc6367973f777b2601"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a> = Sequence&lt; <a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> &gt;</td></tr>
<tr class="memdesc:ad7af8be3bff39fcc6367973f777b2601"><td class="mdescLeft">&#160;</td><td class="mdescRight">Public typedefs. <br /></td></tr>
<tr class="separator:ad7af8be3bff39fcc6367973f777b2601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a6657f9cf6deefe12d60e7b80419c8333"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6657f9cf6deefe12d60e7b80419c8333"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a6657f9cf6deefe12d60e7b80419c8333">pointer</a> = typename container_type::pointer</td></tr>
<tr class="memdesc:a6657f9cf6deefe12d60e7b80419c8333"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a6657f9cf6deefe12d60e7b80419c8333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47f3bcbd6eb0595f57e5b3f92aebca8e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a47f3bcbd6eb0595f57e5b3f92aebca8e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a47f3bcbd6eb0595f57e5b3f92aebca8e">const_pointer</a> = typename container_type::const_pointer</td></tr>
<tr class="memdesc:a47f3bcbd6eb0595f57e5b3f92aebca8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a47f3bcbd6eb0595f57e5b3f92aebca8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5f1e65fd39acf65e6fcceee7f5e3e5b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa5f1e65fd39acf65e6fcceee7f5e3e5b"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#aa5f1e65fd39acf65e6fcceee7f5e3e5b">reference</a> = typename container_type::reference</td></tr>
<tr class="memdesc:aa5f1e65fd39acf65e6fcceee7f5e3e5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:aa5f1e65fd39acf65e6fcceee7f5e3e5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3997bb00bff2678cd2edc5030afa6d99"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3997bb00bff2678cd2edc5030afa6d99"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a3997bb00bff2678cd2edc5030afa6d99">const_reference</a> = typename container_type::const_reference</td></tr>
<tr class="memdesc:a3997bb00bff2678cd2edc5030afa6d99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a3997bb00bff2678cd2edc5030afa6d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49301e501c573a74faad4b4d2069a29e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a49301e501c573a74faad4b4d2069a29e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> = typename container_type::iterator</td></tr>
<tr class="memdesc:a49301e501c573a74faad4b4d2069a29e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a49301e501c573a74faad4b4d2069a29e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bb1188ba3ac1923fd05f511ac449e27"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7bb1188ba3ac1923fd05f511ac449e27"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> = typename container_type::const_iterator</td></tr>
<tr class="memdesc:a7bb1188ba3ac1923fd05f511ac449e27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a7bb1188ba3ac1923fd05f511ac449e27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefa0eec11fa1cdb84b67eec7995afa6e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aefa0eec11fa1cdb84b67eec7995afa6e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">reverse_iterator</a> = typename container_type::reverse_iterator</td></tr>
<tr class="memdesc:aefa0eec11fa1cdb84b67eec7995afa6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:aefa0eec11fa1cdb84b67eec7995afa6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a058b9ab68ffc8aa470f60be073ec1bec"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a058b9ab68ffc8aa470f60be073ec1bec"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a> = typename container_type::const_reverse_iterator</td></tr>
<tr class="memdesc:a058b9ab68ffc8aa470f60be073ec1bec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a058b9ab68ffc8aa470f60be073ec1bec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58e01df831ac347dd7a20f00669035d1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a58e01df831ac347dd7a20f00669035d1"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> = typename container_type::size_type</td></tr>
<tr class="memdesc:a58e01df831ac347dd7a20f00669035d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a58e01df831ac347dd7a20f00669035d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a569edcfc908d1ebc4c6b6f8c027a3eea"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a569edcfc908d1ebc4c6b6f8c027a3eea"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a569edcfc908d1ebc4c6b6f8c027a3eea">difference_type</a> = typename container_type::difference_type</td></tr>
<tr class="memdesc:a569edcfc908d1ebc4c6b6f8c027a3eea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator-related typedefs redeclared from the underlying container type. <br /></td></tr>
<tr class="separator:a569edcfc908d1ebc4c6b6f8c027a3eea"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a06ea6f3a7b047a36ebf53e4af2211161"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a06ea6f3a7b047a36ebf53e4af2211161">count</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key) const </td></tr>
<tr class="memdesc:a06ea6f3a7b047a36ebf53e4af2211161"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determines if an entry with the given key in the map.  <a href="#a06ea6f3a7b047a36ebf53e4af2211161">More...</a><br /></td></tr>
<tr class="separator:a06ea6f3a7b047a36ebf53e4af2211161"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb3ce552aa69dc84e406c59efb6ef11a"><td class="memTemplParams" colspan="2">template&lt;typename Iterator &gt; </td></tr>
<tr class="memitem:abb3ce552aa69dc84e406c59efb6ef11a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#abb3ce552aa69dc84e406c59efb6ef11a">insert</a> (Iterator first1, Iterator last1)</td></tr>
<tr class="memdesc:abb3ce552aa69dc84e406c59efb6ef11a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a range of elements.  <a href="#abb3ce552aa69dc84e406c59efb6ef11a">More...</a><br /></td></tr>
<tr class="separator:abb3ce552aa69dc84e406c59efb6ef11a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a855a9757f53ba88c68240141f1d86bbd"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a855a9757f53ba88c68240141f1d86bbd"><td class="memTemplItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>, bool &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a855a9757f53ba88c68240141f1d86bbd">emplace</a> (Ts &amp;&amp;...args)</td></tr>
<tr class="memdesc:a855a9757f53ba88c68240141f1d86bbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to build and insert an entry.  <a href="#a855a9757f53ba88c68240141f1d86bbd">More...</a><br /></td></tr>
<tr class="separator:a855a9757f53ba88c68240141f1d86bbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a320f5c3dca95395b7a81c6a0713c8e30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a320f5c3dca95395b7a81c6a0713c8e30">erase</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key)</td></tr>
<tr class="memdesc:a320f5c3dca95395b7a81c6a0713c8e30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the entry with a key.  <a href="#a320f5c3dca95395b7a81c6a0713c8e30">More...</a><br /></td></tr>
<tr class="separator:a320f5c3dca95395b7a81c6a0713c8e30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fdd1bb039314a9dcab50830d4a888aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a8fdd1bb039314a9dcab50830d4a888aa">swap</a> (<a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;other) noexcept</td></tr>
<tr class="memdesc:a8fdd1bb039314a9dcab50830d4a888aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps data with another linear map.  <a href="#a8fdd1bb039314a9dcab50830d4a888aa">More...</a><br /></td></tr>
<tr class="separator:a8fdd1bb039314a9dcab50830d4a888aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a670bc30d04c01d2fb124d5ebbc8ade71"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a> () const </td></tr>
<tr class="separator:a670bc30d04c01d2fb124d5ebbc8ade71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac00cd6c6940c6bf4e20bd0c5463a4d84"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#ac00cd6c6940c6bf4e20bd0c5463a4d84">empty</a> () const </td></tr>
<tr class="separator:ac00cd6c6940c6bf4e20bd0c5463a4d84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7277ab7dad0815073650b2977ac8ad97"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7277ab7dad0815073650b2977ac8ad97"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a7277ab7dad0815073650b2977ac8ad97">clear</a> () noexcept</td></tr>
<tr class="memdesc:a7277ab7dad0815073650b2977ac8ad97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases all entries in the map. <br /></td></tr>
<tr class="separator:a7277ab7dad0815073650b2977ac8ad97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaefd7cd0b5bd51c1db2ef4fc8c278ca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#aaaefd7cd0b5bd51c1db2ef4fc8c278ca">reserve</a> (<a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> n)</td></tr>
<tr class="memdesc:aaaefd7cd0b5bd51c1db2ef4fc8c278ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares the linear map for a specified number of entries.  <a href="#aaaefd7cd0b5bd51c1db2ef4fc8c278ca">More...</a><br /></td></tr>
<tr class="separator:aaaefd7cd0b5bd51c1db2ef4fc8c278ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a666f42e1f29d2062dfacff308e5621e1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a666f42e1f29d2062dfacff308e5621e1">capacity</a> () const </td></tr>
<tr class="separator:a666f42e1f29d2062dfacff308e5621e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8dfe218d1150800f39b8e78d5be7c75"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#ad8dfe218d1150800f39b8e78d5be7c75">begin</a> ()</td></tr>
<tr class="separator:ad8dfe218d1150800f39b8e78d5be7c75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c63fe4eb7d4f8f491f009f199290754"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">end</a> ()</td></tr>
<tr class="separator:a5c63fe4eb7d4f8f491f009f199290754"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:af8b379cf5a3e375f0bf7270a9d2ba3e8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af8b379cf5a3e375f0bf7270a9d2ba3e8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#af8b379cf5a3e375f0bf7270a9d2ba3e8">linear_map</a> ()=default</td></tr>
<tr class="memdesc:af8b379cf5a3e375f0bf7270a9d2ba3e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:af8b379cf5a3e375f0bf7270a9d2ba3e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26ba19259697099d1252d79e85e0e31a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a26ba19259697099d1252d79e85e0e31a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a26ba19259697099d1252d79e85e0e31a">linear_map</a> (std::initializer_list&lt; <a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> &gt; init_list)</td></tr>
<tr class="memdesc:a26ba19259697099d1252d79e85e0e31a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:a26ba19259697099d1252d79e85e0e31a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02fc42c5760e5c1fa551861044c81a3f"><td class="memTemplParams" colspan="2"><a class="anchor" id="a02fc42c5760e5c1fa551861044c81a3f"></a>
template&lt;typename Iterator &gt; </td></tr>
<tr class="memitem:a02fc42c5760e5c1fa551861044c81a3f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a02fc42c5760e5c1fa551861044c81a3f">linear_map</a> (Iterator first1, Iterator last1)</td></tr>
<tr class="memdesc:a02fc42c5760e5c1fa551861044c81a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:a02fc42c5760e5c1fa551861044c81a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe6e570aee690d61e44ce1b2d530103c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abe6e570aee690d61e44ce1b2d530103c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#abe6e570aee690d61e44ce1b2d530103c">linear_map</a> (const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;lm)</td></tr>
<tr class="memdesc:abe6e570aee690d61e44ce1b2d530103c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:abe6e570aee690d61e44ce1b2d530103c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca979eb4f044ce1232ff90a47f96cd19"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aca979eb4f044ce1232ff90a47f96cd19"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#aca979eb4f044ce1232ff90a47f96cd19">linear_map</a> (<a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;&amp;lm) noexcept</td></tr>
<tr class="memdesc:aca979eb4f044ce1232ff90a47f96cd19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:aca979eb4f044ce1232ff90a47f96cd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87e9f68f710455fc8a3f76742c0b9532"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a87e9f68f710455fc8a3f76742c0b9532"></a>
<a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a87e9f68f710455fc8a3f76742c0b9532">operator=</a> (const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;lm)</td></tr>
<tr class="memdesc:a87e9f68f710455fc8a3f76742c0b9532"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:a87e9f68f710455fc8a3f76742c0b9532"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78a7d7e9abef7b0574d8952465d40d74"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a78a7d7e9abef7b0574d8952465d40d74"></a>
<a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a78a7d7e9abef7b0574d8952465d40d74">operator=</a> (<a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;&amp;lm) noexcept</td></tr>
<tr class="memdesc:a78a7d7e9abef7b0574d8952465d40d74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructors and assignment operators. <br /></td></tr>
<tr class="separator:a78a7d7e9abef7b0574d8952465d40d74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a040536f2310dffafb8ac0c3de0ca6673"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a040536f2310dffafb8ac0c3de0ca6673">find</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key) const </td></tr>
<tr class="memdesc:a040536f2310dffafb8ac0c3de0ca6673"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds an entry in the map.  <a href="#a040536f2310dffafb8ac0c3de0ca6673">More...</a><br /></td></tr>
<tr class="separator:a040536f2310dffafb8ac0c3de0ca6673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0cd640adc0a08564eaaa7c20fe2074f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#ab0cd640adc0a08564eaaa7c20fe2074f">find</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key)</td></tr>
<tr class="memdesc:ab0cd640adc0a08564eaaa7c20fe2074f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds an entry in the map.  <a href="#ab0cd640adc0a08564eaaa7c20fe2074f">More...</a><br /></td></tr>
<tr class="separator:ab0cd640adc0a08564eaaa7c20fe2074f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a5a9ff2b51ccd613fe71b0ba392c0a333"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a5a9ff2b51ccd613fe71b0ba392c0a333">operator[]</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key)</td></tr>
<tr class="memdesc:a5a9ff2b51ccd613fe71b0ba392c0a333"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accesses an existing or default constructed entry.  <a href="#a5a9ff2b51ccd613fe71b0ba392c0a333">More...</a><br /></td></tr>
<tr class="separator:a5a9ff2b51ccd613fe71b0ba392c0a333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a164ff23607ed32c6701bddad87b99e4d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a164ff23607ed32c6701bddad87b99e4d">operator[]</a> (<a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&amp;key)</td></tr>
<tr class="memdesc:a164ff23607ed32c6701bddad87b99e4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accesses an existing or default constructed entry.  <a href="#a164ff23607ed32c6701bddad87b99e4d">More...</a><br /></td></tr>
<tr class="separator:a164ff23607ed32c6701bddad87b99e4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:abec7fa7fbdc9f24e5028ba4db54c1eb4"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#abec7fa7fbdc9f24e5028ba4db54c1eb4">at</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key) const </td></tr>
<tr class="memdesc:abec7fa7fbdc9f24e5028ba4db54c1eb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accesses the value of the entry.  <a href="#abec7fa7fbdc9f24e5028ba4db54c1eb4">More...</a><br /></td></tr>
<tr class="separator:abec7fa7fbdc9f24e5028ba4db54c1eb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88d6b52e8f9bcf984401462f852934cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a88d6b52e8f9bcf984401462f852934cf">at</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;key)</td></tr>
<tr class="memdesc:a88d6b52e8f9bcf984401462f852934cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accesses the value of the entry.  <a href="#a88d6b52e8f9bcf984401462f852934cf">More...</a><br /></td></tr>
<tr class="separator:a88d6b52e8f9bcf984401462f852934cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a5ac43a9a0f3b364e3fa12af1b3a2ecd9"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">insert</a> (const <a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> &amp;p)</td></tr>
<tr class="memdesc:a5ac43a9a0f3b364e3fa12af1b3a2ecd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a key-value pair into the map if the pair is not in the map.  <a href="#a5ac43a9a0f3b364e3fa12af1b3a2ecd9">More...</a><br /></td></tr>
<tr class="separator:a5ac43a9a0f3b364e3fa12af1b3a2ecd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23a9233e73a24629346fca99f7dcde3f"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>, bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a23a9233e73a24629346fca99f7dcde3f">insert</a> (<a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> &amp;&amp;p)</td></tr>
<tr class="memdesc:a23a9233e73a24629346fca99f7dcde3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a key-value pair into the map if the pair is not in the map.  <a href="#a23a9233e73a24629346fca99f7dcde3f">More...</a><br /></td></tr>
<tr class="separator:a23a9233e73a24629346fca99f7dcde3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:acdd54fa2cbba082a782a5d63391cf34c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#acdd54fa2cbba082a782a5d63391cf34c">erase</a> (<a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> pos)</td></tr>
<tr class="memdesc:acdd54fa2cbba082a782a5d63391cf34c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the entry pointed by an iterator.  <a href="#acdd54fa2cbba082a782a5d63391cf34c">More...</a><br /></td></tr>
<tr class="separator:acdd54fa2cbba082a782a5d63391cf34c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb89a7d90ae3efbdb066954169b784f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#aeb89a7d90ae3efbdb066954169b784f3">erase</a> (<a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> pos)</td></tr>
<tr class="memdesc:aeb89a7d90ae3efbdb066954169b784f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the entry pointed by an iterator.  <a href="#aeb89a7d90ae3efbdb066954169b784f3">More...</a><br /></td></tr>
<tr class="separator:aeb89a7d90ae3efbdb066954169b784f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a6ce9a2702adb36c3ae89057a1d968050"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a6ce9a2702adb36c3ae89057a1d968050">data</a> ()</td></tr>
<tr class="separator:a6ce9a2702adb36c3ae89057a1d968050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bce69fc69d62c2d32a9d370d9114bed"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a6bce69fc69d62c2d32a9d370d9114bed">data</a> () const </td></tr>
<tr class="separator:a6bce69fc69d62c2d32a9d370d9114bed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a7b2d64818fa12efec3ab6b73cf3b9f6b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a7b2d64818fa12efec3ab6b73cf3b9f6b">cbegin</a> () const </td></tr>
<tr class="separator:a7b2d64818fa12efec3ab6b73cf3b9f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a670a2d2848d24cc3179bf8479077de33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a670a2d2848d24cc3179bf8479077de33">begin</a> () const </td></tr>
<tr class="separator:a670a2d2848d24cc3179bf8479077de33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a2763458f8ecd3e95794dd694e1cab51f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a2763458f8ecd3e95794dd694e1cab51f">cend</a> () const </td></tr>
<tr class="separator:a2763458f8ecd3e95794dd694e1cab51f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18414ff7fcc56a55d577cc45ca87d463"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a18414ff7fcc56a55d577cc45ca87d463">end</a> () const </td></tr>
<tr class="separator:a18414ff7fcc56a55d577cc45ca87d463"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:a4f6ec74d5218a389b908e05fe5028697"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4f6ec74d5218a389b908e05fe5028697"></a>
<a class="el" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a4f6ec74d5218a389b908e05fe5028697">rbegin</a> ()</td></tr>
<tr class="memdesc:a4f6ec74d5218a389b908e05fe5028697"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a4f6ec74d5218a389b908e05fe5028697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbebc5eea7372281db441a34cbebbb6a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abbebc5eea7372281db441a34cbebbb6a"></a>
<a class="el" href="classext_1_1linear__map.xhtml#aefa0eec11fa1cdb84b67eec7995afa6e">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#abbebc5eea7372281db441a34cbebbb6a">rend</a> ()</td></tr>
<tr class="memdesc:abbebc5eea7372281db441a34cbebbb6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:abbebc5eea7372281db441a34cbebbb6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ac49c8ab2fd6e5b8b194095afa7c654"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1ac49c8ab2fd6e5b8b194095afa7c654"></a>
<a class="el" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a1ac49c8ab2fd6e5b8b194095afa7c654">crbegin</a> () const </td></tr>
<tr class="memdesc:a1ac49c8ab2fd6e5b8b194095afa7c654"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a1ac49c8ab2fd6e5b8b194095afa7c654"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8686f8396f851c77d200a8caf0d10a0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab8686f8396f851c77d200a8caf0d10a0"></a>
<a class="el" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#ab8686f8396f851c77d200a8caf0d10a0">rbegin</a> () const </td></tr>
<tr class="memdesc:ab8686f8396f851c77d200a8caf0d10a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:ab8686f8396f851c77d200a8caf0d10a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87908dd89db444fa0ac95f9e517dfedc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a87908dd89db444fa0ac95f9e517dfedc"></a>
<a class="el" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a87908dd89db444fa0ac95f9e517dfedc">crend</a> () const </td></tr>
<tr class="memdesc:a87908dd89db444fa0ac95f9e517dfedc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a87908dd89db444fa0ac95f9e517dfedc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b7f7cc9b2f553648442568908046b09"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0b7f7cc9b2f553648442568908046b09"></a>
<a class="el" href="classext_1_1linear__map.xhtml#a058b9ab68ffc8aa470f60be073ec1bec">const_reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a0b7f7cc9b2f553648442568908046b09">rend</a> () const </td></tr>
<tr class="memdesc:a0b7f7cc9b2f553648442568908046b09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Corresponding reverse iterators. <br /></td></tr>
<tr class="separator:a0b7f7cc9b2f553648442568908046b09"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a63f097fd1b9f4f32564bd061273247ab"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a63f097fd1b9f4f32564bd061273247ab"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a63f097fd1b9f4f32564bd061273247ab">swap</a> (<a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;lhs, <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;rhs) noexcept</td></tr>
<tr class="memdesc:a63f097fd1b9f4f32564bd061273247ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Friend swap definition for convenience sake. <br /></td></tr>
<tr class="separator:a63f097fd1b9f4f32564bd061273247ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:aed65ea0822cc8269b308d57787010870"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#aed65ea0822cc8269b308d57787010870">operator==</a> (const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;lhs, const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;rhs)</td></tr>
<tr class="memdesc:aed65ea0822cc8269b308d57787010870"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-member equality test operators.  <a href="#aed65ea0822cc8269b308d57787010870">More...</a><br /></td></tr>
<tr class="separator:aed65ea0822cc8269b308d57787010870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bf1e8e739a7c2442fad8c169abb08b4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classext_1_1linear__map.xhtml#a8bf1e8e739a7c2442fad8c169abb08b4">operator!=</a> (const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;lhs, const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a> &amp;rhs)</td></tr>
<tr class="memdesc:a8bf1e8e739a7c2442fad8c169abb08b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-member equality test operators.  <a href="#a8bf1e8e739a7c2442fad8c169abb08b4">More...</a><br /></td></tr>
<tr class="separator:a8bf1e8e739a7c2442fad8c169abb08b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt;<br />
class ext::linear_map&lt; Key, Value, ErasePolicy, Sequence &gt;</h3>

<p>An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default). </p>
<p>This map is designed for a small number of elements and for small &lt;Key, Value&gt; size pairs. Consider this class a convenient wrapper around std::vector&lt;std::pair&lt;Key, Value&gt;&gt;.</p>
<p>Since this map is based on the vector by default, the order of insertions is preserved, and it provides random access iterators.</p>
<p>The major differences from the standard library maps:</p>
<ol type="1">
<li>The entry is std::pair&lt;Key, Value&gt; instead of std::pair&lt;const Key, Value&gt;, which means that the key can be modified as long as it stays unique.</li>
<li>Iterators, references, pointers can be invalidated by modifier functions (insert, erase, reserve, etc.). This is the inherited behavior from std::vector.</li>
<li>Some API may be extra or missing.</li>
</ol>
<p>The performance of the map critically depends on the number of entries, the size of the key-value pair, and the cost of comparing keys for equality. The advantage of the <a class="el" href="classext_1_1linear__map.xhtml" title="An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default)...">linear_map</a> comes from cache-friendliness, and fewer CPU front-end and back-end stalls.</p>
<p>From crude experimental results with random entries comparing with std::map, std::unordered_map, boost::flat_map:</p>
<ol type="1">
<li>For Key=int, Value=Object, sizeof(Object)=24, the <a class="el" href="classext_1_1linear__map.xhtml" title="An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default)...">linear_map</a> outperforms up to 50 entries.</li>
<li>For Key=std::string(20 char), Value=Object, sizeof(Object)=24, the <a class="el" href="classext_1_1linear__map.xhtml" title="An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default)...">linear_map</a> performs equally well up to 10 entries.</li>
</ol>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Key</td><td>The type of the unique keys. </td></tr>
    <tr><td class="paramname">Value</td><td>The type of the values associated with the keys. </td></tr>
    <tr><td class="paramname">ErasePolicy</td><td>The policy class that provides <code>erase(it, *container)</code> static member function to control the element erasure from the container. </td></tr>
    <tr><td class="paramname">Sequence</td><td>The underlying container type. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00133">133</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a040536f2310dffafb8ac0c3de0ca6673"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds an entry in the map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to the entry, or <a class="el" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">end()</a> if not found. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00218">218</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

<p>Referenced by <a class="el" href="linear__map_8h_source.xhtml#l00272">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::at()</a>, <a class="el" href="linear__map_8h_source.xhtml#l00235">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::count()</a>, <a class="el" href="linear__map_8h_source.xhtml#l00332">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::emplace()</a>, <a class="el" href="linear__map_8h_source.xhtml#l00358">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::erase()</a>, <a class="el" href="linear__map_8h_source.xhtml#l00293">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::insert()</a>, and <a class="el" href="linear__map_8h_source.xhtml#l00246">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::operator[]()</a>.</p>

<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__map_a040536f2310dffafb8ac0c3de0ca6673_icgraph.svg" width="466" height="452"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ab0cd640adc0a08564eaaa7c20fe2074f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::find </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Finds an entry in the map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator pointing to the entry, or <a class="el" href="classext_1_1linear__map.xhtml#a5c63fe4eb7d4f8f491f009f199290754">end()</a> if not found. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00223">223</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a06ea6f3a7b047a36ebf53e4af2211161"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::count </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Determines if an entry with the given key in the map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if there's an entry, 0 otherwise. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00235">235</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5a9ff2b51ccd613fe71b0ba392c0a333"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accesses an existing or default constructed entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A reference to the value of the entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00246">246</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a164ff23607ed32c6701bddad87b99e4d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accesses an existing or default constructed entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A reference to the value of the entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00254">254</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="abec7fa7fbdc9f24e5028ba4db54c1eb4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accesses the value of the entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference to the value.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>The entry is not in the map. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00272">272</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a88d6b52e8f9bcf984401462f852934cf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#ad5fd8dbf9ed1c52fa2aa6fbeaeb45042">mapped_type</a>&amp; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accesses the value of the entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The reference to the value.</dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">std::out_of_range</td><td>The entry is not in the map. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00279">279</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5ac43a9a0f3b364e3fa12af1b3a2ecd9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>, bool&gt; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> &amp;&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a key-value pair into the map if the pair is not in the map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>The entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair of an iterator and insertion flag. The iterator points to possibly inserted entry, and the flag indicates whether the entry is actually inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00293">293</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

<p>Referenced by <a class="el" href="linear__map_8h_source.xhtml#l00189">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::linear_map()</a>.</p>

<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__map_a5ac43a9a0f3b364e3fa12af1b3a2ecd9_icgraph.svg" width="443" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a23a9233e73a24629346fca99f7dcde3f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>, bool&gt; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::insert </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__map.xhtml#a5183f0827ab239c836c433ef067264a7">value_type</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a key-value pair into the map if the pair is not in the map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>The entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair of an iterator and insertion flag. The iterator points to possibly inserted entry, and the flag indicates whether the entry is actually inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00301">301</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="abb3ce552aa69dc84e406c59efb6ef11a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<div class="memtemplate">
template&lt;typename Iterator &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>first1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Iterator&#160;</td>
          <td class="paramname"><em>last1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a range of elements. </p>
<p>The range is not assumed to be unique.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Iterator</td><td>Iterator to the container with key-value pairs.</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">first1</td><td>The beginning of the range. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last1</td><td>The end of the range. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00318">318</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a855a9757f53ba88c68240141f1d86bbd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<div class="memtemplate">
template&lt;typename... Ts&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>, bool&gt; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::emplace </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attempts to build and insert an entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments for the construction of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing to the entry, and a flag indicating if the insertion actually happened. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00332">332</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="acdd54fa2cbba082a782a5d63391cf34c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erases the entry pointed by an iterator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>An iterator pointing to the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing after the entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00348">348</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

<p>Referenced by <a class="el" href="linear__map_8h_source.xhtml#l00358">ext::linear_map&lt; int, GateWeakPtr, ext::MoveEraser &gt;::erase()</a>.</p>

<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__map_acdd54fa2cbba082a782a5d63391cf34c_icgraph.svg" width="443" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aeb89a7d90ae3efbdb066954169b784f3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::erase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a>&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erases the entry pointed by an iterator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>An iterator pointing to the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing after the entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00349">349</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a320f5c3dca95395b7a81c6a0713c8e30"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::erase </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml#a08d961aa141430246eb00239bfe7fad4">key_type</a> &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erases the entry with a key. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">key</td><td>The key of the entry.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>1 if the existing entry has been removed, 0 if there's no entry with the given key. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00358">358</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8fdd1bb039314a9dcab50830d4a888aa"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__map.xhtml">linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swaps data with another linear map. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">other</td><td>Another linear map. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00369">369</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a670bc30d04c01d2fb124d5ebbc8ade71"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The number of entries in the map. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00372">372</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

<p>Referenced by <a class="el" href="bdd_8cc_source.xhtml#l00084">scram::core::Bdd::Analyze()</a>, and <a class="el" href="zbdd_8cc_source.xhtml#l00228">scram::core::Zbdd::FindOrAddVertex()</a>.</p>

<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classext_1_1linear__map_a670bc30d04c01d2fb124d5ebbc8ade71_icgraph.svg" width="403" height="104"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ac00cd6c6940c6bf4e20bd0c5463a4d84"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>true if there are no entries. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00375">375</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="aaaefd7cd0b5bd51c1db2ef4fc8c278ca"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::reserve </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a>&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares the linear map for a specified number of entries. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>The number of expected entries. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00383">383</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a666f42e1f29d2062dfacff308e5621e1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a58e01df831ac347dd7a20f00669035d1">size_type</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::capacity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The capacity of the underlying container. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00386">386</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6ce9a2702adb36c3ae89057a1d968050"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a>&amp; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The underlying data container. The container elements are ordered exactly as inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00391">391</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a6bce69fc69d62c2d32a9d370d9114bed"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classext_1_1linear__map.xhtml#ad7af8be3bff39fcc6367973f777b2601">container_type</a>&amp; <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The underlying data container. The container elements are ordered exactly as inserted. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00392">392</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad8dfe218d1150800f39b8e78d5be7c75"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read/write iterator pointing to the first entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00396">396</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5c63fe4eb7d4f8f491f009f199290754"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a49301e501c573a74faad4b4d2069a29e">iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read/write iterator pointing one past the last entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00398">398</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7b2d64818fa12efec3ab6b73cf3b9f6b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::cbegin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing to the first entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00403">403</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a670a2d2848d24cc3179bf8479077de33"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing to the first entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00404">404</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2763458f8ecd3e95794dd694e1cab51f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::cend </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing one past the last entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00410">410</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a18414ff7fcc56a55d577cc45ca87d463"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classext_1_1linear__map.xhtml#a7bb1188ba3ac1923fd05f511ac449e27">const_iterator</a> <a class="el" href="classext_1_1linear__map.xhtml">ext::linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A read-only iterator pointing one past the last entry. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00411">411</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a class="anchor" id="aed65ea0822cc8269b308d57787010870"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Non-member equality test operators. </p>
<p>The complexity is O(N^2).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>First map. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Second map.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The order of elements is not relevant. If the order matters for equality, compare the underlying data containers directly. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00145">145</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8bf1e8e739a7c2442fad8c169abb08b4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Key, typename Value, class ErasePolicy = DefaultEraser, template&lt; typename... &gt; class Sequence = std::vector&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classext_1_1linear__map.xhtml">linear_map</a>&lt; Key, Value, ErasePolicy, Sequence &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Non-member equality test operators. </p>
<p>The complexity is O(N^2).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>First map. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Second map.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The order of elements is not relevant. If the order matters for equality, compare the underlying data containers directly. </dd></dl>

<p>Definition at line <a class="el" href="linear__map_8h_source.xhtml#l00154">154</a> of file <a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="linear__map_8h_source.xhtml">linear_map.h</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
