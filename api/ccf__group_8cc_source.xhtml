<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>ccf_group.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ccf_group.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ccf__group_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of various common cause failure models.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ccf__group_8h.xhtml">ccf_group.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="constant_8h.xhtml">expression/constant.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="numerical_8h.xhtml">expression/numerical.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="combination__iterator_8h.xhtml">ext/combination_iterator.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="float__compare_8h.xhtml">ext/float_compare.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfEvent.xhtml#a0b325e22d2cd8edbc4fea6af6d93ecc1">   34</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfEvent.xhtml#a0b325e22d2cd8edbc4fea6af6d93ecc1">CcfEvent::CcfEvent</a>(std::string name, <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>(std::move(name), ccf_group-&gt;base_path(), ccf_group-&gt;role()),</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      ccf_group_(*ccf_group) {}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a9d6dbf5a3154a1537a806e7f3993c710">   38</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a9d6dbf5a3154a1537a806e7f3993c710">CcfGroup::AddMember</a>(<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* basic_event) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keywordflow">if</span> (distribution_ || factors_.empty() == <span class="keyword">false</span>) {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;No more members accepted. The distribution for &quot;</span> +</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                           <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() +</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                           <span class="stringliteral">&quot; CCF group has already been defined.&quot;</span>));</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(members_, [&amp;basic_event](<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* member) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> member-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() == basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      })) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(<span class="stringliteral">&quot;Duplicate member &quot;</span> +</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                       basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() + <span class="stringliteral">&quot; in &quot;</span> +</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                       <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group.&quot;</span>));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  members_.push_back(basic_event);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac5ff8673a8ebbecee6a645671d5ae063">   54</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac5ff8673a8ebbecee6a645671d5ae063">CcfGroup::AddDistribution</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* distr) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordflow">if</span> (distribution_)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;CCF distribution is already defined.&quot;</span>));</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">if</span> (members_.size() &lt; 2) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() +</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                              <span class="stringliteral">&quot; CCF group must have at least 2 members.&quot;</span>));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  distribution_ = distr;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="comment">// Define probabilities of all basic events.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* member : members_)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    member-&gt;expression(distribution_);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a585735fdd3be1d19d39705dfb80bca37">   67</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a585735fdd3be1d19d39705dfb80bca37">CcfGroup::AddFactor</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* factor, std::optional&lt;int&gt; level) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordtype">int</span> min_level = this-&gt;min_level();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">if</span> (!level)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    level = prev_level_ ? (prev_level_ + 1) : min_level;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordflow">if</span> (*level &lt;= 0 || members_.empty())</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Invalid CCF group factor setup.&quot;</span>));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">if</span> (*level &lt; min_level) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="stringliteral">&quot;The CCF factor level (&quot;</span> + std::to_string(*level) +</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="stringliteral">&quot;) is less than the minimum level (&quot;</span> + std::to_string(min_level) +</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="stringliteral">&quot;) required by &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group.&quot;</span>));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">if</span> (members_.size() &lt; *level) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;The CCF factor level &quot;</span> + std::to_string(*level) +</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                              <span class="stringliteral">&quot; is more than the number of members (&quot;</span> +</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                              std::to_string(members_.size()) + <span class="stringliteral">&quot;) in &quot;</span> +</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                              <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group.&quot;</span>));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordtype">int</span> index = *level - min_level;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keywordflow">if</span> (index &lt; factors_.size() &amp;&amp; factors_[index].second != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1RedefinitionError.xhtml">RedefinitionError</a>(<span class="stringliteral">&quot;Redefinition of CCF factor for level &quot;</span> +</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                  std::to_string(*level) + <span class="stringliteral">&quot; in &quot;</span> +</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                  <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group.&quot;</span>));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">if</span> (index &gt;= factors_.size())</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    factors_.resize(index + 1);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  factors_[index] = {*level, factor};</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  prev_level_ = *level;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">  101</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">CcfGroup::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordflow">if</span> (!distribution_ || members_.empty() || factors_.empty())</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;CCF group &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; is not initialized.&quot;</span>));</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <a class="code" href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">EnsureProbability</a>(distribution_,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group distribution.&quot;</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, Expression*&gt;&amp; f : factors_) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (!f.second) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Missing some CCF factors for &quot;</span> +</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group.&quot;</span>));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">EnsureProbability</a>(f.second, <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group factors.&quot;</span>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                      <span class="stringliteral">&quot;fraction&quot;</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  this-&gt;DoValidate();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/// Joins CCF combination proxy gate names</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/// to create a distinct name for a new CCF event.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">/// @param[in] combination  The combination of events.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">/// @returns A uniquely mangled string for the combination.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span>std::string JoinNames(<span class="keyword">const</span> std::vector&lt;Gate*&gt;&amp; combination) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  std::string <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = combination.begin(), it_end = std::prev(combination.end());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;       it != it_end; ++it) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    name += (*it)-&gt;name() + <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  name += combination.back()-&gt;name() + <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#ab399c5ed0c1d7d0a316ac3b7244b7eb9">  140</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ab399c5ed0c1d7d0a316ac3b7244b7eb9">CcfGroup::ApplyModel</a>() {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="comment">// Construct replacement proxy gates for member basic events.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  std::vector&lt;Gate*&gt; proxy_gates;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* member : members_) {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">auto</span> new_gate = std::make_unique&lt;Gate&gt;(member-&gt;name(), member-&gt;base_path(),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                           member-&gt;role());</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    assert(member-&gt;id() == new_gate-&gt;id());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    new_gate-&gt;formula(std::make_unique&lt;Formula&gt;(kOr));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    proxy_gates.push_back(new_gate.get());</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    member-&gt;ccf_gate(std::move(new_gate));</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">ExpressionMap</a> probabilities = this-&gt;CalculateProbabilities();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  assert(probabilities.size() &gt; 1);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; entry : probabilities) {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">int</span> level = entry.first;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* prob = entry.second;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> combination : ext::make_combination_generator(</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;             level, proxy_gates.begin(), proxy_gates.end())) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      <span class="keyword">auto</span> ccf_event = std::make_unique&lt;CcfEvent&gt;(JoinNames(combination), <span class="keyword">this</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      ccf_event-&gt;expression(prob);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : combination)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        gate-&gt;formula().AddArgument(ccf_event.get());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      ccf_event-&gt;members(std::move(combination));  <span class="comment">// Move, at last.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      ccf_events_.emplace_back(std::move(ccf_event));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">CcfGroup::ExpressionMap</a> BetaFactorModel::CalculateProbabilities() {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() == 1);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">CcfGroup::members</a>().size() == <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().front().first);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* beta = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().begin()-&gt;second;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  probabilities.emplace_back(  <span class="comment">// (1 - beta) * Q</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      1, CcfGroup::Register&lt;Mul&gt;(</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;             {CcfGroup::Register&lt;Sub&gt;({&amp;<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#acdd0cd916d7d1e5123971974933324d4">ConstantExpression::kOne</a>, beta}),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;              <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a791a1a130e5551a7b70da25df8dbf765">CcfGroup::distribution</a>()}));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  probabilities.emplace_back(  <span class="comment">// beta * Q</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().front().first,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      CcfGroup::Register&lt;Mul&gt;({beta, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a791a1a130e5551a7b70da25df8dbf765">CcfGroup::distribution</a>()}));</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">/// Helper function to calculate reciprocal of</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">/// nCk (n-choose-k) combination.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">/// @param[in] n  The total number elements.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">/// @param[in] k  Subset size.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">/// @returns 1 / nCk</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span><span class="keywordtype">double</span> CalculateCombinationReciprocal(<span class="keywordtype">int</span> n, <span class="keywordtype">int</span> k) {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  assert(n &gt;= 0);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  assert(k &gt;= 0);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  assert(n &gt;= k);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keywordflow">if</span> (n - k &gt; k)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    k = n - k;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">double</span> result = 1;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= n - k; ++i) {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    result *= <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(i) / static_cast&lt;double&gt;(k + i);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">CcfGroup::ExpressionMap</a> MglModel::CalculateProbabilities() {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordtype">int</span> max_level = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().back().first;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() == max_level - 1);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keywordtype">int</span> num_members = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">CcfGroup::members</a>().size();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_level; ++i) {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">double</span> mult = CalculateCombinationReciprocal(num_members - 1, i);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    std::vector&lt;Expression*&gt; args;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    args.push_back(CcfGroup::Register&lt;ConstantExpression&gt;(mult));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; ++j) {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      args.push_back(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()[j].second);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (i &lt; max_level - 1) {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      args.push_back(CcfGroup::Register&lt;Sub&gt;(</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;          {&amp;<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#acdd0cd916d7d1e5123971974933324d4">ConstantExpression::kOne</a>, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()[i].second}));</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    args.push_back(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a791a1a130e5551a7b70da25df8dbf765">CcfGroup::distribution</a>());</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    probabilities.emplace_back(i + 1, CcfGroup::Register&lt;Mul&gt;(std::move(args)));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  assert(probabilities.size() == max_level);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">CcfGroup::ExpressionMap</a> AlphaFactorModel::CalculateProbabilities() {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordtype">int</span> max_level = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().back().first;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() == max_level);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  std::vector&lt;Expression*&gt; sum_args;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, Expression*&gt;&amp; factor : <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()) {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    sum_args.emplace_back(CcfGroup::Register&lt;Mul&gt;(</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        {CcfGroup::Register&lt;ConstantExpression&gt;(factor.first), factor.second}));</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* sum = CcfGroup::Register&lt;Add&gt;(std::move(sum_args));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordtype">int</span> num_members = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">CcfGroup::members</a>().size();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_level; ++i) {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">double</span> mult = CalculateCombinationReciprocal(num_members - 1, i);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* level = CcfGroup::Register&lt;ConstantExpression&gt;(i + 1);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* fraction =</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        CcfGroup::Register&lt;Div&gt;({<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()[i].second, sum});</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* prob = CcfGroup::Register&lt;Mul&gt;(</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        {level, CcfGroup::Register&lt;ConstantExpression&gt;(mult), fraction,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;         <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a791a1a130e5551a7b70da25df8dbf765">CcfGroup::distribution</a>()});</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    probabilities.emplace_back(i + 1, prob);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  assert(probabilities.size() == max_level);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keywordtype">void</span> PhiFactorModel::DoValidate()<span class="keyword"> const </span>{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keywordtype">double</span> sum = 0;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordtype">double</span> sum_min = 0;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordtype">double</span> sum_max = 0;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, Expression*&gt;&amp; factor : <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()) {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    sum += factor.second-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> interval = factor.second-&gt;interval();</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    sum_min += interval.lower();</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    sum_max += interval.upper();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">if</span> (!ext::is_close(1, sum, 1e-4) || !ext::is_close(1, sum_min, 1e-4) ||</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      !ext::is_close(1, sum_max, 1e-4)) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;The factors for Phi model &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">CcfGroup::name</a>() +</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                              <span class="stringliteral">&quot; CCF group must sum to 1.&quot;</span>));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">CcfGroup::ExpressionMap</a> PhiFactorModel::CalculateProbabilities() {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordtype">int</span> max_level = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().back().first;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, Expression*&gt;&amp; factor : <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()) {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* prob =</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        CcfGroup::Register&lt;Mul&gt;({factor.second, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a791a1a130e5551a7b70da25df8dbf765">CcfGroup::distribution</a>()});</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    probabilities.emplace_back(factor.first, prob);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  assert(probabilities.size() == max_level);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1CcfEvent_xhtml_a0b325e22d2cd8edbc4fea6af6d93ecc1"><div class="ttname"><a href="classscram_1_1mef_1_1CcfEvent.xhtml#a0b325e22d2cd8edbc4fea6af6d93ecc1">scram::mef::CcfEvent::CcfEvent</a></div><div class="ttdeci">CcfEvent(std::string name, const CcfGroup *ccf_group)</div><div class="ttdoc">Constructs CCF event with specific name that is used for internal purposes. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00034">ccf_group.cc:34</a></div></div>
<div class="ttc" id="expression_8h_xhtml_afc9530f5ba8d4c2ccf0b40c7422a44c0"><div class="ttname"><a href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">scram::mef::Interval</a></div><div class="ttdeci">boost::icl::continuous_interval&lt; double &gt; Interval</div><div class="ttdoc">Validation domain interval for expression values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00035">expression.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a870cff942d6ce90dc50de37e17a151ee"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">scram::mef::CcfGroup::factors</a></div><div class="ttdeci">const ExpressionMap &amp; factors() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00159">ccf_group.h:159</a></div></div>
<div class="ttc" id="expression_8cc_xhtml_a2c0a639b694ccfdf4b7d6913d8a635de"><div class="ttname"><a href="expression_8cc.xhtml#a2c0a639b694ccfdf4b7d6913d8a635de">scram::mef::EnsureProbability</a></div><div class="ttdeci">void EnsureProbability(Expression *expression, const std::string &amp;description, const char *type)</div><div class="ttdoc">Ensures that expression can be used for probability ([0, 1]). </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00062">expression.cc:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a9d6dbf5a3154a1537a806e7f3993c710"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a9d6dbf5a3154a1537a806e7f3993c710">scram::mef::CcfGroup::AddMember</a></div><div class="ttdeci">void AddMember(BasicEvent *basic_event)</div><div class="ttdoc">Adds a basic event into this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00038">ccf_group.cc:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a06dd05cabcbeddf42090536f6a47a184"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a06dd05cabcbeddf42090536f6a47a184">scram::mef::CcfGroup::members</a></div><div class="ttdeci">const std::vector&lt; BasicEvent * &gt; &amp; members() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00093">ccf_group.h:93</a></div></div>
<div class="ttc" id="numerical_8h_xhtml"><div class="ttname"><a href="numerical_8h.xhtml">numerical.h</a></div><div class="ttdoc">A collection of numerical expressions. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1RedefinitionError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1RedefinitionError.xhtml">scram::mef::RedefinitionError</a></div><div class="ttdoc">For cases when events or practically anything is redefined. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00104">error.h:104</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a31cbe59ce89f295de7bb810d8b75990e"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">scram::mef::CcfGroup::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Validates the setup for the CCF model and group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00101">ccf_group.cc:101</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a585735fdd3be1d19d39705dfb80bca37"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a585735fdd3be1d19d39705dfb80bca37">scram::mef::CcfGroup::AddFactor</a></div><div class="ttdeci">void AddFactor(Expression *factor, std::optional&lt; int &gt; level={})</div><div class="ttdoc">Adds a CCF factor for the specified model. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00067">ccf_group.cc:67</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_ab399c5ed0c1d7d0a316ac3b7244b7eb9"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#ab399c5ed0c1d7d0a316ac3b7244b7eb9">scram::mef::CcfGroup::ApplyModel</a></div><div class="ttdeci">void ApplyModel()</div><div class="ttdoc">Processes the given factors and members to create common cause failure probabilities and new events t...</div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00140">ccf_group.cc:140</a></div></div>
<div class="ttc" id="constant_8h_xhtml"><div class="ttname"><a href="constant_8h.xhtml">constant.h</a></div><div class="ttdoc">Constant expressions that cannot have uncertainties. </div></div>
<div class="ttc" id="float__compare_8h_xhtml"><div class="ttname"><a href="float__compare_8h.xhtml">float_compare.h</a></div><div class="ttdoc">Floating pointing comparison helper functions. </div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a791a1a130e5551a7b70da25df8dbf765"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a791a1a130e5551a7b70da25df8dbf765">scram::mef::CcfGroup::distribution</a></div><div class="ttdeci">Expression * distribution() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00156">ccf_group.h:156</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_acdd0cd916d7d1e5123971974933324d4"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#acdd0cd916d7d1e5123971974933324d4">scram::mef::ConstantExpression::kOne</a></div><div class="ttdeci">static ConstantExpression kOne</div><div class="ttdoc">Constant 1 or True. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00030">constant.h:30</a></div></div>
<div class="ttc" id="combination__iterator_8h_xhtml"><div class="ttname"><a href="combination__iterator_8h.xhtml">combination_iterator.h</a></div><div class="ttdoc">n-choose-k combination generation facilities. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_ac5ff8673a8ebbecee6a645671d5ae063"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#ac5ff8673a8ebbecee6a645671d5ae063">scram::mef::CcfGroup::AddDistribution</a></div><div class="ttdeci">void AddDistribution(Expression *distr)</div><div class="ttdoc">Adds the distribution that describes the probability of basic events in this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00054">ccf_group.cc:54</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1DuplicateArgumentError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">scram::mef::DuplicateArgumentError</a></div><div class="ttdoc">This error indicates that arguments must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00109">error.h:109</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml"><div class="ttname"><a href="ccf__group_8h.xhtml">ccf_group.h</a></div><div class="ttdoc">Functional containers for basic events grouped by common cause failure. </div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00078">error.h:78</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af4c1a5cb29e8f45623a99742b7ba8bc5"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">scram::mef::Expression::value</a></div><div class="ttdeci">virtual double value() noexcept=0</div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a4d359f976b0af352fcd3d9975e08755a"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a4d359f976b0af352fcd3d9975e08755a">scram::mef::CcfGroup::ExpressionMap</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; int, Expression * &gt;&gt; ExpressionMap</div><div class="ttdoc">Mapping expressions and their application levels. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00153">ccf_group.h:153</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00086">ccf_group.h:86</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
