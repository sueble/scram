<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>initializer.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">initializer.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="initializer_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of input file processing into analysis constructs.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="initializer_8h.xhtml">initializer.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span>  <span class="comment">// std::mem_fn</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_at_line.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_file_name.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/range/adaptor/filtered.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cycle_8h.xhtml">cycle.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="env_8h.xhtml">env.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boolean_8h.xhtml">expression/boolean.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="conditional_8h.xhtml">expression/conditional.h</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="exponential_8h.xhtml">expression/exponential.h</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="extern_8h.xhtml">expression/extern.h</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="numerical_8h.xhtml">expression/numerical.h</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="random__deviate_8h.xhtml">expression/random_deviate.h</a>&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="test__event_8h.xhtml">expression/test_event.h</a>&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="find__iterator_8h.xhtml">ext/find_iterator.h</a>&quot;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// Helper function and wrappers for MEF initializations.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/// Maps string to the role specifier.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// @param[in] s  Non-empty, valid role specifier string.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// @returns Role specifier attribute for elements.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span><a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> GetRole(<span class="keyword">const</span> std::string_view&amp; s) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  assert(!s.empty());</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  assert(s == <span class="stringliteral">&quot;public&quot;</span> || s == <span class="stringliteral">&quot;private&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">return</span> s == <span class="stringliteral">&quot;public&quot;</span> ? RoleSpecifier::kPublic : RoleSpecifier::kPrivate;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">/// Takes into account the parent role upon producing element role.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/// @param[in] s  Potentially empty role specifier string.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">/// @param[in] parent_role  The role to be inherited.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// @returns The role for the element under consideration.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span><a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> GetRole(<span class="keyword">const</span> std::string_view&amp; s, RoleSpecifier parent_role) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">return</span> s.empty() ? parent_role : GetRole(s);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// Attaches attributes and a label to the elements of the analysis.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// These attributes are not XML attributes</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/// but the Open-PSA format defined arbitrary attributes</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">/// and a label that can be attached to many analysis elements.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// @param[in] xml_element  XML element.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">/// @param[out] element  The object that needs attributes and label.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">/// @throws ValidityError  Invalid attribute setting.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> AttachLabelAndAttributes(<span class="keyword">const</span> xml::Element&amp; xml_element,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                              Element* element) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">if</span> (std::optional&lt;xml::Element&gt; label = xml_element.child(<span class="stringliteral">&quot;label&quot;</span>)) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    assert(element-&gt;label().empty() &amp;&amp; <span class="stringliteral">&quot;Resetting element label.&quot;</span>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    element-&gt;label(std::string(label-&gt;text()));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  std::optional&lt;xml::Element&gt; attributes = xml_element.child(<span class="stringliteral">&quot;attributes&quot;</span>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keywordflow">if</span> (!attributes)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xml::Element&amp; attribute : attributes-&gt;children()) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    assert(attribute.name() == <span class="stringliteral">&quot;attribute&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      element-&gt;AddAttribute({std::string(attribute.attribute(<span class="stringliteral">&quot;name&quot;</span>)),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                             std::string(attribute.attribute(<span class="stringliteral">&quot;value&quot;</span>)),</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                             std::string(attribute.attribute(<span class="stringliteral">&quot;type&quot;</span>))});</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    } <span class="keywordflow">catch</span> (ValidityError&amp; err) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      err &lt;&lt; boost::errinfo_at_line(attribute.line());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">/// Constructs Element of type T from an XML element.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;std::enable_if_t&lt;std::is_base_of_v&lt;Element, T&gt;, std::unique_ptr&lt;T&gt;&gt;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;ConstructElement(<span class="keyword">const</span> xml::Element&amp; xml_element) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">auto</span> element =</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      std::make_unique&lt;T&gt;(std::string(xml_element.attribute(<span class="stringliteral">&quot;name&quot;</span>)));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  AttachLabelAndAttributes(xml_element, element.get());</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordflow">return</span> element;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/// Constructs Element of type T with a role from an XML element.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;std::enable_if_t&lt;std::is_base_of_v&lt;Role, T&gt;, std::unique_ptr&lt;T&gt;&gt;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;ConstructElement(<span class="keyword">const</span> xml::Element&amp; xml_element, <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                 RoleSpecifier base_role) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keyword">auto</span> element =</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      std::make_unique&lt;T&gt;(std::string(xml_element.attribute(<span class="stringliteral">&quot;name&quot;</span>)), base_path,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                          GetRole(xml_element.attribute(<span class="stringliteral">&quot;role&quot;</span>), base_role));</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  AttachLabelAndAttributes(xml_element, element.get());</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordflow">return</span> element;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">/// Filters the data for MEF Element definitions.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">/// @param[in] xml_element  The XML element with the construct definition.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/// @returns A range of XML child elements of MEF Element constructs.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span><span class="keyword">auto</span> GetNonAttributeElements(<span class="keyword">const</span> xml::Element&amp; xml_element) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> xml_element.children() |</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;         boost::adaptors::filtered([](<span class="keyword">const</span> xml::Element&amp; child) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;           std::string_view name = child.name();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;           <span class="keywordflow">return</span> name != <span class="stringliteral">&quot;label&quot;</span> &amp;&amp; name != <span class="stringliteral">&quot;attributes&quot;</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;         });</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<a class="code" href="alignment_8h.xhtml#a6c8bec380e8765eecb85692acce281bf">PhasePtr</a> ConstructElement&lt;Phase&gt;(<span class="keyword">const</span> xml::Element&amp; xml_element) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <a class="code" href="alignment_8h.xhtml#a6c8bec380e8765eecb85692acce281bf">PhasePtr</a> element;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    element = std::make_unique&lt;Phase&gt;(</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        std::string(xml_element.attribute(<span class="stringliteral">&quot;name&quot;</span>)),</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        *xml_element.attribute&lt;<span class="keywordtype">double</span>&gt;(<span class="stringliteral">&quot;time-fraction&quot;</span>));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  } <span class="keywordflow">catch</span> (ValidityError&amp; err) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    err &lt;&lt; boost::errinfo_at_line(xml_element.line());</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  AttachLabelAndAttributes(xml_element, element.get());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">return</span> element;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a3f14520363303f24cbc976807933d20e">  156</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#a3f14520363303f24cbc976807933d20e">Initializer::Initializer</a>(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                         <a class="code" href="classscram_1_1core_1_1Settings.xhtml">core::Settings</a> settings, <span class="keywordtype">bool</span> allow_extern)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    : settings_(std::move(settings)), allow_extern_(allow_extern) {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea4f4bd6251fafa8940aa06789192c5d68">WARNING</a>, allow_extern_) &lt;&lt; <span class="stringliteral">&quot;Enabling external dynamic libraries&quot;</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  ProcessInputFiles(xml_files);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordtype">void</span> Initializer::CheckFileExistence(</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; xml_file : xml_files) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">if</span> (boost::filesystem::exists(xml_file) == <span class="keyword">false</span>) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1IOError.xhtml">IOError</a>(<span class="stringliteral">&quot;Input file doesn&#39;t exist.&quot;</span>))</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;          &lt;&lt; boost::errinfo_file_name(xml_file);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordtype">void</span> Initializer::CheckDuplicateFiles(</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keyword">namespace </span>fs = boost::filesystem;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keyword">using</span> File = std::pair&lt;fs::path, std::string&gt;;  <span class="comment">// Path mapping.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="comment">// Collection of input file locations in canonical path.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  std::vector&lt;File&gt; files;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">auto</span> comparator = [](<span class="keyword">const</span> File&amp; lhs, <span class="keyword">const</span> File&amp; rhs) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> lhs.first &lt; rhs.first;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  };</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; xml_file : xml_files)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    files.emplace_back(fs::canonical(xml_file), xml_file);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keyword">auto</span> it = boost::adjacent_find(</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      boost::sort(files, comparator),  <span class="comment">// NOLINT(build/include_what_you_use)</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      [](<span class="keyword">const</span> File&amp; lhs, <span class="keyword">const</span> File&amp; rhs) { <span class="keywordflow">return</span> lhs.first == rhs.first; });</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordflow">if</span> (it != files.end()) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Duplicate input files:\n&quot;</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> File&amp; file_path = *it;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">auto</span> it_end = std::upper_bound(it, files.end(), file_path, comparator);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span> (; it != it_end; ++it) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;    &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;  POSIX Path: &quot;</span> &lt;&lt; file_path.first.c_str();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(msg.str()));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessInputFiles(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(input_time);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Processing input files&quot;</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  CheckFileExistence(xml_files);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  CheckDuplicateFiles(xml_files);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; xml_file : xml_files) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      ProcessInputFile(xml_file);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      err &lt;&lt; boost::errinfo_file_name(xml_file);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(def_time);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  ProcessTbdElements();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;TBD Element definition time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(def_time);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Input files are processed in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(input_time);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(valid_time);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Validating the initialization&quot;</span>;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="comment">// Check if the initialization is successful.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  ValidateInitialization();</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Validation is finished in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(valid_time);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(setup_time);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Setting up for the analysis&quot;</span>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="comment">// Perform setup for analysis using configurations from the input files.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  SetupForAnalysis();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  EnsureNoCcfSubstitutions();</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  EnsureSubstitutionsWithApproximations();</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Setup time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(setup_time);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keywordtype">void</span> Initializer::Register(T&amp;&amp; element, <span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_element) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    model_-&gt;Add(std::forward&lt;T&gt;(element));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    err &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">/// Specializations for element registrations.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#acc0586b59230743d185400b8faab40c4">  249</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* Initializer::Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; gate_node,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                            <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                            <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <a class="code" href="event_8h.xhtml#a87cdc93e494b5e957991657303a2e30b">GatePtr</a> ptr = ConstructElement&lt;Gate&gt;(gate_node, base_path, container_role);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keyword">auto</span>* gate = ptr.get();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  Register(std::move(ptr), gate_node);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  path_gates_.insert(gate);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  tbd_.emplace_back(gate, gate_node);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="keywordflow">return</span> gate;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#ae0af5458e457340abf68f3c7900b64b7">  261</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* Initializer::Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; event_node,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                  <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                  <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <a class="code" href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">BasicEventPtr</a> ptr =</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      ConstructElement&lt;BasicEvent&gt;(event_node, base_path, container_role);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keyword">auto</span>* basic_event = ptr.get();</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  Register(std::move(ptr), event_node);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  path_basic_events_.insert(basic_event);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  tbd_.emplace_back(basic_event, event_node);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">return</span> basic_event;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#ac106140b446c83f49781c142f421bdcb">  274</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>* Initializer::Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; event_node,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                  <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                  <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <a class="code" href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">HouseEventPtr</a> ptr =</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      ConstructElement&lt;HouseEvent&gt;(event_node, base_path, container_role);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="keyword">auto</span>* house_event = ptr.get();</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  Register(std::move(ptr), event_node);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  path_house_events_.insert(house_event);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">// Only Boolean xml.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keywordflow">if</span> (std::optional&lt;xml::Element&gt; constant = event_node.child(<span class="stringliteral">&quot;constant&quot;</span>)) {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    house_event-&gt;state(*constant-&gt;attribute&lt;<span class="keywordtype">bool</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>));</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">return</span> house_event;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#aef071f2dd146e4c418e853a2477e9c9f">  291</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* Initializer::Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; param_node,</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                 <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                 <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <a class="code" href="parameter_8h.xhtml#a3e911a6ca6c5efb5779ff4deed577171">ParameterPtr</a> ptr =</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      ConstructElement&lt;Parameter&gt;(param_node, base_path, container_role);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="keyword">auto</span>* parameter = ptr.get();</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  Register(std::move(ptr), param_node);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  path_parameters_.insert(parameter);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  tbd_.emplace_back(parameter, param_node);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="comment">// Attach units.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  std::string_view unit = param_node.attribute(<span class="stringliteral">&quot;unit&quot;</span>);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordflow">if</span> (!unit.empty()) {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">int</span> pos = boost::find(<a class="code" href="parameter_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>, unit) - <a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">std::begin</a>(<a class="code" href="parameter_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    assert(pos &lt; <a class="code" href="parameter_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">kNumUnits</a> &amp;&amp; <span class="stringliteral">&quot;Unexpected unit kind.&quot;</span>);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    parameter-&gt;unit(static_cast&lt;Units&gt;(pos));</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keywordflow">return</span> parameter;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a943c312c6d37a135595084415f351cfa">  312</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* Initializer::Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; ccf_node,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  <span class="keyword">auto</span> ptr = [&amp;]() -&gt; <a class="code" href="ccf__group_8h.xhtml#a0a5b86b780d70d8111700ec834ee7217">CcfGroupPtr</a> {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    std::string_view <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">model</a> = ccf_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;model&quot;</span>);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;beta-factor&quot;</span>)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      <span class="keywordflow">return</span> ConstructElement&lt;BetaFactorModel&gt;(ccf_node, base_path,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                               container_role);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;MGL&quot;</span>)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      <span class="keywordflow">return</span> ConstructElement&lt;MglModel&gt;(ccf_node, base_path, container_role);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;alpha-factor&quot;</span>)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      <span class="keywordflow">return</span> ConstructElement&lt;AlphaFactorModel&gt;(ccf_node, base_path,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                container_role);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    assert(model == <span class="stringliteral">&quot;phi-factor&quot;</span> &amp;&amp; <span class="stringliteral">&quot;Unrecognized CCF model.&quot;</span>);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> ConstructElement&lt;PhiFactorModel&gt;(ccf_node, base_path,</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                            container_role);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  }();</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keyword">auto</span>* ccf_group = ptr.get();</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  Register(std::move(ptr), ccf_node);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  ProcessCcfMembers(*ccf_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(<span class="stringliteral">&quot;members&quot;</span>), ccf_group);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  tbd_.emplace_back(ccf_group, ccf_node);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="keywordflow">return</span> ccf_group;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a86055e4406a999be79a4d14e8a7ec4e3">  339</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* Initializer::Register(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                <span class="keyword">const</span> std::string&amp; <span class="comment">/*base_path*/</span>,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> <span class="comment">/*container_role*/</span>) {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <a class="code" href="event__tree_8h.xhtml#a14bbb8758b9a4fb43a532a385f9d72d6">SequencePtr</a> ptr = ConstructElement&lt;Sequence&gt;(xml_node);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keyword">auto</span>* sequence = ptr.get();</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  Register(std::move(ptr), xml_node);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  tbd_.emplace_back(sequence, xml_node);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">return</span> sequence;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessInputFile(<span class="keyword">const</span> std::string&amp; xml_file) {</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keyword">static</span> <a class="code" href="classscram_1_1xml_1_1Validator.xhtml">xml::Validator</a> validator(env::input_schema());</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(parse_time);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Parsing &quot;</span> &lt;&lt; xml_file &lt;&lt; <span class="stringliteral">&quot; ...&quot;</span>;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <a class="code" href="classscram_1_1xml_1_1Document.xhtml">xml::Document</a> document(xml_file, &amp;validator);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Parsed &quot;</span> &lt;&lt; xml_file &lt;&lt; <span class="stringliteral">&quot; in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(parse_time);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a> root = document.<a class="code" href="classscram_1_1xml_1_1Document.xhtml#a4ac45d9407199ac54ebea609595cf942">root</a>();</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  assert(root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>() == <span class="stringliteral">&quot;opsa-mef&quot;</span>);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <span class="keywordflow">if</span> (!model_) {  <span class="comment">// Create only one model for multiple files.</span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    model_ = ConstructElement&lt;Model&gt;(root);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    model_-&gt;mission_time().value(settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0c130c599ff39bd4a5b269907f06b66d">mission_time</a>());</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; child : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-initiating-event&quot;</span>)) {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <a class="code" href="event__tree_8h.xhtml#a11e578b8e757b3eaa293a1c657f1f29a">InitiatingEventPtr</a> initiating_event =</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        ConstructElement&lt;InitiatingEvent&gt;(child);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">auto</span>* ref_ptr = initiating_event.get();</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    Register(std::move(initiating_event), child);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    tbd_.emplace_back(ref_ptr, child);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  }</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; child : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-rule&quot;</span>)) {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="instruction_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">RulePtr</a> rule = ConstructElement&lt;Rule&gt;(child);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">auto</span>* ref_ptr = rule.get();</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    Register(std::move(rule), child);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    tbd_.emplace_back(ref_ptr, child);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-event-tree&quot;</span>)) {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    DefineEventTree(node);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-fault-tree&quot;</span>)) {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    DefineFaultTree(node);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-CCF-group&quot;</span>)) {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    Register&lt;CcfGroup&gt;(node, <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; child : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-alignment&quot;</span>)) {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="alignment_8h.xhtml#a1db04a95962852f2791c86ea3bcf9861">AlignmentPtr</a> alignment = ConstructElement&lt;Alignment&gt;(child);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">auto</span>* address = alignment.get();</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    Register(std::move(alignment), child);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    tbd_.emplace_back(address, child);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  }</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; child : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-substitution&quot;</span>)) {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="substitution_8h.xhtml#a96c7da3ca9d39dfdeeb908c4a8e0a3bf">SubstitutionPtr</a> substitution = ConstructElement&lt;Substitution&gt;(child);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keyword">auto</span>* address = substitution.get();</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    Register(std::move(substitution), child);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    tbd_.emplace_back(address, child);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;model-data&quot;</span>)) {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    ProcessModelData(node);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <span class="keyword">auto</span> extern_libraries = root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-extern-library&quot;</span>);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="keywordflow">if</span> (!allow_extern_ &amp;&amp; !extern_libraries.empty()) {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1IllegalOperation.xhtml">IllegalOperation</a>(<span class="stringliteral">&quot;Loading external libraries is disallowed!&quot;</span>))</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        &lt;&lt; boost::errinfo_file_name(xml_file)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        &lt;&lt; boost::errinfo_at_line(extern_libraries.begin()-&gt;line());</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : extern_libraries)</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    DefineExternLibraries(node, xml_file);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  documents_.emplace_back(std::move(document));</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">/// Specializations for elements defined after registration.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a3d457bc3c3c2794545465c7dd9364e32">  426</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; gate_node, <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate) {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <span class="keyword">auto</span> formulas = GetNonAttributeElements(gate_node);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  <span class="comment">// Assumes that there are no attributes and labels.</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  assert(!formulas.empty() &amp;&amp; ++formulas.begin() == formulas.end());</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  assert(!gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#a9ad3e3e7a9af34ee371ef8d25e6bdeea">HasFormula</a>() &amp;&amp; <span class="stringliteral">&quot;Resetting gate formula&quot;</span>);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(GetFormula(*formulas.begin(), gate-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">Validate</a>();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    err &lt;&lt; boost::errinfo_at_line(gate_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#aa6329e9c18a0ef61415f8c7cb6076265">  441</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; event_node,</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                         <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* basic_event) {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <span class="keyword">auto</span> expressions = GetNonAttributeElements(event_node);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  <span class="keywordflow">if</span> (!expressions.empty()) {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    assert(basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">HasExpression</a>() == <span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Resetting expressions.&quot;</span>);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">expression</a>(</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        GetExpression(*expressions.begin(), basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()));</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;}</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#aa3208c0612161cd4de7d71cd61450828">  452</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; param_node, <a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* parameter) {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  <span class="keyword">auto</span> expressions = GetNonAttributeElements(param_node);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  assert(!expressions.empty() &amp;&amp; ++expressions.begin() == expressions.end());</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  parameter-&gt;<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml#adfe24f71af66ae29a889c6424baf6d84">expression</a>(</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      GetExpression(*expressions.begin(), parameter-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()));</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a8acae56d17d34aa1500dcb83763d638a">  460</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; ccf_node, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; element : ccf_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>()) {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    std::string_view name = element.name();</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;distribution&quot;</span>) {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;      ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac5ff8673a8ebbecee6a645671d5ae063">AddDistribution</a>(</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;          GetExpression(*element.child(), ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()));</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;factor&quot;</span>) {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;      DefineCcfFactor(element, ccf_group);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;factors&quot;</span>) {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; factor_node : element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>())</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        DefineCcfFactor(factor_node, ccf_group);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00478"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#ad34360145672c2055225014b44161f51">  478</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node, <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* sequence) {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  std::vector&lt;Instruction*&gt; instructions;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : GetNonAttributeElements(xml_node)) {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    instructions.emplace_back(GetInstruction(node));</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  }</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  sequence-&gt;<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>(std::move(instructions));</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#afb3c51948314e160a79f40792aeaa489">  487</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; et_node, <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree) {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  <span class="keyword">auto</span> it = event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>().begin();</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : et_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-branch&quot;</span>)) {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    assert(it != event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>().end());</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    assert((*it)-&gt;name() == node.attribute(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    DefineBranch(GetNonAttributeElements(node), event_tree, it-&gt;get());</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    ++it;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  }</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> initial_state;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;  DefineBranch(et_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(<span class="stringliteral">&quot;initial-state&quot;</span>)-&gt;children(), event_tree,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;               &amp;initial_state);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>(std::move(initial_state));</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00502"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#ac5a9fe2fb3d4cc5a37ead0726ca74462">  502</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                         <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">InitiatingEvent</a>* initiating_event) {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  std::string event_tree_name(xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;event-tree&quot;</span>));</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  <span class="keywordflow">if</span> (!event_tree_name.empty()) {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(model_-&gt;event_trees(), event_tree_name)) {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;      initiating_event-&gt;<a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">event_tree</a>(it-&gt;get());</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;      initiating_event-&gt;<a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;      (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Event tree &quot;</span> + event_tree_name +</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                <span class="stringliteral">&quot; is not defined in model.&quot;</span>))</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;}</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00519"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a1e908da1a0280edd2218d692756994ab">  519</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; rule_node, <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule) {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  std::vector&lt;Instruction*&gt; instructions;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node : GetNonAttributeElements(rule_node))</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    instructions.push_back(GetInstruction(xml_node));</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  rule-&gt;<a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>(std::move(instructions));</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00527"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a65ae79523f0590087038b5bfa75ed7b9">  527</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node, <a class="code" href="classscram_1_1mef_1_1Alignment.xhtml">Alignment</a>* alignment) {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-phase&quot;</span>)) {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;      <a class="code" href="alignment_8h.xhtml#a6c8bec380e8765eecb85692acce281bf">PhasePtr</a> phase = ConstructElement&lt;Phase&gt;(node);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;      std::vector&lt;SetHouseEvent*&gt; instructions;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; arg : node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;set-house-event&quot;</span>)) {</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        instructions.push_back(</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            static_cast&lt;SetHouseEvent*&gt;(GetInstruction(arg)));</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;      }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;      phase-&gt;instructions(std::move(instructions));</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;      alignment-&gt;<a class="code" href="classscram_1_1mef_1_1Alignment.xhtml#ad19d7e33723e1f33fbf49c14e75cf132">Add</a>(std::move(phase));</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;      err &lt;&lt; boost::errinfo_at_line(node.line());</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    }</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    alignment-&gt;<a class="code" href="classscram_1_1mef_1_1Alignment.xhtml#a9f8e15e0f89ab4d0a9adb1645ace3f1b">Validate</a>();</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    err &lt;&lt; boost::errinfo_at_line(xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  }</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;}</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a969f088f20697a8a317cb7c998f034ad">  552</a></span>&#160;<span class="keywordtype">void</span> Initializer::Define(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                         <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml">Substitution</a>* substitution) {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a4911986f8be0a6de619955d59cbd1537">hypothesis</a>(</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      GetFormula(xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(<span class="stringliteral">&quot;hypothesis&quot;</span>)-&gt;child().value(), <span class="stringliteral">&quot;&quot;</span>));</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  <span class="keywordflow">if</span> (std::optional&lt;xml::Element&gt; source = xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(<span class="stringliteral">&quot;source&quot;</span>)) {</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; basic_event : source-&gt;<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>()) {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;      assert(basic_event.name() == <span class="stringliteral">&quot;basic-event&quot;</span>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;      std::string name(basic_event.attribute(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;      <span class="keywordflow">try</span> {</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* <span class="keyword">event</span> = GetBasicEvent(name, <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a0a6da28d1514d7543d80e554e144df6f">Add</a>(event);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keyword">event</span>-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      } <span class="keywordflow">catch</span> (std::out_of_range&amp;) {</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Undefined basic event &#39;&quot;</span> + name + <span class="stringliteral">&quot;&#39;&quot;</span>))</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            &lt;&lt; boost::errinfo_at_line(basic_event.line());</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;      } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>&amp; err) {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        err &lt;&lt; boost::errinfo_at_line(basic_event.line());</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;      }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    }</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    assert(substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a40797175e64c8399cb3bca9fa104ccd5">source</a>().empty() == <span class="keyword">false</span>);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a> target = xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(<span class="stringliteral">&quot;target&quot;</span>)-&gt;child().value();</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;  <span class="keywordflow">if</span> (target.name() == <span class="stringliteral">&quot;basic-event&quot;</span>) {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    std::string name(target.attribute(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;      <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* <span class="keyword">event</span> = GetBasicEvent(name, <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;      substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a3326b9bbe12e4506d1b9778b2c7e5b83">target</a>(event);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;      <span class="keyword">event</span>-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    } <span class="keywordflow">catch</span> (std::out_of_range&amp;) {</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Undefined basic event &#39;&quot;</span> + name + <span class="stringliteral">&quot;&#39;&quot;</span>))</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;          &lt;&lt; boost::errinfo_at_line(target.line());</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    assert(target.name() == <span class="stringliteral">&quot;constant&quot;</span>);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a3326b9bbe12e4506d1b9778b2c7e5b83">target</a>(target.attribute&lt;<span class="keywordtype">bool</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>).value());</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  }</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#ab1859efddac529e0827537fae2f16cbb">Validate</a>();</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    std::string_view type = xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;type&quot;</span>);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">if</span> (!type.empty()) {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;      std::optional&lt;Substitution::Type&gt; deduced_type = substitution-&gt;<a class="code" href="classscram_1_1mef_1_1Substitution.xhtml#a01bb7b2682e333bb6cd4b730447162c2">type</a>();</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;      <span class="keywordtype">int</span> pos = std::distance(<a class="code" href="substitution_8h.xhtml#a30e85033e5d98e26e92d0aa9eae22e16">kSubstitutionTypeToString</a>,</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                              boost::find(<a class="code" href="substitution_8h.xhtml#a30e85033e5d98e26e92d0aa9eae22e16">kSubstitutionTypeToString</a>, type));</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      assert(pos &lt; 3 &amp;&amp; <span class="stringliteral">&quot;Unexpected substitution type string.&quot;</span>);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;      <span class="keywordflow">if</span> (!deduced_type ||</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;          static_cast&lt;Substitution::Type&gt;(pos) != deduced_type.value())</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="stringliteral">&quot;The declared substitution type does not match the deduced one.&quot;</span>));</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    err &lt;&lt; boost::errinfo_at_line(xml_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;  }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessTbdElements() {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Document.xhtml">xml::Document</a>&amp; document : documents_) {</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a> root = document.root();</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-extern-function&quot;</span>)) {</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;      <span class="keywordflow">try</span> {</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        DefineExternFunction(node);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;      } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        err &lt;&lt; boost::errinfo_file_name(root.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a959df73174a6e363f71ffb7772abbe20">filename</a>());</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;      }</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;  }</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp; [ tbd_element, xml_element ] : tbd_) {</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;      std::visit(</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;          [<span class="keyword">this</span>, &amp;xml_element](<span class="keyword">auto</span>* tbd_construct) {</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            this-&gt;Define(xml_element, tbd_construct);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;          },</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;          tbd_element);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;      err &lt;&lt; boost::errinfo_file_name(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a959df73174a6e363f71ffb7772abbe20">filename</a>());</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    }</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  }</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;}</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keywordtype">void</span> Initializer::DefineEventTree(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; et_node) {</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  <a class="code" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">EventTreePtr</a> event_tree = ConstructElement&lt;EventTree&gt;(et_node);</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : et_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-functional-event&quot;</span>)) {</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;      event_tree-&gt;Add(ConstructElement&lt;FunctionalEvent&gt;(node));</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;      err &lt;&lt; boost::errinfo_at_line(node.line());</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    }</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  }</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : et_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-sequence&quot;</span>)) {</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    event_tree-&gt;Add(</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        Register&lt;Sequence&gt;(node, event_tree-&gt;name(), RoleSpecifier::kPublic));</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  }</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : et_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-branch&quot;</span>)) {</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;      event_tree-&gt;Add(ConstructElement&lt;NamedBranch&gt;(node));</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;      err &lt;&lt; boost::errinfo_at_line(node.line());</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  }</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* tbd_element = event_tree.get();</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;  Register(std::move(event_tree), et_node);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;  <span class="comment">// Save only after registration.</span></div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  tbd_.emplace_back(tbd_element, et_node);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;}</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="keywordtype">void</span> Initializer::DefineFaultTree(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; ft_node) {</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  <a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a> fault_tree = ConstructElement&lt;FaultTree&gt;(ft_node);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;  RegisterFaultTreeData(ft_node, fault_tree-&gt;<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>(), fault_tree.get());</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  Register(std::move(fault_tree), ft_node);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;}</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> Initializer::DefineComponent(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; component_node,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                          <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                          <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;  <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> component =</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;      ConstructElement&lt;Component&gt;(component_node, base_path, container_role);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;  RegisterFaultTreeData(component_node, base_path + <span class="stringliteral">&quot;.&quot;</span> + component-&gt;name(),</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                        component.get());</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  <span class="keywordflow">return</span> component;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;}</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="keywordtype">void</span> Initializer::RegisterFaultTreeData(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; ft_node,</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                        <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                                        <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>* component) {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : ft_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-house-event&quot;</span>)) {</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Add</a>(Register&lt;HouseEvent&gt;(node, base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;  }</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(basic_time);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : ft_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-basic-event&quot;</span>)) {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Add</a>(Register&lt;BasicEvent&gt;(node, base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  }</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Basic event registration time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(basic_time);</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : ft_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-parameter&quot;</span>)) {</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Add</a>(Register&lt;Parameter&gt;(node, base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;  }</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(gate_time);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : ft_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-gate&quot;</span>)) {</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Add</a>(Register&lt;Gate&gt;(node, base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  }</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Gate registration time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(gate_time);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : ft_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-CCF-group&quot;</span>)) {</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Add</a>(Register&lt;CcfGroup&gt;(node, base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  }</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : ft_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-component&quot;</span>)) {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> sub = DefineComponent(node, base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>());</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;      component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">Add</a>(std::move(sub));</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;      err &lt;&lt; boost::errinfo_at_line(node.line());</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    }</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;  }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;}</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessModelData(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; model_data) {</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : model_data.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-house-event&quot;</span>)) {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    Register&lt;HouseEvent&gt;(node, <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;  }</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(basic_time);</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : model_data.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-basic-event&quot;</span>)) {</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    Register&lt;BasicEvent&gt;(node, <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;  }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Basic event registration time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(basic_time);</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : model_data.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;define-parameter&quot;</span>)) {</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    Register&lt;Parameter&gt;(node, <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;  }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;}</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> Initializer::GetFormula(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; formula_node,</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                   <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02a">Operator</a> formula_type = [&amp;formula_node]() {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keywordflow">if</span> (formula_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ae722d4816c427429833f90a5c8c1cd30">has_attribute</a>(<span class="stringliteral">&quot;name&quot;</span>) || formula_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>() == <span class="stringliteral">&quot;constant&quot;</span>)</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">kNull</a>;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keywordtype">int</span> pos = boost::find(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>, formula_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>()) -</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;              <a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">std::begin</a>(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    assert(pos &lt; <a class="code" href="event_8h.xhtml#a313c82b9d44af8fb0e080c3d2487f406">kNumOperators</a> &amp;&amp; <span class="stringliteral">&quot;Unexpected operator type.&quot;</span>);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02a">Operator</a><span class="keyword">&gt;</span>(pos);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  }();</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>(formula_type));</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  <span class="keyword">auto</span> add_arg = [<span class="keyword">this</span>, &amp;formula, &amp;base_path](<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; element) {</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordflow">if</span> (element.name() == <span class="stringliteral">&quot;constant&quot;</span>) {</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;      formula-&gt;AddArgument(*element.attribute&lt;<span class="keywordtype">bool</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>)</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                               ? &amp;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">HouseEvent::kTrue</a></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                               : &amp;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">HouseEvent::kFalse</a>);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    }</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    std::string name(element.attribute(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordflow">if</span> (name.empty()) {</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;      formula-&gt;AddArgument(GetFormula(element, base_path));</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    }</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    std::string_view element_type = [&amp;element] {</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;      <span class="comment">// This is for the case &quot;&lt;event name=&quot;id&quot; type=&quot;type&quot;/&gt;&quot;.</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;      std::string_view type = element.attribute(<span class="stringliteral">&quot;type&quot;</span>);</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;      <span class="keywordflow">return</span> type.empty() ? element.name() : type;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    }();</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;      <span class="keywordflow">if</span> (element_type == <span class="stringliteral">&quot;event&quot;</span>) {  <span class="comment">// Undefined type yet.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        formula-&gt;AddArgument(GetEvent(name, base_path));</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (element_type == <span class="stringliteral">&quot;gate&quot;</span>) {</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        formula-&gt;AddArgument(GetGate(name, base_path));</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (element_type == <span class="stringliteral">&quot;basic-event&quot;</span>) {</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        formula-&gt;AddArgument(GetBasicEvent(name, base_path));</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        assert(element_type == <span class="stringliteral">&quot;house-event&quot;</span>);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        formula-&gt;AddArgument(GetHouseEvent(name, base_path));</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;      }</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    } <span class="keywordflow">catch</span> (std::out_of_range&amp;) {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;          <span class="stringliteral">&quot;Undefined &quot;</span> + std::string(element_type) + <span class="stringliteral">&quot; &quot;</span> + name +</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;          (base_path.empty() ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot; with base path &quot;</span> + base_path)))</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;          &lt;&lt; boost::errinfo_at_line(element.line());</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>&amp; err) {</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;      err &lt;&lt; boost::errinfo_at_line(element.line());</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    }</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  };</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  <span class="comment">// Process arguments of this formula.</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;  <span class="keywordflow">if</span> (formula_type == <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">kNull</a>) {  <span class="comment">// Special case of pass-through.</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    add_arg(formula_node);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : formula_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>())</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;      add_arg(node);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;  }</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keywordflow">if</span> (formula_type == <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">kVote</a>)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;      formula-&gt;vote_number(*formula_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;min&quot;</span>));</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    formula-&gt;Validate();</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    err &lt;&lt; boost::errinfo_at_line(formula_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  }</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;  <span class="keywordflow">return</span> formula;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;}</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="keywordtype">void</span> Initializer::DefineBranchTarget(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; target_node,</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                     <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree, <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* branch) {</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  <span class="keywordflow">if</span> (target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>() == <span class="stringliteral">&quot;fork&quot;</span>) {</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    std::string name(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;functional-event&quot;</span>));</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a174d471ad629ca43a9abd30cfe34e82f">functional_events</a>(), name)) {</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;      std::vector&lt;Path&gt; paths;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; path_element : target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(<span class="stringliteral">&quot;path&quot;</span>)) {</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        paths.emplace_back(std::string(path_element.attribute(<span class="stringliteral">&quot;state&quot;</span>)));</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        DefineBranch(path_element.children(), event_tree, &amp;paths.back());</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;      }</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;      assert(!paths.empty());</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;      <span class="keywordflow">try</span> {</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="keyword">auto</span> fork = std::make_unique&lt;Fork&gt;(**it, std::move(paths));</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>(fork.get());</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">Add</a>(std::move(fork));</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;      } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        err &lt;&lt; <a class="code" href="error_8h.xhtml#a9e7c724d6d57b1b9fa496e66755e5e02">errinfo_container</a>(<span class="stringliteral">&quot;Event tree &#39;&quot;</span> + event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() + <span class="stringliteral">&quot;&#39;&quot;</span>);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;      }</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Functional event &quot;</span> + name +</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                                <span class="stringliteral">&quot; is not defined in &quot;</span> + event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()))</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;          &lt;&lt; boost::errinfo_at_line(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    }</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>() == <span class="stringliteral">&quot;sequence&quot;</span>) {</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    std::string name(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(model_-&gt;sequences(), name)) {</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;      branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>(it-&gt;get());</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;      (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;          <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Sequence &quot;</span> + name + <span class="stringliteral">&quot; is not defined in the model.&quot;</span>))</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;          &lt;&lt; boost::errinfo_at_line(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    }</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    assert(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>() == <span class="stringliteral">&quot;branch&quot;</span>);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    std::string name(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>(), name)) {</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;      branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>(it-&gt;get());</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;      (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Branch &quot;</span> + name + <span class="stringliteral">&quot; is not defined in &quot;</span> +</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                                event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()))</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;          &lt;&lt; boost::errinfo_at_line(target_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    }</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;  }</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;}</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> SinglePassRange&gt;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="keywordtype">void</span> Initializer::DefineBranch(<span class="keyword">const</span> SinglePassRange&amp; xml_nodes,</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                               <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree, <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* branch) {</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;  assert(!xml_nodes.empty() &amp;&amp; <span class="stringliteral">&quot;At least the branch target must be defined.&quot;</span>);</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;  std::vector&lt;Instruction*&gt; instructions;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = xml_nodes.begin(), it_end = xml_nodes.end(); it != it_end;) {</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">auto</span> it_cur = it++;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordflow">if</span> (it == it_end) {</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;      DefineBranchTarget(*it_cur, event_tree, branch);</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;      instructions.emplace_back(GetInstruction(*it_cur));</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    }</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;  }</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;  branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">instructions</a>(std::move(instructions));</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;}</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* Initializer::GetInstruction(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_element) {</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;  std::string_view node_name = xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>();</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;rule&quot;</span>) {</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    std::string name(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(model_-&gt;rules(), name)) {</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;      (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;      <span class="keywordflow">return</span> it-&gt;get();</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;          <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Rule &quot;</span> + name + <span class="stringliteral">&quot; is not defined in the model.&quot;</span>))</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    }</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;  }</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;  <span class="keyword">auto</span> register_instruction = [<span class="keyword">this</span>](std::unique_ptr&lt;Instruction&gt; instruction) {</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keyword">auto</span>* ret_ptr = instruction.get();</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    model_-&gt;Add(std::move(instruction));</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keywordflow">return</span> ret_ptr;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;  };</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;event-tree&quot;</span>) {</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    std::string name(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(model_-&gt;event_trees(), name)) {</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;      (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;      links_.push_back(static_cast&lt;Link*&gt;(</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;          register_instruction(std::make_unique&lt;Link&gt;(**it))));</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;      <span class="keywordflow">return</span> links_.back();</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;          <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Event tree &quot;</span> + name + <span class="stringliteral">&quot; is not defined in the model.&quot;</span>))</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    }</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;  }</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;collect-expression&quot;</span>) {</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordflow">return</span> register_instruction(std::make_unique&lt;CollectExpression&gt;(</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        GetExpression(*xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(), <span class="stringliteral">&quot;&quot;</span>)));</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;  }</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;collect-formula&quot;</span>) {</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">return</span> register_instruction(</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        std::make_unique&lt;CollectFormula&gt;(GetFormula(*xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(), <span class="stringliteral">&quot;&quot;</span>)));</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;  }</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;if&quot;</span>) {</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a> args = xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>();</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keyword">auto</span> it = args.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">begin</a>();</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* if_expression = GetExpression(*it++, <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* then_instruction = GetInstruction(*it++);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* else_instruction =</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        it == args.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a587b8312cc0bfbd5d9b6e8c73890c99e">end</a>() ? <span class="keyword">nullptr</span> : GetInstruction(*it);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordflow">return</span> register_instruction(std::make_unique&lt;IfThenElse&gt;(</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        if_expression, then_instruction, else_instruction));</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;  }</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;block&quot;</span>) {</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    std::vector&lt;Instruction*&gt; instructions;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_node : xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>())</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;      instructions.push_back(GetInstruction(xml_node));</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keywordflow">return</span> register_instruction(</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        std::make_unique&lt;Block&gt;(std::move(instructions)));</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;  }</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;  <span class="keywordflow">if</span> (node_name == <span class="stringliteral">&quot;set-house-event&quot;</span>) {</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    std::string name(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordflow">if</span> (!model_-&gt;house_events().count(name)) {</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;House event &quot;</span> + name +</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                                <span class="stringliteral">&quot; is not defined in the model.&quot;</span>))</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    }</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordflow">return</span> register_instruction(std::make_unique&lt;SetHouseEvent&gt;(</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        std::move(name), *xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>()-&gt;attribute&lt;<span class="keywordtype">bool</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>)));</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;  }</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;  assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Unknown instruction type.&quot;</span>);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> N&gt;</div><div class="line"><a name="l00954"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">  954</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Initializer::Extractor</a> {<span class="comment"></span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">  /// Extracts expressions</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">  /// to be passed to the constructor of expression T.</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment">  /// @param[in] args  XML elements containing the arguments.</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="comment">  /// @returns The extracted expression.</span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;<span class="comment">  /// @pre The XML args container size equals N.</span></div><div class="line"><a name="l00965"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#aabec51a591c72a273c8909474d3fe8ae">  965</a></span>&#160;<span class="comment"></span>  std::unique_ptr&lt;T&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#aabec51a591c72a273c8909474d3fe8ae">operator()</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    static_assert(N &gt; 0, <span class="stringliteral">&quot;The number of arguments can&#39;t be fewer than 1.&quot;</span>);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>)(args.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">begin</a>(), args.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a587b8312cc0bfbd5d9b6e8c73890c99e">end</a>(), base_path, init);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;  }</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="comment">  /// Extracts and accumulates expressions</span></div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="comment">  /// to be passed to the constructor of expression T.</span></div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment">  /// @tparam Ts  Expression types.</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="comment">  /// @param[in] it  The iterator in the argument container.</span></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;<span class="comment">  /// @param[in] it_end  The end sentinel iterator of the argument container.</span></div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="comment">  /// @param[in] expressions  Accumulated argument expressions.</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="comment">  /// @returns The extracted expression.</span></div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;<span class="comment">  /// @pre The XML container has enough arguments.</span></div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Ts&gt;</div><div class="line"><a name="l00987"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#a6df93dd361f12accc004acc1a3dc191d">  987</a></span>&#160;  std::unique_ptr&lt;T&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#a6df93dd361f12accc004acc1a3dc191d">operator()</a>(<a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">xml::Element::Range::iterator</a> it,</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                                <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">xml::Element::Range::iterator</a> it_end,</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path, <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init,</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                                Ts&amp;&amp;... expressions) {</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    static_assert(N &gt;= 0);</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keywordflow">if</span> constexpr (N == 0) {</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;      static_assert(<span class="keyword">sizeof</span>...(Ts), <span class="stringliteral">&quot;Unintended use case.&quot;</span>);</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;      assert(it == it_end &amp;&amp; <span class="stringliteral">&quot;Too many arguments in the args container.&quot;</span>);</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;      <span class="keywordflow">return</span> std::make_unique&lt;T&gt;(std::forward&lt;Ts&gt;(expressions)...);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;      assert(it != it_end &amp;&amp; <span class="stringliteral">&quot;Not enough arguments in the args container.&quot;</span>);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;T, N - 1&gt;()(std::next(it), it_end, base_path, init,</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                                   std::forward&lt;Ts&gt;(expressions)...,</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                                   init-&gt;GetExpression(*it, base_path));</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    }</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;  }</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;};</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment">/// Specialization of Extractor to extract all expressions into arg vector.</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01009"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml"> 1009</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Initializer::Extractor</a>&lt;T, -1&gt; {<span class="comment"></span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment">  /// Constructs an expression with a variable number of arguments.</span></div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment">  /// @param[in] args  XML elements containing the arguments.</span></div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="comment">  /// @returns The constructed expression.</span></div><div class="line"><a name="l01017"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml#aed4438ca816e65ced748e4bc1f67a631"> 1017</a></span>&#160;<span class="comment"></span>  std::unique_ptr&lt;T&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml#aed4438ca816e65ced748e4bc1f67a631">operator()</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    std::vector&lt;Expression*&gt; expr_args;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : args) {</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;      expr_args.push_back(init-&gt;GetExpression(node, base_path));</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    }</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;T&gt;(std::move(expr_args));</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;  }</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;};</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// Expression extraction helper functions.</span></div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment">/// @returns The number of constructor arguments for Expression types.</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class </span>T, <span class="keyword">class </span>A, <span class="keyword">class</span>... As&gt;</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;constexpr <span class="keywordtype">int</span> count_args() {</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;  <span class="keywordflow">if</span> constexpr (std::is_constructible_v&lt;T, A, As...&gt;) {</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <span class="keywordflow">return</span> 1 + <span class="keyword">sizeof</span>...(As);</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    <span class="keywordflow">return</span> count_args&lt;T, A, A, As...&gt;();</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;  }</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;}</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;constexpr std::enable_if_t&lt;std::is_base_of_v&lt;Expression, T&gt;, <span class="keywordtype">int</span>&gt; num_args() {</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;  static_assert(!std::is_default_constructible_v&lt;T&gt;, <span class="stringliteral">&quot;No zero args.&quot;</span>);</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;  <span class="keywordflow">if</span> constexpr (std::is_constructible_v&lt;T, std::vector&lt;Expression*&gt;&gt;) {</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <span class="keywordflow">return</span> count_args&lt;T, Expression*&gt;();</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;  }</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;Initializer::Extract(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                     <span class="keyword">const</span> std::string&amp; base_path, <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;T, num_args&lt;T&gt;</a>()&gt;()(args, base_path, init);</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;}</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment">/// Specialization for Extractor of Histogram expressions.</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;Initializer::Extract&lt;Histogram&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;  <span class="keyword">auto</span> it = args.begin();</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;  std::vector&lt;Expression*&gt; boundaries = {init-&gt;GetExpression(*it, base_path)};</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;  std::vector&lt;Expression*&gt; weights;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;  <span class="keywordflow">for</span> (++it; it != args.end(); ++it) {</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a> bin = it-&gt;children();</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    assert(bin.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a15c9f933f38716821303393ddcb6ef72">size</a>() == 2);</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="keyword">auto</span> it_bin = bin.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">begin</a>();</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    boundaries.push_back(init-&gt;GetExpression(*it_bin++, base_path));</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    weights.push_back(init-&gt;GetExpression(*it_bin, base_path));</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;  }</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;  assert(!weights.empty() &amp;&amp; <span class="stringliteral">&quot;At least one bin must be present.&quot;</span>);</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;  <span class="keywordflow">return</span> std::make_unique&lt;Histogram&gt;(std::move(boundaries), std::move(weights));</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;}</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment">/// Specialization due to overloaded constructors.</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;Initializer::Extract&lt;LognormalDeviate&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                                       <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                                       <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;  <span class="keywordflow">if</span> (args.size() == 3)</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;LognormalDeviate, 3&gt;</a>()(args, base_path, init);</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;LognormalDeviate, 2&gt;</a>()(args, base_path, init);</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;}</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment">/// Specialization due to overloaded constructors and un-fixed number of args.</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;Initializer::Extract&lt;PeriodicTest&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                                   <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                                   <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;  <span class="keywordflow">switch</span> (args.size()) {</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keywordflow">case</span> 4:</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;PeriodicTest, 4&gt;</a>()(args, base_path, init);</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="keywordflow">case</span> 5:</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;PeriodicTest, 5&gt;</a>()(args, base_path, init);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <span class="keywordflow">case</span> 11:</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;PeriodicTest, 11&gt;</a>()(args, base_path, init);</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;          <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Invalid number of arguments for Periodic Test.&quot;</span>));</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;  }</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;}</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment">/// Specialization for Switch-Case operation extraction.</span></div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;Initializer::Extract&lt;Switch&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a>&amp; args,</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                             <span class="keyword">const</span> std::string&amp; base_path, <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;  assert(!args.empty());</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* default_value = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;  std::vector&lt;Switch::Case&gt; cases;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = args.begin(), it_end = args.end(); it != it_end;) {</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    <span class="keyword">auto</span> it_cur = it++;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    <span class="keywordflow">if</span> (it == it_end) {</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;      default_value = init-&gt;GetExpression(*it_cur, base_path);</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    }</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">xml::Element::Range</a> nodes = it_cur-&gt;children();</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    assert(nodes.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a15c9f933f38716821303393ddcb6ef72">size</a>() == 2);</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <span class="keyword">auto</span> it_node = nodes.<a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">begin</a>();</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    cases.push_back({*init-&gt;GetExpression(*it_node++, base_path),</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                     *init-&gt;GetExpression(*it_node, base_path)});</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;  }</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;  assert(default_value);</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;  <span class="keywordflow">return</span> std::make_unique&lt;Switch&gt;(std::move(cases), default_value);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;}</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="keyword">const</span> Initializer::ExtractorMap Initializer::kExpressionExtractors_ = {</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    {<span class="stringliteral">&quot;exponential&quot;</span>, &amp;Extract&lt;Exponential&gt;},</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    {<span class="stringliteral">&quot;GLM&quot;</span>, &amp;Extract&lt;Glm&gt;},</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    {<span class="stringliteral">&quot;Weibull&quot;</span>, &amp;Extract&lt;Weibull&gt;},</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    {<span class="stringliteral">&quot;periodic-test&quot;</span>, &amp;Extract&lt;PeriodicTest&gt;},</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    {<span class="stringliteral">&quot;uniform-deviate&quot;</span>, &amp;Extract&lt;UniformDeviate&gt;},</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    {<span class="stringliteral">&quot;normal-deviate&quot;</span>, &amp;Extract&lt;NormalDeviate&gt;},</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    {<span class="stringliteral">&quot;lognormal-deviate&quot;</span>, &amp;Extract&lt;LognormalDeviate&gt;},</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    {<span class="stringliteral">&quot;gamma-deviate&quot;</span>, &amp;Extract&lt;GammaDeviate&gt;},</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    {<span class="stringliteral">&quot;beta-deviate&quot;</span>, &amp;Extract&lt;BetaDeviate&gt;},</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    {<span class="stringliteral">&quot;histogram&quot;</span>, &amp;Extract&lt;Histogram&gt;},</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    {<span class="stringliteral">&quot;neg&quot;</span>, &amp;Extract&lt;Neg&gt;},</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    {<span class="stringliteral">&quot;add&quot;</span>, &amp;Extract&lt;Add&gt;},</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    {<span class="stringliteral">&quot;sub&quot;</span>, &amp;Extract&lt;Sub&gt;},</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    {<span class="stringliteral">&quot;mul&quot;</span>, &amp;Extract&lt;Mul&gt;},</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    {<span class="stringliteral">&quot;div&quot;</span>, &amp;Extract&lt;Div&gt;},</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    {<span class="stringliteral">&quot;abs&quot;</span>, &amp;Extract&lt;Abs&gt;},</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    {<span class="stringliteral">&quot;acos&quot;</span>, &amp;Extract&lt;Acos&gt;},</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    {<span class="stringliteral">&quot;asin&quot;</span>, &amp;Extract&lt;Asin&gt;},</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    {<span class="stringliteral">&quot;atan&quot;</span>, &amp;Extract&lt;Atan&gt;},</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    {<span class="stringliteral">&quot;cos&quot;</span>, &amp;Extract&lt;Cos&gt;},</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    {<span class="stringliteral">&quot;sin&quot;</span>, &amp;Extract&lt;Sin&gt;},</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    {<span class="stringliteral">&quot;tan&quot;</span>, &amp;Extract&lt;Tan&gt;},</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    {<span class="stringliteral">&quot;cosh&quot;</span>, &amp;Extract&lt;Cosh&gt;},</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    {<span class="stringliteral">&quot;sinh&quot;</span>, &amp;Extract&lt;Sinh&gt;},</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    {<span class="stringliteral">&quot;tanh&quot;</span>, &amp;Extract&lt;Tanh&gt;},</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    {<span class="stringliteral">&quot;exp&quot;</span>, &amp;Extract&lt;Exp&gt;},</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    {<span class="stringliteral">&quot;log&quot;</span>, &amp;Extract&lt;Log&gt;},</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    {<span class="stringliteral">&quot;log10&quot;</span>, &amp;Extract&lt;Log10&gt;},</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    {<span class="stringliteral">&quot;mod&quot;</span>, &amp;Extract&lt;Mod&gt;},</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    {<span class="stringliteral">&quot;pow&quot;</span>, &amp;Extract&lt;Pow&gt;},</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    {<span class="stringliteral">&quot;sqrt&quot;</span>, &amp;Extract&lt;Sqrt&gt;},</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    {<span class="stringliteral">&quot;ceil&quot;</span>, &amp;Extract&lt;Ceil&gt;},</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    {<span class="stringliteral">&quot;floor&quot;</span>, &amp;Extract&lt;Floor&gt;},</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    {<span class="stringliteral">&quot;min&quot;</span>, &amp;Extract&lt;Min&gt;},</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    {<span class="stringliteral">&quot;max&quot;</span>, &amp;Extract&lt;Max&gt;},</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    {<span class="stringliteral">&quot;mean&quot;</span>, &amp;Extract&lt;Mean&gt;},</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    {<span class="stringliteral">&quot;not&quot;</span>, &amp;Extract&lt;Not&gt;},</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    {<span class="stringliteral">&quot;and&quot;</span>, &amp;Extract&lt;And&gt;},</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    {<span class="stringliteral">&quot;or&quot;</span>, &amp;Extract&lt;Or&gt;},</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    {<span class="stringliteral">&quot;eq&quot;</span>, &amp;Extract&lt;Eq&gt;},</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    {<span class="stringliteral">&quot;df&quot;</span>, &amp;Extract&lt;Df&gt;},</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    {<span class="stringliteral">&quot;lt&quot;</span>, &amp;Extract&lt;Lt&gt;},</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    {<span class="stringliteral">&quot;gt&quot;</span>, &amp;Extract&lt;Gt&gt;},</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    {<span class="stringliteral">&quot;leq&quot;</span>, &amp;Extract&lt;Leq&gt;},</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    {<span class="stringliteral">&quot;geq&quot;</span>, &amp;Extract&lt;Geq&gt;},</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    {<span class="stringliteral">&quot;ite&quot;</span>, &amp;Extract&lt;Ite&gt;},</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    {<span class="stringliteral">&quot;switch&quot;</span>, &amp;Extract&lt;Switch&gt;}};</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* Initializer::GetExpression(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; expr_element,</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                                       <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;  std::string_view expr_type = expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>();</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;  <span class="keyword">auto</span> register_expression = [<span class="keyword">this</span>](std::unique_ptr&lt;Expression&gt; expression) {</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keyword">auto</span>* ret_ptr = expression.get();</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    model_-&gt;Add(std::move(expression));</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keywordflow">return</span> ret_ptr;</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;  };</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;int&quot;</span>) {</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keywordtype">int</span> val = *expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="keywordflow">return</span> register_expression(std::make_unique&lt;ConstantExpression&gt;(val));</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;  }</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;float&quot;</span>) {</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="keywordtype">double</span> val = *expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>&lt;<span class="keywordtype">double</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    <span class="keywordflow">return</span> register_expression(std::make_unique&lt;ConstantExpression&gt;(val));</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;  }</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;bool&quot;</span>) {</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keywordtype">bool</span> val = *expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>&lt;<span class="keywordtype">bool</span>&gt;(<span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <span class="keywordflow">return</span> val ? &amp;<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#acdd0cd916d7d1e5123971974933324d4">ConstantExpression::kOne</a> : &amp;<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#a5fcfecf109858c663225a1b77a34cca1">ConstantExpression::kZero</a>;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;  }</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;pi&quot;</span>)</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    <span class="keywordflow">return</span> &amp;<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#ae70e7705b55883bb393228fbb2835542">ConstantExpression::kPi</a>;</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;test-initiating-event&quot;</span>) {</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <span class="keywordflow">return</span> register_expression(std::make_unique&lt;TestInitiatingEvent&gt;(</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        std::string(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>)), model_-&gt;context()));</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;  }</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;test-functional-event&quot;</span>) {</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    <span class="keywordflow">return</span> register_expression(std::make_unique&lt;TestFunctionalEvent&gt;(</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        std::string(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>)),</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        std::string(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;state&quot;</span>)), model_-&gt;context()));</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;  }</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;extern-function&quot;</span>) {</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">ExternFunction&lt;void&gt;</a>* extern_function = [<span class="keyword">this</span>, &amp;expr_element] {</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;      std::string name(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;      <span class="keyword">auto</span> it = model_-&gt;extern_functions().find(name);</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;      <span class="keywordflow">if</span> (it == model_-&gt;extern_functions().end()) {</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Undefined extern function: &quot;</span> + name))</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;            &lt;&lt; boost::errinfo_at_line(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;      }</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;      (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;      <span class="keywordflow">return</span> it-&gt;get();</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    }();</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    std::vector&lt;Expression*&gt; expr_args;</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>())</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;      expr_args.push_back(GetExpression(node, base_path));</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;      <span class="keywordflow">return</span> register_expression(extern_function-&gt;<a class="code" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml#a7b918d60fa2969cbf5ecc758c6998de0">apply</a>(std::move(expr_args)));</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;      err &lt;&lt; boost::errinfo_at_line(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    }</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;  }</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span>* expression = GetParameter(expr_type, expr_element, base_path))</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="keywordflow">return</span> expression;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression = register_expression(kExpressionExtractors_.at(</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        expr_type)(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>(), base_path, <span class="keyword">this</span>));</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="comment">// Register for late validation after ensuring no cycles.</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    expressions_.emplace_back(expression, expr_element);</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <span class="keywordflow">return</span> expression;</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    err &lt;&lt; boost::errinfo_at_line(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;  }</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;}</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* Initializer::GetParameter(<span class="keyword">const</span> std::string_view&amp; expr_type,</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; expr_element,</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                                      <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;  <span class="keyword">auto</span> check_units = [&amp;expr_element](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; parameter) {</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    std::string_view unit = expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;unit&quot;</span>);</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* param_unit = <a class="code" href="parameter_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">scram::mef::kUnitsToString</a>[parameter.unit()];</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    <span class="keywordflow">if</span> (!unit.empty() &amp;&amp; unit != param_unit) {</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;      std::stringstream msg;</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;Parameter unit mismatch.\nExpected: &quot;</span> &lt;&lt; param_unit</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;\nGiven: &quot;</span> &lt;&lt; unit;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(msg.str()))</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;          &lt;&lt; boost::errinfo_at_line(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    }</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;  };</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;  <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;parameter&quot;</span>) {</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    std::string name(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* param = GetParameter(name, base_path);</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;      param-&gt;<a class="code" href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">usage</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;      check_units(*param);</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;      <span class="keywordflow">return</span> param;</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    } <span class="keywordflow">catch</span> (std::out_of_range&amp;) {</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;          <span class="stringliteral">&quot;Undefined parameter &quot;</span> + name +</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;          (base_path.empty() ? <span class="stringliteral">&quot;&quot;</span> : <span class="stringliteral">&quot; with base path &quot;</span> + base_path)))</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;          &lt;&lt; boost::errinfo_at_line(expr_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    }</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (expr_type == <span class="stringliteral">&quot;system-mission-time&quot;</span>) {</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    check_units(model_-&gt;mission_time());</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="keywordflow">return</span> &amp;model_-&gt;mission_time();</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;  }</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;  <span class="comment">// The expression is not a parameter.</span></div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;}</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessCcfMembers(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; members_node,</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                                    <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; event_node : members_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>()) {</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    assert(<span class="stringliteral">&quot;basic-event&quot;</span> == event_node.name());</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    <span class="keyword">auto</span> basic_event =</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;        std::make_unique&lt;BasicEvent&gt;(std::string(event_node.attribute(<span class="stringliteral">&quot;name&quot;</span>)),</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                                     ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>(), ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>());</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;      ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a9d6dbf5a3154a1537a806e7f3993c710">AddMember</a>(basic_event.get());</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>&amp; err) {</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;      err &lt;&lt; boost::errinfo_at_line(event_node.line());</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    }</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    Register(std::move(basic_event), event_node);</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;  }</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;}</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;<span class="keywordtype">void</span> Initializer::DefineCcfFactor(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; factor_node,</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                                  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression =</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;      GetExpression(*factor_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(), ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>());</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a585735fdd3be1d19d39705dfb80bca37">AddFactor</a>(expression, factor_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;level&quot;</span>));</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    err &lt;&lt; boost::errinfo_at_line(factor_node.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;  }</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;}</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* Initializer::GetParameter(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;                                     <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, model_-&gt;parameters(),</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;                   path_parameters_);</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;}</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>* Initializer::GetHouseEvent(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;                                       <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, model_-&gt;house_events(),</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;                   path_house_events_);</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;}</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* Initializer::GetBasicEvent(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;                                       <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, model_-&gt;basic_events(),</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;                   path_basic_events_);</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;}</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* Initializer::GetGate(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                           <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;  <span class="keywordflow">return</span> GetEntity(entity_reference, base_path, model_-&gt;gates(), path_gates_);</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;}</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> P, <span class="keyword">class</span> T&gt;</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;T* Initializer::GetEntity(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                          <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;                          <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">IdTable&lt;P&gt;</a>&amp; container,</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                          <span class="keyword">const</span> PathTable&lt;T&gt;&amp; path_container) {</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;  assert(!entity_reference.empty());</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;  <span class="keywordflow">if</span> (!base_path.empty()) {  <span class="comment">// Check the local scope.</span></div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(path_container, base_path + <span class="stringliteral">&quot;.&quot;</span> + entity_reference))</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;      <span class="keywordflow">return</span> &amp;**it;</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;  }</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;  <span class="keyword">auto</span> at = [&amp;entity_reference](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; reference_container) {</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(reference_container, entity_reference))</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;      <span class="keywordflow">return</span> &amp;**it;</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="keywordflow">throw</span> std::out_of_range(<span class="stringliteral">&quot;The entity cannot be found.&quot;</span>);</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;  };</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;  <span class="keywordflow">if</span> (entity_reference.find(<span class="charliteral">&#39;.&#39;</span>) == std::string::npos)  <span class="comment">// Public entity.</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <span class="keywordflow">return</span> at(container);</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;  <span class="keywordflow">return</span> at(path_container);  <span class="comment">// Direct access.</span></div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;}</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;<span class="comment">/// Helper macro for Initializer::GetEvent event discovery.</span></div><div class="line"><a name="l01368"></a><span class="lineno"><a class="line" href="initializer_8cc.xhtml#a4591496fc084c8228e52d5c7c8f84d30"> 1368</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define GET_EVENT(gates, basic_events, house_events, path_reference) \</span></div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;<span class="preprocessor">  do {                                                               \</span></div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="preprocessor">    if (auto it = ext::find(gates, path_reference))                  \</span></div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="preprocessor">      return &amp;**it;                                                  \</span></div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="preprocessor">    if (auto it = ext::find(basic_events, path_reference))           \</span></div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="preprocessor">      return &amp;**it;                                                  \</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="preprocessor">    if (auto it = ext::find(house_events, path_reference))           \</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;<span class="preprocessor">      return &amp;**it;                                                  \</span></div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;<span class="preprocessor">  } while (false)</span></div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a> Initializer::GetEvent(<span class="keyword">const</span> std::string&amp; entity_reference,</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;                                        <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;  <span class="comment">// Do not implement this in terms of</span></div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;  <span class="comment">// GetGate, GetBasicEvent, or GetHouseEvent.</span></div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;  <span class="comment">// The semantics for local lookup with the base type is different.</span></div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;  assert(!entity_reference.empty());</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;  <span class="keywordflow">if</span> (!base_path.empty()) {  <span class="comment">// Check the local scope.</span></div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    std::string full_path = base_path + <span class="stringliteral">&quot;.&quot;</span> + entity_reference;</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <a class="code" href="initializer_8cc.xhtml#a4591496fc084c8228e52d5c7c8f84d30">GET_EVENT</a>(path_gates_, path_basic_events_, path_house_events_, full_path);</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;  }</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;  <span class="keywordflow">if</span> (entity_reference.find(<span class="charliteral">&#39;.&#39;</span>) == std::string::npos) {  <span class="comment">// Public entity.</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <a class="code" href="initializer_8cc.xhtml#a4591496fc084c8228e52d5c7c8f84d30">GET_EVENT</a>(model_-&gt;gates(), model_-&gt;basic_events(), model_-&gt;house_events(),</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;              entity_reference);</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;  } <span class="keywordflow">else</span> {  <span class="comment">// Direct access.</span></div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <a class="code" href="initializer_8cc.xhtml#a4591496fc084c8228e52d5c7c8f84d30">GET_EVENT</a>(path_gates_, path_basic_events_, path_house_events_,</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;              entity_reference);</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;  }</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;  <span class="keywordflow">throw</span> std::out_of_range(<span class="stringliteral">&quot;The event cannot be bound.&quot;</span>);</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;}</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="preprocessor">#undef GET_EVENT</span></div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="keywordtype">void</span> Initializer::DefineExternLibraries(<span class="keyword">const</span> xml::Element&amp; xml_node,</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                                        <span class="keyword">const</span> std::string&amp; xml_file) {</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;  <span class="keyword">auto</span> optional_bool = [&amp;xml_node](<span class="keyword">const</span> <span class="keywordtype">char</span>* tag) {</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    std::optional&lt;bool&gt; attribute = xml_node.attribute&lt;<span class="keywordtype">bool</span>&gt;(tag);</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    <span class="keywordflow">return</span> attribute ? *attribute : <span class="keyword">false</span>;</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;  };</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;  <span class="keyword">auto</span> library = [&amp;xml_file, &amp;xml_node, &amp;optional_bool] {</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;      <span class="keywordflow">return</span> std::make_unique&lt;ExternLibrary&gt;(</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;          std::string(xml_node.attribute(<span class="stringliteral">&quot;name&quot;</span>)),</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;          std::string(xml_node.attribute(<span class="stringliteral">&quot;path&quot;</span>)),</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;          boost::filesystem::path(xml_file).parent_path(),</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;          optional_bool(<span class="stringliteral">&quot;system&quot;</span>), optional_bool(<span class="stringliteral">&quot;decorate&quot;</span>));</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    } <span class="keywordflow">catch</span> (DLError&amp; err) {</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;      err &lt;&lt; boost::errinfo_file_name(xml_file)</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_node.line());</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    } <span class="keywordflow">catch</span> (ValidityError&amp; err) {</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;      err &lt;&lt; boost::errinfo_at_line(xml_node.line());</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    }</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;  }();</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;  AttachLabelAndAttributes(xml_node, library.get());</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;  Register(std::move(library), xml_node);</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;}</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// Extern function initialization helpers.</span></div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="comment">/// All the allowed extern function parameter types.</span></div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="comment">/// @note Template code may be optimized for these types only.</span></div><div class="line"><a name="l01432"></a><span class="lineno"><a class="line" href="initializer_8cc.xhtml#ad2afd0f384a3d3a5f538cb395892ab87"> 1432</a></span>&#160;<span class="comment"></span><span class="keyword">enum class</span> <a class="code" href="initializer_8cc.xhtml#ad2afd0f384a3d3a5f538cb395892ab87">ExternParamType</a> { kInt = 1, kDouble };</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;<span class="keyword">const</span> <span class="keywordtype">int</span> kExternTypeBase = 3;  <span class="comment">///&lt; The information base for encoding.</span></div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">int</span> kMaxNumParam = 5;  <span class="comment">///&lt; The max number of args (excludes the return).</span></div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">int</span> kNumInterfaces = 126;  <span class="comment">///&lt; All possible interfaces.</span></div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="comment">/// Encodes parameter types kExternTypeBase base number.</span></div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment">/// @tparam SinglePassRange  The forward range type</span></div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment">/// @param[in] args  The non-empty XML elements encoding parameter types.</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;<span class="comment">/// @returns Unique integer encoding parameter types.</span></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;<span class="comment">/// @pre The number of parameters is less than log_base(max int).</span></div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> SinglePassRange&gt;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;<span class="keywordtype">int</span> Encode(<span class="keyword">const</span> SinglePassRange&amp; args) noexcept {</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;  assert(!args.empty());</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;  <span class="keyword">auto</span> to_digit = [](<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node) -&gt; <span class="keywordtype">int</span> {</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    std::string_view name = node.name();</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>([&amp;name] {</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;      <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;int&quot;</span>)</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <span class="keywordflow">return</span> ExternParamType::kInt;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;      assert(name == <span class="stringliteral">&quot;double&quot;</span>);</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;      <span class="keywordflow">return</span> ExternParamType::kDouble;</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    }());</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;  };</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;  <span class="keywordtype">int</span> ret = 0;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;  <span class="keywordtype">int</span> base_power = 1;  <span class="comment">// Base ^ (pos - 1).</span></div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; node : args) {</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    ret += base_power * to_digit(node);</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    base_power *= kExternTypeBase;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;  }</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;  <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;}</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;<span class="comment">/// Encodes function parameter types at compile-time.</span></div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;constexpr <span class="keywordtype">int</span> Encode(<span class="keywordtype">int</span> base_power = 1) noexcept {</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;  <span class="keywordflow">if</span> constexpr (<span class="keyword">sizeof</span>...(Ts)) {</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <span class="keywordflow">return</span> Encode&lt;T&gt;(base_power) + Encode&lt;Ts...&gt;(base_power * kExternTypeBase);</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> constexpr (std::is_same_v&lt;T, int&gt;) {</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <span class="keywordflow">return</span> base_power * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ExternParamType::kInt);</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    static_assert(std::is_same_v&lt;T, double&gt;);</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="keywordflow">return</span> base_power * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ExternParamType::kDouble);</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;  }</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;}</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;<span class="keyword">using</span> ExternFunctionExtractor = <a class="code" href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">ExternFunctionPtr</a> (*)(std::string,</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;                                                      <span class="keyword">const</span> std::string&amp;,</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;                                                      <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml">ExternLibrary</a>&amp;);</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="keyword">using</span> ExternFunctionExtractorMap =</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    std::unordered_map&lt;int, ExternFunctionExtractor&gt;;</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;<span class="comment">/// Generates all extractors for extern functions.</span></div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="comment">/// @tparam N  The number of parameters.</span></div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;<span class="comment">/// @tparam Ts  The return and parameter types of the extern function.</span></div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;<span class="comment">/// @param[in,out] function_map  The destination container for extractor.</span></div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">int</span> N, <span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;<span class="keywordtype">void</span> GenerateExternFunctionExtractor(ExternFunctionExtractorMap* function_map) {</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;  static_assert(N &gt;= 0);</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;  static_assert(<span class="keyword">sizeof</span>...(Ts));</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;  <span class="keywordflow">if</span> constexpr (N == 0) {</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    function_map-&gt;emplace(</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;        Encode&lt;Ts...&gt;(),</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;        [](std::string name, <span class="keyword">const</span> std::string&amp; symbol,</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;           <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml">ExternLibrary</a>&amp; library) -&gt; <a class="code" href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">ExternFunctionPtr</a> {</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;          <span class="keywordflow">return</span> std::make_unique&lt;<a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction</a>&lt;Ts...&gt;&gt;(std::move(name),</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                                                         symbol, library);</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;        });</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    GenerateExternFunctionExtractor&lt;0, Ts...&gt;(function_map);</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    GenerateExternFunctionExtractor&lt;N - 1, Ts..., <span class="keywordtype">int</span>&gt;(function_map);</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    GenerateExternFunctionExtractor&lt;N - 1, Ts..., <span class="keywordtype">double</span>&gt;(function_map);</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;  }</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;}</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;<span class="keywordtype">void</span> Initializer::DefineExternFunction(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">xml::Element</a>&amp; xml_element) {</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> ExternFunctionExtractorMap function_extractors = [] {</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    ExternFunctionExtractorMap function_map;</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    function_map.reserve(kNumInterfaces);</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    GenerateExternFunctionExtractor&lt;kMaxNumParam, int&gt;(&amp;function_map);</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    GenerateExternFunctionExtractor&lt;kMaxNumParam, double&gt;(&amp;function_map);</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    assert(function_map.size() == kNumInterfaces);</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="keywordflow">return</span> function_map;</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;  }();</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml">ExternLibrary</a>&amp; library = [<span class="keyword">this</span>, &amp;xml_element]() -&gt; decltype(<span class="keyword">auto</span>) {</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    std::string lib_name(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;library&quot;</span>));</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    <span class="keyword">auto</span> it = model_-&gt;libraries().find(lib_name);</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    <span class="keywordflow">if</span> (it == model_-&gt;libraries().end())</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Undefined extern library: &quot;</span> + lib_name))</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    (*it)-&gt;usage(<span class="keyword">true</span>);</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordflow">return</span> **it;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;  }();</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;  <a class="code" href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">ExternFunctionPtr</a> extern_function = [&amp;xml_element, &amp;library] {</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    <span class="keyword">auto</span> args = GetNonAttributeElements(xml_element);</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    assert(!args.empty());<span class="comment"></span></div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;<span class="comment">    /// @todo Optimize extern-function num args violation detection.</span></div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;<span class="comment"></span>    <span class="keywordtype">int</span> num_args = std::distance(args.begin(), args.end()) - <span class="comment">/*return*/</span> 1;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    <span class="keywordflow">if</span> (num_args &gt; kMaxNumParam) {</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;The number of function parameters &#39;&quot;</span> +</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;                                std::to_string(num_args) +</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                                <span class="stringliteral">&quot;&#39; exceeds the number of allowed parameters &#39;&quot;</span> +</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;                                std::to_string(kMaxNumParam) + <span class="stringliteral">&quot;&#39;&quot;</span>))</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;          &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    }</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keywordtype">int</span> encoding = Encode(args);</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;      <span class="keywordflow">return</span> function_extractors.at(encoding)(</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;          std::string(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;name&quot;</span>)),</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;          std::string(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="stringliteral">&quot;symbol&quot;</span>)), library);</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;      err &lt;&lt; boost::errinfo_at_line(xml_element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>());</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    }</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;  }();</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;  Register(std::move(extern_function), xml_element);</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;}</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;<span class="keywordtype">void</span> Initializer::ValidateInitialization() {</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;  <span class="comment">// Check if *all* gates have no cycles.</span></div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;  cycle::CheckCycle&lt;Gate&gt;(model_-&gt;gates(), <span class="stringliteral">&quot;gate&quot;</span>);</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;  <span class="comment">// Check for cycles in event tree instruction rules.</span></div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;  cycle::CheckCycle&lt;Rule&gt;(model_-&gt;rules(), <span class="stringliteral">&quot;rule&quot;</span>);</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;  <span class="comment">// Check for cycles in event tree branches.</span></div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">EventTreePtr</a>&amp; event_tree : model_-&gt;event_trees()) {</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;      cycle::CheckCycle&lt;NamedBranch&gt;(event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>(), <span class="stringliteral">&quot;branch&quot;</span>);</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1CycleError.xhtml">CycleError</a>&amp; err) {</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;      err &lt;&lt; <a class="code" href="error_8h.xhtml#a9e7c724d6d57b1b9fa496e66755e5e02">errinfo_container</a>(<span class="stringliteral">&quot;Event tree &#39;&quot;</span> + event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() + <span class="stringliteral">&quot;&#39;&quot;</span>);</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    }</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;  }</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;  <span class="comment">// All other event-tree checks available after ensuring no-cycles in branches.</span></div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">EventTreePtr</a>&amp; event_tree : model_-&gt;event_trees()) {</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">NamedBranchPtr</a>&amp; branch : event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>()) {</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        CheckFunctionalEventOrder(*branch);  <span class="comment">// The order of events in forks.</span></div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;        EnsureLinksOnlyInSequences(*branch);  <span class="comment">// Link instructions in sequences.</span></div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;      }</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;      CheckFunctionalEventOrder(event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;      EnsureLinksOnlyInSequences(event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;      err &lt;&lt; <a class="code" href="error_8h.xhtml#a9e7c724d6d57b1b9fa496e66755e5e02">errinfo_container</a>(<span class="stringliteral">&quot;Event tree &#39;&quot;</span> + event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() + <span class="stringliteral">&quot;&#39;&quot;</span>);</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    }</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;  }</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;  <span class="comment">// The cycles in links are checked only after ensuring their valid locations.</span></div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;  cycle::CheckCycle&lt;Link&gt;(links_, <span class="stringliteral">&quot;event-tree link&quot;</span>);</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;  <span class="comment">// Event-tree instruction homogeneity checks only after cycle checks.</span></div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">EventTreePtr</a>&amp; event_tree : model_-&gt;event_trees()) {</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">NamedBranchPtr</a>&amp; branch : event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>()) {</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;        EnsureHomogeneousEventTree(*branch);  <span class="comment">// No mixed instructions.</span></div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;      }</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;      EnsureHomogeneousEventTree(event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;      err &lt;&lt; <a class="code" href="error_8h.xhtml#a9e7c724d6d57b1b9fa496e66755e5e02">errinfo_container</a>(<span class="stringliteral">&quot;Event tree &#39;&quot;</span> + event_tree-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() + <span class="stringliteral">&quot;&#39;&quot;</span>);</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    }</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;  }</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;  EnsureNoSubstitutionConflicts();</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;  <span class="comment">// Check if all basic events have expressions for probability analysis.</span></div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;  <span class="keywordflow">if</span> (settings_.probability_analysis()) {</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    std::string msg;</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">BasicEventPtr</a>&amp; event : model_-&gt;basic_events()) {</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;      <span class="keywordflow">if</span> (event-&gt;HasExpression() == <span class="keyword">false</span>)</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;        msg += event-&gt;name() + <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    }</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    <span class="keywordflow">if</span> (!msg.empty())</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;          <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;These basic events do not have expressions:\n&quot;</span> + msg));</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;  }</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;  ValidateExpressions();</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;}</div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;<span class="keywordtype">void</span> Initializer::CheckFunctionalEventOrder(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch) {</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;  <span class="keyword">struct </span>CheckOrder {</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>*)<span class="keyword"> const </span>{}</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>* named_branch)<span class="keyword"> const </span>{</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;      std::visit(*<span class="keyword">this</span>, named_branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;    }</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork)<span class="keyword"> const </span>{</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;      <span class="keywordflow">if</span> (functional_event.order() == fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>().<a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">order</a>()) {</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;        assert(&amp;functional_event == &amp;fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>());</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Functional event &quot;</span> +</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;                                  functional_event.name() +</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;                                  <span class="stringliteral">&quot; is duplicated in event tree fork paths.&quot;</span>));</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;      }</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;      <span class="keywordflow">if</span> (functional_event.order() &gt; fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>().<a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">order</a>())</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;            <span class="stringliteral">&quot;Functional event &quot;</span> + functional_event.name() +</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;            <span class="stringliteral">&quot; must appear after functional event &quot;</span> +</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;            fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>().<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() + <span class="stringliteral">&quot; in event tree fork paths.&quot;</span>));</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    }</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; functional_event;</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;  };</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;  <span class="keyword">struct </span>OrderValidator {</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>*)<span class="keyword"> const </span>{}</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>*)<span class="keyword"> const </span>{}</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork)<span class="keyword"> const </span>{</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a>&amp; fork_path : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>()) {</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;        initializer-&gt;CheckFunctionalEventOrder(fork_path);</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;        std::visit(CheckOrder{fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>()}, fork_path.target());</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;      }</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;    }</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* initializer;</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;  };</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;  std::visit(OrderValidator{<span class="keyword">this</span>}, branch.<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;}</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;<span class="keywordtype">void</span> Initializer::EnsureLinksOnlyInSequences(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch) {</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;  <span class="keyword">struct </span>Validator : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml">NullVisitor</a> {</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>* link)<span class="keyword"> override </span>{</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Link &quot;</span> + link-&gt;<a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>().<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() +</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;                                <span class="stringliteral">&quot; can only be used in end-state sequences.&quot;</span>));</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;    }</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;  };</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;  <span class="keyword">struct </span>{</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>*) {}</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>*) {}</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* arg_branch) {</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : arg_branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">instructions</a>())</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;        instruction-&gt;Accept(&amp;validator);</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;      std::visit(*<span class="keyword">this</span>, arg_branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    }</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    <span class="keywordtype">void</span> operator()(<a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork) {</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a>&amp; fork_path : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>())</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;        (*<span class="keyword">this</span>)(&amp;fork_path);</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    }</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;    Validator validator;</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;  } link_checker;</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;  link_checker(&amp;branch);</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;}</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;<span class="keywordtype">void</span> Initializer::EnsureHomogeneousEventTree(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; branch) {</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;  <span class="keyword">enum</span> Type { kUnknown, kExpression, kFormula };</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;  <span class="keyword">struct </span>Visitor : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml">NullVisitor</a> {</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;      <span class="keywordflow">switch</span> (type) {</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;        <span class="keywordflow">case</span> kFormula:</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;          <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;              <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Mixed collect-expression and collect-formula&quot;</span>));</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;        <span class="keywordflow">case</span> kUnknown:</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;          type = kExpression;</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;        <span class="keywordflow">case</span> kExpression:</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;          <span class="keywordflow">break</span>;</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;      }</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    }</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;      <span class="keywordflow">switch</span> (type) {</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;        <span class="keywordflow">case</span> kExpression:</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;          <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;              <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Mixed collect-expression and collect-formula&quot;</span>));</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;        <span class="keywordflow">case</span> kUnknown:</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;          type = kFormula;</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        <span class="keywordflow">case</span> kFormula:</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;          <span class="keywordflow">break</span>;</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;      }</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    }</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>* link)<span class="keyword"> override </span>{</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;      (*this)(&amp;link-&gt;<a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>().<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>());</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    }</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    <span class="keywordtype">void</span> CheckInstructions(<span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; instructions) {</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : instructions)</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;        instruction-&gt;Accept(<span class="keyword">this</span>);</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;    }</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* sequence) {</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;      CheckInstructions(sequence-&gt;<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>());</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    }</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>* arg_branch) {</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;      CheckInstructions(arg_branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">instructions</a>());</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;      std::visit(*<span class="keyword">this</span>, arg_branch-&gt;<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>());</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    }</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>* fork) {</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a>&amp; fork_path : fork-&gt;<a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>())</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;        (*<span class="keyword">this</span>)(&amp;fork_path);</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    }</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    Type type = kUnknown;</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;  } homogeneous_checker;</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;  homogeneous_checker(&amp;branch);</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;}</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;<span class="keywordtype">void</span> Initializer::EnsureNoSubstitutionConflicts() {</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;  <span class="keyword">auto</span> substitutions = model_-&gt;substitutions() |</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;                       boost::adaptors::filtered([](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; substitution) {</div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;                         <span class="keywordflow">return</span> !substitution-&gt;declarative();</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;                       });</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="substitution_8h.xhtml#a96c7da3ca9d39dfdeeb908c4a8e0a3bf">SubstitutionPtr</a>&amp; origin : substitutions) {</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>* target_ptr = std::get_if&lt;BasicEvent*&gt;(&amp;origin-&gt;target());</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="substitution_8h.xhtml#a96c7da3ca9d39dfdeeb908c4a8e0a3bf">SubstitutionPtr</a>&amp; substitution : substitutions) {</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;      <span class="keywordflow">if</span> (target_ptr &amp;&amp; boost::count(substitution-&gt;source(), *target_ptr))</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;            <span class="stringliteral">&quot;Non-declarative substitution &#39;&quot;</span> + origin-&gt;name() +</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;            <span class="stringliteral">&quot;&#39; target event should not appear in any substitution source.&quot;</span>));</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;      <span class="keywordflow">if</span> (origin == substitution)</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;      <span class="keyword">auto</span> in_hypothesis = [&amp;substitution](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* source) {</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;        <span class="keywordflow">return</span> ext::any_of(substitution-&gt;hypothesis().event_args(),</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;                           [source](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a>&amp; arg) {</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;                             <span class="keywordflow">return</span> std::get&lt;BasicEvent*&gt;(arg) == source;</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;                           });</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;      };</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;      <span class="keywordflow">if</span> (target_ptr &amp;&amp; in_hypothesis(*target_ptr))</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Non-declarative substitution &#39;&quot;</span> +</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;                                  origin-&gt;name() +</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;                                  <span class="stringliteral">&quot;&#39; target event should not appear in another &quot;</span></div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;                                  <span class="stringliteral">&quot;substitution hypothesis.&quot;</span>));</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;      <span class="keywordflow">if</span> (ext::any_of(origin-&gt;source(), in_hypothesis))</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;        <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Non-declarative substitution &#39;&quot;</span> +</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;                                  origin-&gt;name() +</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;                                  <span class="stringliteral">&quot;&#39; source event should not appear in another &quot;</span></div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;                                  <span class="stringliteral">&quot;substitution hypothesis.&quot;</span>));</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;    }</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;  }</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;}</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;<span class="keywordtype">void</span> Initializer::EnsureNoCcfSubstitutions() {</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;  <span class="keyword">auto</span> substitutions = model_-&gt;substitutions() |</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;                       boost::adaptors::filtered([](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; substitution) {</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;                         <span class="keywordflow">return</span> !substitution-&gt;declarative();</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;                       });</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;  <span class="keyword">auto</span> is_ccf = [](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Substitution.xhtml">Substitution</a>&amp; substitution) {</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;    <span class="keywordflow">if</span> (ext::any_of(substitution.hypothesis().event_args(),</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;                    [](<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">Formula::EventArg</a>&amp; arg) {</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;                      <span class="keywordflow">return</span> std::get&lt;BasicEvent*&gt;(arg)-&gt;HasCcf();</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;                    }))</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>* target_ptr = std::get_if&lt;BasicEvent*&gt;(&amp;substitution.target());</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    <span class="keywordflow">if</span> (target_ptr &amp;&amp; (*target_ptr)-&gt;HasCcf())</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    <span class="keywordflow">if</span> (ext::any_of(substitution.source(), std::mem_fn(&amp;<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ae027e3ac6b3cf4839983dc2616ce0572">BasicEvent::HasCcf</a>)))</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;  };</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="substitution_8h.xhtml#a96c7da3ca9d39dfdeeb908c4a8e0a3bf">SubstitutionPtr</a>&amp; substitution : substitutions) {</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    <span class="keywordflow">if</span> (is_ccf(*substitution))</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Non-declarative substitution &#39;&quot;</span> +</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;                                substitution-&gt;name() +</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;                                <span class="stringliteral">&quot;&#39; events cannot be in a CCF group.&quot;</span>));</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;  }</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;}</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;<span class="keywordtype">void</span> Initializer::EnsureSubstitutionsWithApproximations() {</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;  <span class="keywordflow">if</span> (settings_.approximation() != core::Approximation::kNone)</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;</div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(model_-&gt;substitutions(),</div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;                  [](<span class="keyword">const</span> <a class="code" href="substitution_8h.xhtml#a96c7da3ca9d39dfdeeb908c4a8e0a3bf">SubstitutionPtr</a>&amp; substitution) {</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;                    <span class="keywordflow">return</span> !substitution-&gt;declarative();</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;                  }))</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(</div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;        <span class="stringliteral">&quot;Non-declarative substitutions do not apply to exact analyses.&quot;</span>));</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;}</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;<span class="keywordtype">void</span> Initializer::ValidateExpressions() {</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;  <span class="comment">// Check for cycles in parameters.</span></div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;  <span class="comment">// This must be done before expressions.</span></div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;  cycle::CheckCycle&lt;Parameter&gt;(model_-&gt;parameters(), <span class="stringliteral">&quot;parameter&quot;</span>);</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;  <span class="comment">// Validate expressions.</span></div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;Expression*, xml::Element&gt;&amp; expression : expressions_) {</div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;      expression.first-&gt;Validate();</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;      err &lt;&lt; boost::errinfo_file_name(expression.second.filename())</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;          &lt;&lt; boost::errinfo_at_line(expression.second.line());</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    }</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;  }</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;</div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;  <span class="comment">// Validate CCF groups.</span></div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a0a5b86b780d70d8111700ec834ee7217">CcfGroupPtr</a>&amp; group : model_-&gt;ccf_groups()) {</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;    group-&gt;Validate();</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;  }</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;  <span class="comment">// Check probability values for primary events.</span></div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">BasicEventPtr</a>&amp; event : model_-&gt;basic_events()) {</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;    <span class="keywordflow">if</span> (event-&gt;HasExpression())</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;      event-&gt;Validate();</div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;  }</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;}</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;<span class="keywordtype">void</span> Initializer::SetupForAnalysis() {</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;  {</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Collecting top events of fault trees&quot;</span>);</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a87cdc93e494b5e957991657303a2e30b">GatePtr</a>&amp; gate : model_-&gt;gates())</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;      gate-&gt;mark(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">NodeMark::kClear</a>);</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a>&amp; ft : model_-&gt;fault_trees())</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;      ft-&gt;CollectTopEvents();</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;  }</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;  {</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;    <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Applying CCF models&quot;</span>);</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;    <span class="comment">// CCF groups must apply models to basic event members.</span></div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a0a5b86b780d70d8111700ec834ee7217">CcfGroupPtr</a>&amp; group : model_-&gt;ccf_groups())</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;      group-&gt;ApplyModel();</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;  }</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;}</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="logger_8h_xhtml_a43bfc963f340281b07ac23d1c3ba00b5"><div class="ttname"><a href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a></div><div class="ttdeci">#define TIMER(level,...)</div><div class="ttdoc">Creates an automatic unique logging timer for a scope. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00036">fault_tree.h:36</a></div></div>
<div class="ttc" id="alignment_8h_xhtml_a1db04a95962852f2791c86ea3bcf9861"><div class="ttname"><a href="alignment_8h.xhtml#a1db04a95962852f2791c86ea3bcf9861">scram::mef::AlignmentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Alignment &gt; AlignmentPtr</div><div class="ttdoc">Unique model alignments. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8h_source.xhtml#l00086">alignment.h:86</a></div></div>
<div class="ttc" id="structscram_1_1IOError_xhtml"><div class="ttname"><a href="structscram_1_1IOError.xhtml">scram::IOError</a></div><div class="ttdoc">For input/output related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00066">error.h:66</a></div></div>
<div class="ttc" id="event_8h_xhtml_a313c82b9d44af8fb0e080c3d2487f406"><div class="ttname"><a href="event_8h.xhtml#a313c82b9d44af8fb0e080c3d2487f406">scram::mef::kNumOperators</a></div><div class="ttdeci">const int kNumOperators</div><div class="ttdoc">The number of operators in the enum. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00218">event.h:218</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">scram::DEBUG1</a></div><div class="ttdoc">Minimal debugging information. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00078">logger.h:78</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a29871b1caf2fb961509b42872e6b5213"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a29871b1caf2fb961509b42872e6b5213">scram::mef::Component::Add</a></div><div class="ttdeci">void Add(Gate *element)</div><div class="ttdoc">Adds MEF constructs into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00031">fault_tree.cc:31</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_aa541fee61ff2be90b083f45dc1c26046"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">scram::mef::Initializer::model</a></div><div class="ttdeci">std::shared_ptr&lt; Model &gt; model() const </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00080">initializer.h:80</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_ab1859efddac529e0827537fae2f16cbb"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#ab1859efddac529e0827537fae2f16cbb">scram::mef::Substitution::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Checks if the substitution is setup correctly. </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8cc_source.xhtml#l00038">substitution.cc:38</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Document_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Document.xhtml">scram::xml::Document</a></div><div class="ttdoc">XML DOM tree document. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00406">xml.h:406</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00174">element.h:174</a></div></div>
<div class="ttc" id="alignment_8h_xhtml_a6c8bec380e8765eecb85692acce281bf"><div class="ttname"><a href="alignment_8h.xhtml#a6c8bec380e8765eecb85692acce281bf">scram::mef::PhasePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Phase &gt; PhasePtr</div><div class="ttdoc">Phases are unique to alignments. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8h_source.xhtml#l00060">alignment.h:60</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_a587b8312cc0bfbd5d9b6e8c73890c99e"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a587b8312cc0bfbd5d9b6e8c73890c99e">scram::xml::Element::Range::end</a></div><div class="ttdeci">iterator end() const </div><div class="ttdoc">The range begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00224">xml.h:224</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a11e578b8e757b3eaa293a1c657f1f29a"><div class="ttname"><a href="event__tree_8h.xhtml#a11e578b8e757b3eaa293a1c657f1f29a">scram::mef::InitiatingEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; InitiatingEvent &gt; InitiatingEventPtr</div><div class="ttdoc">Unique initiating events in a model. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00238">event_tree.h:238</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00075">event.h:75</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a9d6dbf5a3154a1537a806e7f3993c710"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a9d6dbf5a3154a1537a806e7f3993c710">scram::mef::CcfGroup::AddMember</a></div><div class="ttdeci">void AddMember(BasicEvent *basic_event)</div><div class="ttdoc">Adds a basic event into this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00038">ccf_group.cc:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a12aa312ac26a4fc798ff68816d9482b0"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">const Branch &amp; initial_state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00170">event_tree.h:170</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_ae722d4816c427429833f90a5c8c1cd30"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#ae722d4816c427429833f90a5c8c1cd30">scram::xml::Element::has_attribute</a></div><div class="ttdeci">bool has_attribute(const char *name) const </div><div class="ttdoc">Queries element attribute existence. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00299">xml.h:299</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml">scram::xml::Element</a></div><div class="ttdoc">XML Element adaptor. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00176">xml.h:176</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml">scram::mef::InitiatingEvent</a></div><div class="ttdoc">Event-tree Initiating Event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00214">event_tree.h:214</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea4f4bd6251fafa8940aa06789192c5d68"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea4f4bd6251fafa8940aa06789192c5d68">scram::WARNING</a></div><div class="ttdoc">Warnings for users, such as assumptions and corrections. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00071">logger.h:71</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a40797175e64c8399cb3bca9fa104ccd5"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a40797175e64c8399cb3bca9fa104ccd5">scram::mef::Substitution::source</a></div><div class="ttdeci">const std::vector&lt; BasicEvent * &gt; &amp; source() const </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00071">substitution.h:71</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml">scram::mef::CollectExpression</a></div><div class="ttdoc">The operation of collecting expressions for event tree sequences. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00074">instruction.h:74</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_1_1iterator_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">scram::xml::Element::Range::iterator</a></div><div class="ttdoc">Iterator over range elements. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00186">xml.h:186</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00173">event.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00038">instruction.h:38</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_xhtml_aabec51a591c72a273c8909474d3fe8ae"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#aabec51a591c72a273c8909474d3fe8ae">scram::mef::Initializer::Extractor::operator()</a></div><div class="ttdeci">std::unique_ptr&lt; T &gt; operator()(const xml::Element::Range &amp;args, const std::string &amp;base_path, Initializer *init)</div><div class="ttdoc">Extracts expressions to be passed to the constructor of expression T. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00965">initializer.cc:965</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a358b7ba8bf8488abfcd22516474b2ad5"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a358b7ba8bf8488abfcd22516474b2ad5">scram::mef::Formula::EventArg</a></div><div class="ttdeci">std::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00230">event.h:230</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a14bbb8758b9a4fb43a532a385f9d72d6"><div class="ttname"><a href="event__tree_8h.xhtml#a14bbb8758b9a4fb43a532a385f9d72d6">scram::mef::SequencePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Sequence &gt; SequencePtr</div><div class="ttdoc">Sequences are defined in event trees but referenced in other constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00055">event_tree.h:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml_a30eb85c55698bafe4bab0670d019c157"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">scram::mef::FunctionalEvent::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00068">event_tree.h:68</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml">scram::mef::HouseEvent</a></div><div class="ttdoc">Representation of a house event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00049">event.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a4911986f8be0a6de619955d59cbd1537"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a4911986f8be0a6de619955d59cbd1537">scram::mef::Substitution::hypothesis</a></div><div class="ttdeci">const Formula &amp; hypothesis() const </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00047">substitution.h:47</a></div></div>
<div class="ttc" id="logger_8h_xhtml_afbc1fb2843a8415445a0528c5212eeb9"><div class="ttname"><a href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a></div><div class="ttdeci">#define DUR(var)</div><div class="ttdoc">Calculates the time duration since the start of the clock in seconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00052">logger.h:52</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">scram::mef::kVote</a></div><div class="ttdoc">Combination, K/N, atleast, or Vote gate representation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00209">event.h:209</a></div></div>
<div class="ttc" id="numerical_8h_xhtml"><div class="ttname"><a href="numerical_8h.xhtml">numerical.h</a></div><div class="ttdoc">A collection of numerical expressions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_a673197bb550b4b62db7fae7c8a0bd6dc"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">scram::mef::Fork::functional_event</a></div><div class="ttdeci">const FunctionalEvent &amp; functional_event() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00151">event_tree.h:151</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction.xhtml">scram::mef::ExternFunction</a></div><div class="ttdoc">Extern function abstraction to be referenced by expressions. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00081">extern.h:81</a></div></div>
<div class="ttc" id="conditional_8h_xhtml"><div class="ttname"><a href="conditional_8h.xhtml">conditional.h</a></div><div class="ttdoc">Conditional (if-then-else, switch-case) expressions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Alignment_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Alignment.xhtml">scram::mef::Alignment</a></div><div class="ttdoc">Alignment configuration for the whole model per analysis. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8h_source.xhtml#l00063">alignment.h:63</a></div></div>
<div class="ttc" id="event_8h_xhtml_af2bc060f951b2dcb63fb313d3800f9f3"><div class="ttname"><a href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00152">event.h:152</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a4a447a4146a0131bc1461762d55f6482"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">scram::xml::Element::line</a></div><div class="ttdeci">int line() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00265">xml.h:265</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_aabe81dc526fdae951724e42707c1164f"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">void event_tree(EventTree *event_tree)</div><div class="ttdoc">Associates an event tree to the initiating event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00221">event_tree.h:221</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_ab164f33b4aa86b74b853b87126bc8ff8"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">scram::xml::Element::child</a></div><div class="ttdeci">std::optional&lt; Element &gt; child(std::string_view name=&quot;&quot;) const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00366">xml.h:366</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4_xhtml_aed4438ca816e65ced748e4bc1f67a631"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml#aed4438ca816e65ced748e4bc1f67a631">scram::mef::Initializer::Extractor&lt; T,-1 &gt;::operator()</a></div><div class="ttdeci">std::unique_ptr&lt; T &gt; operator()(const xml::Element::Range &amp;args, const std::string &amp;base_path, Initializer *init)</div><div class="ttdoc">Constructs an expression with a variable number of arguments. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l01017">initializer.cc:1017</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_a5fcfecf109858c663225a1b77a34cca1"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#a5fcfecf109858c663225a1b77a34cca1">scram::mef::ConstantExpression::kZero</a></div><div class="ttdeci">static ConstantExpression kZero</div><div class="ttdoc">Constant 0 or False. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00031">constant.h:31</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a585735fdd3be1d19d39705dfb80bca37"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a585735fdd3be1d19d39705dfb80bca37">scram::mef::CcfGroup::AddFactor</a></div><div class="ttdeci">void AddFactor(Expression *factor, std::optional&lt; int &gt; level={})</div><div class="ttdoc">Adds a CCF factor for the specified model. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00067">ccf_group.cc:67</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_a7f4be95643441bdad46a15d58ad15c13"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">scram::mef::Sequence::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00040">event_tree.h:40</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_ae2f0368ee0072083b59665e30c1f4949"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">scram::xml::Element::Range::begin</a></div><div class="ttdeci">iterator begin() const </div><div class="ttdoc">The range begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00223">xml.h:223</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a9fb29cbc2c3de675454fc41c493f1405"><div class="ttname"><a href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">scram::mef::EventTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; EventTree &gt; EventTreePtr</div><div class="ttdoc">Unique trees in a model. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00211">event_tree.h:211</a></div></div>
<div class="ttc" id="element_8h_xhtml_a850003eb778bdded85c40e3b3a02e50b"><div class="ttname"><a href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">scram::mef::IdTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Id, const std::string &amp;,&amp;Id::id &gt;&gt;&gt;&gt; IdTable</div><div class="ttdoc">Table of elements with unique ids. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00257">element.h:257</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a57646bebfb4ea93e00a11d2f7ef4fabf"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">scram::xml::Element::children</a></div><div class="ttdeci">Range children() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00375">xml.h:375</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml_ae2ee222f7ce6cd4660567ce97d551222"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml#ae2ee222f7ce6cd4660567ce97d551222">scram::mef::Usage::usage</a></div><div class="ttdeci">bool usage() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00308">element.h:308</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="event_8h_xhtml_a909e412c9ddc25648f5b9b6d942bdca9"><div class="ttname"><a href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">scram::mef::kOperatorToString</a></div><div class="ttdeci">const char *const kOperatorToString[]</div><div class="ttdoc">String representations of the operators. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00222">event.h:222</a></div></div>
<div class="ttc" id="exponential_8h_xhtml"><div class="ttname"><a href="exponential_8h.xhtml">exponential.h</a></div><div class="ttdoc">Expressions and distributions that are described with exponential formulas. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a0c130c599ff39bd4a5b269907f06b66d"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a0c130c599ff39bd4a5b269907f06b66d">scram::core::Settings::mission_time</a></div><div class="ttdeci">double mission_time() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00183">settings.h:183</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00881">pdag.cc:881</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a60d62e931d3865a3c76b4e1be95e1d11"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">scram::xml::Element::attribute</a></div><div class="ttdeci">std::string_view attribute(const char *name) const </div><div class="ttdoc">Retrieves the XML element&amp;#39;s attribute values. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00281">xml.h:281</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a03af7b139e3d786505ca38a80221d2ba"><div class="ttname"><a href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">scram::mef::NamedBranchPtr</a></div><div class="ttdeci">std::unique_ptr&lt; NamedBranch &gt; NamedBranchPtr</div><div class="ttdoc">Unique in event tree. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00124">event_tree.h:124</a></div></div>
<div class="ttc" id="initializer_8h_xhtml"><div class="ttname"><a href="initializer_8h.xhtml">initializer.h</a></div><div class="ttdoc">A facility that processes input files into analysis constructs. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml_adfe24f71af66ae29a889c6424baf6d84"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml#adfe24f71af66ae29a889c6424baf6d84">scram::mef::Parameter::expression</a></div><div class="ttdeci">void expression(Expression *expression)</div><div class="ttdoc">Sets the expression of this parameter. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8cc_source.xhtml#l00037">parameter.cc:37</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml">scram::mef::FunctionalEvent</a></div><div class="ttdoc">Representation of functional events in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00060">event_tree.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_ac3ed6a402b65d84fcc5d0c2ed52e8d05"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">scram::mef::Branch::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdoc">Sets the instructions to execute at the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00090">event_tree.h:90</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">scram::mef::NodeMark::kClear</a></div><div class="ttdoc">Implicit conversion to Boolean false. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00284">element.h:284</a></div></div>
<div class="ttc" id="substitution_8h_xhtml_a30e85033e5d98e26e92d0aa9eae22e16"><div class="ttname"><a href="substitution_8h.xhtml#a30e85033e5d98e26e92d0aa9eae22e16">scram::mef::kSubstitutionTypeToString</a></div><div class="ttdeci">const char *const kSubstitutionTypeToString[]</div><div class="ttdoc">String representations of the &quot;traditional&quot; substitution types in the MEF. </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00107">substitution.h:107</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_aa048e4ca4a5241bc274d2e4da401b5c6"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#aa048e4ca4a5241bc274d2e4da401b5c6">scram::mef::EventTree::Add</a></div><div class="ttdeci">void Add(Sequence *element)</div><div class="ttdoc">Adds event tree constructs into the container. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8cc_source.xhtml#l00050">event_tree.cc:50</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_3_01void_01_4_xhtml_a7b918d60fa2969cbf5ecc758c6998de0"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml#a7b918d60fa2969cbf5ecc758c6998de0">scram::mef::ExternFunction&lt; void &gt;::apply</a></div><div class="ttdeci">virtual std::unique_ptr&lt; Expression &gt; apply(std::vector&lt; Expression * &gt; args) const =0</div><div class="ttdoc">Applies the function to arguments. </div></div>
<div class="ttc" id="fault__tree_8h_xhtml_a8538f816ccf630916e93bd1432fa07d6"><div class="ttname"><a href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">scram::mef::FaultTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; FaultTree &gt; FaultTreePtr</div><div class="ttdoc">Unique trees in models. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00178">fault_tree.h:178</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00165">event_tree.h:165</a></div></div>
<div class="ttc" id="test__event_8h_xhtml"><div class="ttname"><a href="test__event_8h.xhtml">test_event.h</a></div><div class="ttdoc">Event tree analysis expressions to test functional and initiating events. </div></div>
<div class="ttc" id="initializer_8cc_xhtml_ad2afd0f384a3d3a5f538cb395892ab87"><div class="ttname"><a href="initializer_8cc.xhtml#ad2afd0f384a3d3a5f538cb395892ab87">scram::mef::@57::ExternParamType</a></div><div class="ttdeci">ExternParamType</div><div class="ttdoc">All the allowed extern function parameter types. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l01432">initializer.cc:1432</a></div></div>
<div class="ttc" id="structscram_1_1IllegalOperation_xhtml"><div class="ttname"><a href="structscram_1_1IllegalOperation.xhtml">scram::IllegalOperation</a></div><div class="ttdoc">This error can be used to indicate that call for a function or operation is not legal. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00084">error.h:84</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">scram::DEBUG3</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG2. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00080">logger.h:80</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a3886fbcbb5f9bc2ce3b45bc64a25559a"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">scram::mef::Link::event_tree</a></div><div class="ttdeci">const EventTree &amp; event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00179">instruction.h:179</a></div></div>
<div class="ttc" id="random__deviate_8h_xhtml"><div class="ttname"><a href="random__deviate_8h.xhtml">random_deviate.h</a></div><div class="ttdoc">A collection of deviate expressions with random distributions sampled at run-time. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_af6c8fa24558e26bbe305602ca86f9ae4"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">scram::mef::EventTree::branches</a></div><div class="ttdeci">const ElementTable&lt; NamedBranchPtr &gt; &amp; branches() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00181">event_tree.h:181</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abeb0d7efda63e877e150f54719da1ba8"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">scram::mef::Gate::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Checks if a gate is initialized correctly. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00045">event.cc:45</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a58abc717fb3ff89dcbd4f1cf392855e5"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">scram::xml::Element::name</a></div><div class="ttdeci">std::string_view name() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00270">xml.h:270</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml">scram::mef::Initializer</a></div><div class="ttdoc">This class operates on input files to initialize analysis constructs like models, fault trees...</div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00059">initializer.h:59</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00060">logger.h:60</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ab6b4e5fd2ce8a81ae887902be30c2b29"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">scram::mef::BasicEvent::HasExpression</a></div><div class="ttdeci">bool HasExpression() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00082">event.h:82</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="parameter_8h_xhtml_a488d363190a84f20f7a5ffac34e9fb8d"><div class="ttname"><a href="parameter_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">scram::mef::kNumUnits</a></div><div class="ttdeci">const int kNumUnits</div><div class="ttdoc">The number of elements in the Units enum. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00047">parameter.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_a9ad3e3e7a9af34ee371ef8d25e6bdeea"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#a9ad3e3e7a9af34ee371ef8d25e6bdeea">scram::mef::Gate::HasFormula</a></div><div class="ttdeci">bool HasFormula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00166">event.h:166</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ab9764640b00bcc3f7241c5bf185d8f2a"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">scram::mef::BasicEvent::expression</a></div><div class="ttdeci">void expression(Expression *expression)</div><div class="ttdoc">Sets the expression of this basic event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00088">event.h:88</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a39cb01e8c82942942da00d6537deeb72"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">scram::mef::HouseEvent::kFalse</a></div><div class="ttdeci">static HouseEvent kFalse</div><div class="ttdoc">Literal False event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00052">event.h:52</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml">scram::mef::Rule</a></div><div class="ttdoc">A reusable collection of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00146">instruction.h:146</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Alignment_xhtml_ad19d7e33723e1f33fbf49c14e75cf132"><div class="ttname"><a href="classscram_1_1mef_1_1Alignment.xhtml#ad19d7e33723e1f33fbf49c14e75cf132">scram::mef::Alignment::Add</a></div><div class="ttdeci">void Add(PhasePtr phase)</div><div class="ttdoc">Adds a phase into alignment. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00034">alignment.cc:34</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml">scram::mef::Link</a></div><div class="ttdoc">A link to another event tree in end-states only. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00173">instruction.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00161">event.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_add3768ebd5e4f11c0032f8dcfdf0486e"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">scram::mef::HouseEvent::kTrue</a></div><div class="ttdeci">static HouseEvent kTrue</div><div class="ttdoc">Literal True event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00051">event.h:51</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_3_01void_01_4_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">scram::mef::ExternFunction&lt; void &gt;</a></div><div class="ttdoc">Abstract base class for ExternFunction concrete types. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00089">extern.h:89</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00153">element.h:153</a></div></div>
<div class="ttc" id="parameter_8h_xhtml_ab9dbdff6bf14cfe7ba12a4490a80cff3"><div class="ttname"><a href="parameter_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">scram::mef::kUnitsToString</a></div><div class="ttdeci">const char *const kUnitsToString[]</div><div class="ttdoc">String representations of the Units in the same order as the enum. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00050">parameter.h:50</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02a"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02a">scram::mef::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Operators for formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00206">event.h:206</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml">scram::mef::CollectFormula</a></div><div class="ttdoc">The operation of connecting fault tree events into the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00089">instruction.h:89</a></div></div>
<div class="ttc" id="event_8h_xhtml_a87cdc93e494b5e957991657303a2e30b"><div class="ttname"><a href="event_8h.xhtml#a87cdc93e494b5e957991657303a2e30b">scram::mef::GatePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00154">event.h:154</a></div></div>
<div class="ttc" id="cycle_8h_xhtml"><div class="ttname"><a href="cycle_8h.xhtml">cycle.h</a></div><div class="ttdoc">Validation facilities to detect and print cycles in graphs. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_xhtml_a6df93dd361f12accc004acc1a3dc191d"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#a6df93dd361f12accc004acc1a3dc191d">scram::mef::Initializer::Extractor::operator()</a></div><div class="ttdeci">std::unique_ptr&lt; T &gt; operator()(xml::Element::Range::iterator it, xml::Element::Range::iterator it_end, const std::string &amp;base_path, Initializer *init, Ts &amp;&amp;...expressions)</div><div class="ttdoc">Extracts and accumulates expressions to be passed to the constructor of expression T...</div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00987">initializer.cc:987</a></div></div>
<div class="ttc" id="initializer_8cc_xhtml_a4591496fc084c8228e52d5c7c8f84d30"><div class="ttname"><a href="initializer_8cc.xhtml#a4591496fc084c8228e52d5c7c8f84d30">GET_EVENT</a></div><div class="ttdeci">#define GET_EVENT(gates, basic_events, house_events, path_reference)</div><div class="ttdoc">Helper macro for Initializer::GetEvent event discovery. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l01368">initializer.cc:1368</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_a3f14520363303f24cbc976807933d20e"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#a3f14520363303f24cbc976807933d20e">scram::mef::Initializer::Initializer</a></div><div class="ttdeci">Initializer(const std::vector&lt; std::string &gt; &amp;xml_files, core::Settings settings, bool allow_extern=false)</div><div class="ttdoc">Reads input files with the structure of analysis constructs. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00156">initializer.cc:156</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Validator_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Validator.xhtml">scram::xml::Validator</a></div><div class="ttdoc">RelaxNG validator. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00442">xml.h:442</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_a15c9f933f38716821303393ddcb6ef72"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a15c9f933f38716821303393ddcb6ef72">scram::xml::Element::Range::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00235">xml.h:235</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml">scram::mef::Path</a></div><div class="ttdoc">Functional-event state paths in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00127">event_tree.h:127</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a3326b9bbe12e4506d1b9778b2c7e5b83"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a3326b9bbe12e4506d1b9778b2c7e5b83">scram::mef::Substitution::target</a></div><div class="ttdeci">const Target &amp; target() const </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00063">substitution.h:63</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_acdd0cd916d7d1e5123971974933324d4"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#acdd0cd916d7d1e5123971974933324d4">scram::mef::ConstantExpression::kOne</a></div><div class="ttdeci">static ConstantExpression kOne</div><div class="ttdoc">Constant 1 or True. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00030">constant.h:30</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aeb429ee17505f6ecedfc553f75f667af"><div class="ttname"><a href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a></div><div class="ttdeci">#define BLOG(level, cond)</div><div class="ttdoc">Conditional logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00064">logger.h:64</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00035">event_tree.h:35</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml_a0a5b86b780d70d8111700ec834ee7217"><div class="ttname"><a href="ccf__group_8h.xhtml#a0a5b86b780d70d8111700ec834ee7217">scram::mef::CcfGroupPtr</a></div><div class="ttdeci">std::unique_ptr&lt; CcfGroup &gt; CcfGroupPtr</div><div class="ttdoc">Convenience alias. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00206">ccf_group.h:206</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">scram::mef::kNull</a></div><div class="ttdoc">Single argument pass-through without logic. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00214">event.h:214</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_ac5ff8673a8ebbecee6a645671d5ae063"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#ac5ff8673a8ebbecee6a645671d5ae063">scram::mef::CcfGroup::AddDistribution</a></div><div class="ttdeci">void AddDistribution(Expression *distr)</div><div class="ttdoc">Adds the distribution that describes the probability of basic events in this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00054">ccf_group.cc:54</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">scram::DEBUG2</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG1. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00079">logger.h:79</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml"><div class="ttname"><a href="find__iterator_8h.xhtml">find_iterator.h</a></div><div class="ttdoc">Convenience iterator adaptor to wrap find calls and results. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_ae70e7705b55883bb393228fbb2835542"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#ae70e7705b55883bb393228fbb2835542">scram::mef::ConstantExpression::kPi</a></div><div class="ttdeci">static ConstantExpression kPi</div><div class="ttdoc">Constant PI value. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00032">constant.h:32</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8501f67861832d9efa717e17010648f5"><div class="ttname"><a href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a></div><div class="ttdeci">#define CLOCK(var)</div><div class="ttdoc">Starts the timing in nanoseconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00047">logger.h:47</a></div></div>
<div class="ttc" id="parameter_8h_xhtml_a3e911a6ca6c5efb5779ff4deed577171"><div class="ttname"><a href="parameter_8h.xhtml#a3e911a6ca6c5efb5779ff4deed577171">scram::mef::ParameterPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Parameter &gt; ParameterPtr</div><div class="ttdoc">Convenience alias. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00116">parameter.h:116</a></div></div>
<div class="ttc" id="boolean_8h_xhtml"><div class="ttname"><a href="boolean_8h.xhtml">boolean.h</a></div><div class="ttdoc">Boolean expressions. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1DuplicateArgumentError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1DuplicateArgumentError.xhtml">scram::mef::DuplicateArgumentError</a></div><div class="ttdoc">This error indicates that arguments must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00109">error.h:109</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml">scram::mef::Substitution</a></div><div class="ttdoc">The general representation for Delete Terms, Recovery Rules, and Exchange Events. ...</div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00035">substitution.h:35</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a174d471ad629ca43a9abd30cfe34e82f"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a174d471ad629ca43a9abd30cfe34e82f">scram::mef::EventTree::functional_events</a></div><div class="ttdeci">const ElementTable&lt; FunctionalEventPtr &gt; &amp; functional_events() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00178">event_tree.h:178</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_ad5409b17f257599c4dd852533a4f289a"><div class="ttname"><a href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">scram::mef::ComponentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Component &gt; ComponentPtr</div><div class="ttdoc">Unique system components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00133">fault_tree.h:133</a></div></div>
<div class="ttc" id="substitution_8h_xhtml_a96c7da3ca9d39dfdeeb908c4a8e0a3bf"><div class="ttname"><a href="substitution_8h.xhtml#a96c7da3ca9d39dfdeeb908c4a8e0a3bf">scram::mef::SubstitutionPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Substitution &gt; SubstitutionPtr</div><div class="ttdoc">Unique per model. </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8h_source.xhtml#l00104">substitution.h:104</a></div></div>
<div class="ttc" id="event_8h_xhtml_a77a3414d54d1ed73527bc929354d0508"><div class="ttname"><a href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00153">event.h:153</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00084">event_tree.h:84</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a959df73174a6e363f71ffb7772abbe20"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a959df73174a6e363f71ffb7772abbe20">scram::xml::Element::filename</a></div><div class="ttdeci">const char * filename() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00262">xml.h:262</a></div></div>
<div class="ttc" id="instruction_8h_xhtml_a7766297ed0a530a6c53fa56a0747f331"><div class="ttname"><a href="instruction_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">scram::mef::RulePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Rule &gt; RulePtr</div><div class="ttdoc">Unique rules in a model. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00168">instruction.h:168</a></div></div>
<div class="ttc" id="extern_8h_xhtml_acabf761a0fe95a2e0b243d577e39d5e2"><div class="ttname"><a href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">scram::mef::ExternFunctionPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ExternFunction&lt; void &gt;&gt; ExternFunctionPtr</div><div class="ttdoc">The concrete extern functions uniquely stored in a model. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00108">extern.h:108</a></div></div>
<div class="ttc" id="extern_8h_xhtml"><div class="ttname"><a href="extern_8h.xhtml">extern.h</a></div><div class="ttdoc">The MEF facilities to call external functions in expressions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a0a6da28d1514d7543d80e554e144df6f"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a0a6da28d1514d7543d80e554e144df6f">scram::mef::Substitution::Add</a></div><div class="ttdeci">void Add(BasicEvent *source_event)</div><div class="ttdoc">Adds a source event to the substitution container. </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8cc_source.xhtml#l00028">substitution.cc:28</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_ac82c25bb78d12a3bac21ea26cc5cdc99"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">scram::mef::Fork::paths</a></div><div class="ttdeci">const std::vector&lt; Path &gt; &amp; paths() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00155">event_tree.h:155</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Substitution_xhtml_a01bb7b2682e333bb6cd4b730447162c2"><div class="ttname"><a href="classscram_1_1mef_1_1Substitution.xhtml#a01bb7b2682e333bb6cd4b730447162c2">scram::mef::Substitution::type</a></div><div class="ttdeci">std::optional&lt; Type &gt; type() const </div><div class="ttdef"><b>Definition:</b> <a href="substitution_8cc_source.xhtml#l00080">substitution.cc:80</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ae027e3ac6b3cf4839983dc2616ce0572"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ae027e3ac6b3cf4839983dc2616ce0572">scram::mef::BasicEvent::HasCcf</a></div><div class="ttdeci">bool HasCcf() const </div><div class="ttdoc">Indicates if this basic event has been set to be in a CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00119">event.h:119</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml">scram::mef::NullVisitor</a></div><div class="ttdoc">Visits only instructions and ignores non-instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00215">instruction.h:215</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml">scram::xml::Element::Range</a></div><div class="ttdoc">The range for elements. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00181">xml.h:181</a></div></div>
<div class="ttc" id="env_8h_xhtml"><div class="ttname"><a href="env_8h.xhtml">env.h</a></div><div class="ttdoc">SCRAM-specific environment variables. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Alignment_xhtml_a9f8e15e0f89ab4d0a9adb1645ace3f1b"><div class="ttname"><a href="classscram_1_1mef_1_1Alignment.xhtml#a9f8e15e0f89ab4d0a9adb1645ace3f1b">scram::mef::Alignment::Validate</a></div><div class="ttdeci">void Validate()</div><div class="ttdoc">Ensures that all phases add up to be valid for the alignment. </div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00039">alignment.cc:39</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Document_xhtml_a4ac45d9407199ac54ebea609595cf942"><div class="ttname"><a href="classscram_1_1xml_1_1Document.xhtml#a4ac45d9407199ac54ebea609595cf942">scram::xml::Document::root</a></div><div class="ttdeci">Element root() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00426">xml.h:426</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1CycleError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1CycleError.xhtml">scram::mef::CycleError</a></div><div class="ttdoc">Signals unacceptable cycles in invalid structures. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00119">error.h:119</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a2d5ae6a8ba8ca8f81818d4c12172a5b5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">scram::mef::Branch::target</a></div><div class="ttdeci">void target(Target target)</div><div class="ttdoc">Sets the target for the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00100">event_tree.h:100</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="error_8h_xhtml_a9e7c724d6d57b1b9fa496e66755e5e02"><div class="ttname"><a href="error_8h.xhtml#a9e7c724d6d57b1b9fa496e66755e5e02">scram::mef::errinfo_container</a></div><div class="ttdeci">boost::error_info&lt; struct tag_contianer, std::string &gt; errinfo_container</div><div class="ttdoc">The MEF container element as namespace. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00096">error.h:96</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NamedBranch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NamedBranch.xhtml">scram::mef::NamedBranch</a></div><div class="ttdoc">Named branches that can be referenced and reused. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00116">event_tree.h:116</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_ab91a51488ee8c4ed054de1e8450c8a59"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">scram::mef::Role::base_path</a></div><div class="ttdeci">const std::string &amp; base_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00177">element.h:177</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00086">ccf_group.h:86</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml">scram::mef::Fork</a></div><div class="ttdoc">Functional event forks. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00142">event_tree.h:142</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a6094da386afbd31ffa1843dc270a0e0f"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">scram::mef::Rule::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00154">instruction.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml">scram::mef::Parameter</a></div><div class="ttdoc">This class provides a representation of a variable in basic event description. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00087">parameter.h:87</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternLibrary_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternLibrary.xhtml">scram::mef::ExternLibrary</a></div><div class="ttdoc">The MEF construct to extend expressions with external libraries. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00043">extern.h:43</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">scram::mef::Initializer::Extractor</a></div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00954">initializer.cc:954</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
