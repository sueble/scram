<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>extern.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">extern.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="extern_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// The MEF facilities to call external functions in expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/dll/shared_library.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_nested_exception.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/exception_ptr.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem/path.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/system/system_error.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">src/element.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">src/error.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">src/expression.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// The MEF construct to extend expressions with external libraries.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// This class dynamically loads and manages libraries.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// It supports only very basic interface for C function lookup with its symbol.</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternLibrary.xhtml">   43</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml">ExternLibrary</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">  /// @copydoc Element::Element</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">  /// @param[in] lib_path  The library path with its name.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">  /// @param[in] reference_dir  The reference directory for relative paths.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">  /// @param[in] system  Search for the library in system paths.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">  /// @param[in] decorate  Decorate the library name with prefix and suffix.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  /// @throws ValidityError  The library path is invalid.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  /// @throws DLError  The library cannot be found.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml#a9fb4b0d55c05a5055c606664d1823759">ExternLibrary</a>(std::string <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>, std::string lib_path,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                <span class="keyword">const</span> boost::filesystem::path&amp; reference_dir, <span class="keywordtype">bool</span> system,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="keywordtype">bool</span> decorate);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  /// @tparam F  The C free function type.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  /// @param[in] symbol  The function symbol in the library.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// @returns The function pointer resolved from the symbol.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  /// @throws UndefinedElement  The symbol is not in the library.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  std::enable_if_t&lt;std::is_function_v&lt;F&gt;, std::add_pointer_t&lt;F&gt;&gt;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternLibrary.xhtml#a1d4d4bde5f9529f5dff81515936f1695">   67</a></span>&#160;  <span class="keyword">get</span>(<span class="keyword">const</span> std::string&amp; symbol) <span class="keyword">const</span> {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keywordflow">return</span> lib_handle_.get&lt;F&gt;(symbol);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    } <span class="keywordflow">catch</span> (<span class="keyword">const</span> boost::system::system_error&amp; err) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1mef_1_1UndefinedElement.xhtml">UndefinedElement</a>(err.what()))</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;          &lt;&lt; boost::errinfo_nested_exception(boost::current_exception());</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  boost::dll::shared_library lib_handle_;  <span class="comment">///&lt; Shared Library abstraction.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternFunction.xhtml">   81</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction</a>;  <span class="comment">// Forward declaration to specialize abstract base.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">/// Abstract base class for ExternFunction concrete types.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">/// This interface hides the return and argument types</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/// of generic extern functions and expressions.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">/// The base acts as a factory for generating expressions with given arguments.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">   89</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction</a>&lt;void&gt; : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// Applies the function to arguments.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// This interface hides the complexity of concrete types of the function.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @param[in] args  The argument expressions.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  /// @returns Newly constructed expression as a result of function application.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  /// @throws ValidityError  The number of arguments is invalid.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  apply(std::vector&lt;Expression*&gt; args) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;};</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/// The concrete extern functions uniquely stored in a model.</span></div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">  108</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">ExternFunctionPtr</a> = std::unique_ptr&lt;ExternFunction&lt;void&gt;&gt;;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="extern_8h.xhtml#a0d81cc2985aec1e7c8cd3160f0017c34">  110</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">ExternFunctionBase</a> = <a class="code" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">ExternFunction&lt;void&gt;</a>;  <span class="comment">///&lt; To help Doxygen.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/// Extern function abstraction to be referenced by expressions.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/// @tparam R  Numeric return type.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">/// @tparam Args  Numeric argument types.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/// @pre The source dynamic library is loaded as long as this function lives.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">ExternFunctionBase</a> {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  static_assert(std::is_arithmetic_v&lt;R&gt;, <span class="stringliteral">&quot;Numeric type functions only.&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">using</span> Pointer = R (*)(Args...);  <span class="comment">///&lt; The function pointer type.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  /// Loads a function from a library for further usage.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// @copydoc Element::Element</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  /// @param[in] symbol  The symbol name for the function in the library.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// @param[in] library  The dynamic library to lookup the function.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  /// @throws UndefinedElement  There is no such symbol in the library.</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternFunction.xhtml#a4b9821eefa1031403775aaf50e124b41">  133</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml#a4b9821eefa1031403775aaf50e124b41">ExternFunction</a>(std::string <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>, <span class="keyword">const</span> std::string&amp; symbol,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                 <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml">ExternLibrary</a>&amp; library)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">ExternFunctionBase</a>(std::move(name)),</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        fptr_(library.<a class="code" href="classscram_1_1mef_1_1ExternLibrary.xhtml#a1d4d4bde5f9529f5dff81515936f1695">get</a>&lt;R(Args...)&gt;(symbol)) {}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  /// Calls the library function with the given numeric arguments.</span></div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternFunction.xhtml#ae06acd3f58e86a1ef179a8a6bf6ed0c3">  139</a></span>&#160;<span class="comment"></span>  R <a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml#ae06acd3f58e86a1ef179a8a6bf6ed0c3">operator()</a>(Args... args) const noexcept { <span class="keywordflow">return</span> fptr_(args...); }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  /// @copydoc ExternFunction&lt;void&gt;::apply</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  apply(std::vector&lt;Expression*&gt; args) <span class="keyword">const override</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keyword">const</span> Pointer fptr_;  <span class="comment">///&lt; The pointer to the extern function in a library.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">namespace </span>detail {  <span class="comment">// Helpers for extern function call with Expression values.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">/// Evaluates the argument expressions and marshals the result to function.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/// Marshaller of expressions to extern function calls.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/// @tparam N  The number of arguments.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">/// @param[in] self  The extern function to be called with the argument values.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">/// @param[in] args  The argument expressions.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// @param[in] eval  The evaluator of the expressions.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/// @param[in] values  The results of expression evaluation.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">/// @returns The result of the function call.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">/// @pre The number of arguments is exactly the same at runtime.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keywordtype">int</span> N, <span class="keyword">typename</span> F, <span class="keyword">typename</span> R, <span class="keyword">typename</span>... Ts, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="extern_8h.xhtml#ac01857bae51f46fd23c89214b23b5ede">  165</a></span>&#160;R <a class="code" href="extern_8h.xhtml#ac01857bae51f46fd23c89214b23b5ede">Marshal</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction&lt;R, Args...&gt;</a>&amp; <span class="keyword">self</span>,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          <span class="keyword">const</span> std::vector&lt;Expression*&gt;&amp; args, F&amp;&amp; eval,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          Ts&amp;&amp;... values) noexcept {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  static_assert(N &gt;= 0);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  assert(args.size() &gt;= N);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keywordflow">if</span> constexpr (N == 0) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    assert(args.size() == <span class="keyword">sizeof</span>...(values) &amp;&amp; <span class="stringliteral">&quot;Incorrect number of args.&quot;</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">self</span>(std::forward&lt;Ts&gt;(values)...);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">double</span> value = eval(args[N - 1]);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="extern_8h.xhtml#ac01857bae51f46fd23c89214b23b5ede">Marshal</a>&lt;N - 1&gt;(<span class="keyword">self</span>, args, std::forward&lt;F&gt;(eval), value,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                          std::forward&lt;Ts&gt;(values)...);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}  <span class="comment">// namespace detail</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">/// Expression evaluating an extern function with expression arguments.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/// @tparam R  Numeric return type.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">/// @tparam Args  Numeric argument types.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternExpression.xhtml">  189</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExternExpression.xhtml">ExternExpression</a></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;ExternExpression&lt;R, Args...&gt;&gt; {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  /// @param[in] extern_function  The library function.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// @param[in] args  The argument expression for the function.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// @throws ValidityError  The number of arguments is invalid.</span></div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternExpression.xhtml#a8eef8bc9d59c7ba49ea29ef7cb291090">  196</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1ExternExpression.xhtml#a8eef8bc9d59c7ba49ea29ef7cb291090">ExternExpression</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction&lt;R, Args...&gt;</a>* extern_function,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                            std::vector&lt;Expression*&gt; args)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;<a class="code" href="classscram_1_1mef_1_1ExternExpression.xhtml">ExternExpression</a>&gt;(std::move(args)),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        extern_function_(*extern_function) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().size() != <span class="keyword">sizeof</span>...(Args))</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;          <a class="code" href="structscram_1_1mef_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;The number of function arguments does not match.&quot;</span>));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">  /// Computes the extern function with the given evaluator for arguments.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternExpression.xhtml#a42bccf020923503c13c9cd6b73e16060">  207</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExternExpression.xhtml#a42bccf020923503c13c9cd6b73e16060">Compute</a>(F&amp;&amp; eval) noexcept {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> detail::Marshal&lt;<span class="keyword">sizeof</span>...(Args)&gt;(</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        extern_function_, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>(), std::forward&lt;F&gt;(eval));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml">ExternFunction</a>&lt;R, Args...&gt;&amp; extern_function_;  <span class="comment">///&lt; The source function.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;std::unique_ptr&lt;Expression&gt;</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExternFunction.xhtml#a6cc3942278e865e4b07e124f861ee88b">  218</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1ExternFunction.xhtml#a6cc3942278e865e4b07e124f861ee88b">ExternFunction&lt;R, Args...&gt;::apply</a>(std::vector&lt;Expression*&gt; args)<span class="keyword"> const </span>{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">return</span> std::make_unique&lt;<a class="code" href="classscram_1_1mef_1_1ExternExpression.xhtml">ExternExpression</a>&lt;R, Args...&gt;&gt;(<span class="keyword">this</span>, std::move(args));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1ExternExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternExpression.xhtml">scram::mef::ExternExpression</a></div><div class="ttdoc">Expression evaluating an extern function with expression arguments. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00189">extern.h:189</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternExpression_xhtml_a42bccf020923503c13c9cd6b73e16060"><div class="ttname"><a href="classscram_1_1mef_1_1ExternExpression.xhtml#a42bccf020923503c13c9cd6b73e16060">scram::mef::ExternExpression::Compute</a></div><div class="ttdeci">double Compute(F &amp;&amp;eval) noexcept</div><div class="ttdoc">Computes the extern function with the given evaluator for arguments. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00207">extern.h:207</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a006e56dfae6a5a3bb91f1a4644ed59fa"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">scram::mef::Element::Element</a></div><div class="ttdeci">Element(std::string name)</div><div class="ttdoc">Constructs an element with an original name. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00030">element.cc:30</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternLibrary_xhtml_a1d4d4bde5f9529f5dff81515936f1695"><div class="ttname"><a href="classscram_1_1mef_1_1ExternLibrary.xhtml#a1d4d4bde5f9529f5dff81515936f1695">scram::mef::ExternLibrary::get</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_function_v&lt; F &gt;, std::add_pointer_t&lt; F &gt; &gt; get(const std::string &amp;symbol) const </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00067">extern.h:67</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_xhtml_a4b9821eefa1031403775aaf50e124b41"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction.xhtml#a4b9821eefa1031403775aaf50e124b41">scram::mef::ExternFunction::ExternFunction</a></div><div class="ttdeci">ExternFunction(std::string name, const std::string &amp;symbol, const ExternLibrary &amp;library)</div><div class="ttdoc">Loads a function from a library for further usage. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00133">extern.h:133</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00078">expression.h:78</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction.xhtml">scram::mef::ExternFunction</a></div><div class="ttdoc">Extern function abstraction to be referenced by expressions. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00081">extern.h:81</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_xhtml_ae06acd3f58e86a1ef179a8a6bf6ed0c3"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction.xhtml#ae06acd3f58e86a1ef179a8a6bf6ed0c3">scram::mef::ExternFunction::operator()</a></div><div class="ttdeci">R operator()(Args...args) const noexcept</div><div class="ttdoc">Calls the library function with the given numeric arguments. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00139">extern.h:139</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="extern_8h_xhtml_ac01857bae51f46fd23c89214b23b5ede"><div class="ttname"><a href="extern_8h.xhtml#ac01857bae51f46fd23c89214b23b5ede">scram::mef::detail::Marshal</a></div><div class="ttdeci">R Marshal(const ExternFunction&lt; R, Args... &gt; &amp;self, const std::vector&lt; Expression * &gt; &amp;args, F &amp;&amp;eval, Ts &amp;&amp;...values) noexcept</div><div class="ttdoc">Evaluates the argument expressions and marshals the result to function. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00165">extern.h:165</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExpressionFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExpressionFormula.xhtml">scram::mef::ExpressionFormula</a></div><div class="ttdoc">CRTP for Expressions with the same formula to evaluate and sample. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00140">expression.h:140</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml">scram::mef::Usage</a></div><div class="ttdoc">Mixin class for providing usage marks for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00305">element.h:305</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_3_01void_01_4_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction_3_01void_01_4.xhtml">scram::mef::ExternFunction&lt; void &gt;</a></div><div class="ttdoc">Abstract base class for ExternFunction concrete types. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00089">extern.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00060">element.h:60</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00047">element.h:47</a></div></div>
<div class="ttc" id="extern_8h_xhtml_acabf761a0fe95a2e0b243d577e39d5e2"><div class="ttname"><a href="extern_8h.xhtml#acabf761a0fe95a2e0b243d577e39d5e2">scram::mef::ExternFunctionPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ExternFunction&lt; void &gt;&gt; ExternFunctionPtr</div><div class="ttdoc">The concrete extern functions uniquely stored in a model. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00108">extern.h:108</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternFunction_xhtml_a6cc3942278e865e4b07e124f861ee88b"><div class="ttname"><a href="classscram_1_1mef_1_1ExternFunction.xhtml#a6cc3942278e865e4b07e124f861ee88b">scram::mef::ExternFunction::apply</a></div><div class="ttdeci">std::unique_ptr&lt; Expression &gt; apply(std::vector&lt; Expression * &gt; args) const override</div><div class="ttdoc">Applies the function to arguments. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00218">extern.h:218</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternExpression_xhtml_a8eef8bc9d59c7ba49ea29ef7cb291090"><div class="ttname"><a href="classscram_1_1mef_1_1ExternExpression.xhtml#a8eef8bc9d59c7ba49ea29ef7cb291090">scram::mef::ExternExpression::ExternExpression</a></div><div class="ttdeci">ExternExpression(const ExternFunction&lt; R, Args... &gt; *extern_function, std::vector&lt; Expression * &gt; args)</div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00196">extern.h:196</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1ValidityError.xhtml">scram::mef::ValidityError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00099">error.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternLibrary_xhtml_a9fb4b0d55c05a5055c606664d1823759"><div class="ttname"><a href="classscram_1_1mef_1_1ExternLibrary.xhtml#a9fb4b0d55c05a5055c606664d1823759">scram::mef::ExternLibrary::ExternLibrary</a></div><div class="ttdeci">ExternLibrary(std::string name, std::string lib_path, const boost::filesystem::path &amp;reference_dir, bool system, bool decorate)</div><div class="ttdoc">Constructs an element with an original name. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8cc_source.xhtml#l00029">extern.cc:29</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1UndefinedElement_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1UndefinedElement.xhtml">scram::mef::UndefinedElement</a></div><div class="ttdoc">The error for undefined elements in a model. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00114">error.h:114</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExternLibrary_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExternLibrary.xhtml">scram::mef::ExternLibrary</a></div><div class="ttdoc">The MEF construct to extend expressions with external libraries. </div><div class="ttdef"><b>Definition:</b> <a href="extern_8h_source.xhtml#l00043">extern.h:43</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
