<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>bdd.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">bdd.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="bdd_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2015-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of BDD fault tree analysis algorithms.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bdd_8h.xhtml">bdd.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;boost/multiprecision/miller_rabin.hpp&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="find__iterator_8h.xhtml">ext/find_iterator.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="zbdd_8h.xhtml">zbdd.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">   32</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">GetPrimeNumber</a>(<span class="keywordtype">int</span> n) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  assert(n &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Only natural numbers.&quot;</span>);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keywordflow">if</span> (n % 2 == 0)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    ++n;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">while</span> (boost::multiprecision::miller_rabin_test(n, 25) == <span class="keyword">false</span>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    n += 2;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">return</span> n;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#ab7af95900c1ab921446e2e67177a315c">   41</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Bdd.xhtml#ab7af95900c1ab921446e2e67177a315c">Bdd::Bdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    : kSettings_(settings),</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      coherent_(graph-&gt;coherent()),</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      kOne_(new <a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal</a>&lt;<a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a>&gt;(true)),</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      function_id_(2) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Converting PDAG into BDD&quot;</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">if</span> (graph-&gt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a09f0aa3bddb78b2eff0446736d040e1b">IsTrivial</a>()) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; top_gate = graph-&gt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#ae9407efbb00e5f28aecb40db2ab7925b">root</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    assert(top_gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>().size() == 1);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    assert(top_gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;().empty());</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">int</span> child = *top_gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>().begin();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">if</span> (top_gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">constant</a>()) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="comment">// Constant case should only happen to the top gate.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      root_ = {child &lt; 0, kOne_};</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&amp; var = top_gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;().<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>()-&gt;second;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      root_ = {child &lt; 0,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;               FindOrAddVertex(var.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>(), kOne_, kOne_, <span class="keyword">true</span>, var.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>())};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      index_to_order_.emplace(var.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>(), var.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>());</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::unordered_map&lt;int, std::pair&lt;Function, int&gt;&gt; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    root_ = ConvertGraph(graph-&gt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#ae9407efbb00e5f28aecb40db2ab7925b">root</a>(), &amp;<a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    root_.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a> ^= graph-&gt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#af5900b29c6c9f1b1cca22ed83e4dd58b">complement</a>();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  TestStructure(root_.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of BDD vertices created: &quot;</span> &lt;&lt; function_id_ - 1;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in unique table: &quot;</span> &lt;&lt; unique_table_.size();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in AND table: &quot;</span> &lt;&lt; and_table_.<a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a371345f30fc0280f2f8b45c3602d0b76">size</a>();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in OR table: &quot;</span> &lt;&lt; or_table_.<a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#a371345f30fc0280f2f8b45c3602d0b76">size</a>();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of ITE in BDD: &quot;</span> &lt;&lt; CountIteNodes(root_.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">if</span> (coherent_) {  <span class="comment">// Clear tables if no more calculations are expected.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    Freeze();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  } <span class="keywordflow">else</span> {  <span class="comment">// To be used by ZBDD for prime implicant calculations.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    ClearTables();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a7ef48b098f618469a9347005f90a2280">Bdd::~Bdd</a>() noexcept = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Bdd.xhtml#a1e7f5f7608e5839e27d6be41712b4800">   84</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a1e7f5f7608e5839e27d6be41712b4800">Bdd::Analyze</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  zbdd_ = std::make_unique&lt;Zbdd&gt;(<span class="keyword">this</span>, kSettings_);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  zbdd_-&gt;Analyze(graph);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">if</span> (!coherent_)  <span class="comment">// The BDD has been used by the ZBDD.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    Freeze();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> Bdd::FindOrAddVertex(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; low, <span class="keywordtype">bool</span> complement_edge,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                            <span class="keywordtype">int</span> order) noexcept {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  assert(index &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Only positive indices are expected.&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">IteWeakPtr</a>&amp; in_table = unique_table_.FindOrAdd(</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      index, high-&gt;id(), complement_edge ? -low-&gt;id() : low-&gt;id());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">if</span> (!in_table.<a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a7c782e61588664e379a54ad68b6a0c39">expired</a>())</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> in_table.<a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ad1e3be6267e1316cbc4fb440fc08dde1">lock</a>();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  assert(order &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Improper order.&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> ite(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a>(index, order, function_id_++, high, low));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  ite-&gt;complement_edge(complement_edge);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  in_table = ite;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> ite;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> Bdd::FindOrAddVertex(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; low,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                            <span class="keywordtype">bool</span> complement_edge) noexcept {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> in_table =</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      FindOrAddVertex(ite-&gt;index(), high, low, complement_edge, ite-&gt;order());</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordflow">if</span> (in_table-&gt;unique()) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    in_table-&gt;module(ite-&gt;module());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    in_table-&gt;coherent(ite-&gt;coherent());</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  assert(in_table-&gt;module() == ite-&gt;module());</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  assert(in_table-&gt;coherent() == ite-&gt;coherent());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">return</span> in_table;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> Bdd::FindOrAddVertex(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; low,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                            <span class="keywordtype">bool</span> complement_edge) noexcept {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>() &amp;&amp; <span class="stringliteral">&quot;Only module gates are expected for proxies.&quot;</span>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> in_table =</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      FindOrAddVertex(gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>(), high, low, complement_edge, gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keywordflow">if</span> (in_table-&gt;unique()) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    in_table-&gt;module(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>());</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    in_table-&gt;coherent(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">coherent</a>());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  assert(in_table-&gt;module() == gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  assert(in_table-&gt;coherent() == gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">coherent</a>());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> in_table;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> Bdd::ConvertGraph(</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::unordered_map&lt;<span class="keywordtype">int</span>, std::pair&lt;Function, int&gt;&gt;* <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>) noexcept {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  assert(!gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">constant</a>() &amp;&amp; <span class="stringliteral">&quot;Unexpected constant gate!&quot;</span>);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> result;  <span class="comment">// For the NRVO, due to memoization.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="comment">// Memoization check.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_entry = ext::find(*<a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>())) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::pair&lt;Function, int&gt;&amp; entry = it_entry-&gt;second;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    result = entry.first;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    assert(entry.second &lt; gate.<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>().<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>());  <span class="comment">// Processed parents.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span> (++entry.second == gate.<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>().<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>())</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>-&gt;erase(it_entry);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  std::vector&lt;Function&gt; args;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">Gate::ConstArg&lt;Variable&gt;</a>&amp; arg : gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    args.push_back(</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {arg.first &lt; 0, FindOrAddVertex(arg.second.index(), kOne_, kOne_, <span class="keyword">true</span>,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                        arg.second.order())});</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    index_to_order_.emplace(arg.second.index(), arg.second.order());</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">Gate::ConstArg&lt;Gate&gt;</a>&amp; arg : gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> res = ConvertGraph(arg.second, <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span> (arg.second.module()) {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      args.push_back(</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;          {arg.first &lt; 0, FindOrAddVertex(arg.second, kOne_, kOne_, <span class="keyword">true</span>)});</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      <span class="keywordtype">bool</span> complement = (arg.first &lt; 0) ^ res.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      args.push_back({complement, res.vertex});</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  boost::sort(args, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; rhs) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">if</span> (lhs.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>-&gt;terminal())</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (rhs.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>-&gt;terminal())</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(lhs.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>).<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>() &gt; <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(rhs.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>).<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  });</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">auto</span> it = args.cbegin();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">for</span> (result = *it++; it != args.cend(); ++it) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    result = Apply(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">type</a>(), result.vertex, it-&gt;vertex, result.complement,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                   it-&gt;complement);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  ClearTables();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  assert(result.vertex);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordflow">if</span> (gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>())</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    modules_.emplace(gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>(), result);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">if</span> (gate.<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>().<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>() &gt; 1)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>-&gt;insert({gate.index(), {result, 1}});</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;std::pair&lt;int, int&gt; Bdd::GetMinMaxId(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                     <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                     <span class="keywordtype">bool</span> complement_two) noexcept {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  assert(!arg_one-&gt;terminal() &amp;&amp; !arg_two-&gt;terminal());</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  assert(arg_one-&gt;id() &amp;&amp; arg_two-&gt;id());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  assert(arg_one-&gt;id() != arg_two-&gt;id());</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordtype">int</span> min_id = arg_one-&gt;id() * (complement_one ? -1 : 1);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordtype">int</span> max_id = arg_two-&gt;id() * (complement_two ? -1 : 1);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;id() &gt; arg_two-&gt;id())</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::swap(min_id, max_id);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keywordflow">return</span> {min_id, max_id};</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">/// Specialization of Apply for AND operator with BDD vertices.</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> Bdd::Apply&lt;kAnd&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                               <span class="keywordtype">bool</span> complement_two) noexcept {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  assert(arg_one-&gt;id() &amp;&amp; arg_two-&gt;id());  <span class="comment">// Both are reduced function graphs.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;terminal()) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (complement_one)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      <span class="keywordflow">return</span> {<span class="keyword">true</span>, kOne_};</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> {complement_two, arg_two};</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keywordflow">if</span> (arg_two-&gt;terminal()) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (complement_two)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <span class="keywordflow">return</span> {<span class="keyword">true</span>, kOne_};</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> {complement_one, arg_one};</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;id() == arg_two-&gt;id()) {  <span class="comment">// Reduction detection.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">if</span> (complement_one ^ complement_two)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <span class="keywordflow">return</span> {<span class="keyword">true</span>, kOne_};</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> {complement_one, arg_one};</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  std::pair&lt;int, int&gt; min_max_id =</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      GetMinMaxId(arg_one, arg_two, complement_one, complement_two);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(and_table_, min_max_id))</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> result = Apply&lt;kAnd&gt;(<a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">Ite::Ptr</a>(arg_one), <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">Ite::Ptr</a>(arg_two),</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                complement_one, complement_two);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  and_table_.<a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#ae97b2ee82cab1f6944e8bb7c973575d6">emplace</a>(min_max_id, result);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">/// Specialization of Apply for OR operator with BDD vertices.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> Bdd::Apply&lt;kOr&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                              <span class="keywordtype">bool</span> complement_two) noexcept {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  assert(arg_one-&gt;id() &amp;&amp; arg_two-&gt;id());  <span class="comment">// Both are reduced function graphs.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;terminal()) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">if</span> (!complement_one)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordflow">return</span> {<span class="keyword">false</span>, kOne_};</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> {complement_two, arg_two};</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keywordflow">if</span> (arg_two-&gt;terminal()) {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span> (!complement_two)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keywordflow">return</span> {<span class="keyword">false</span>, kOne_};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> {complement_one, arg_one};</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;id() == arg_two-&gt;id()) {  <span class="comment">// Reduction detection.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">if</span> (complement_one ^ complement_two)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="keywordflow">return</span> {<span class="keyword">false</span>, kOne_};</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">return</span> {complement_one, arg_one};</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  std::pair&lt;int, int&gt; min_max_id =</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      GetMinMaxId(arg_one, arg_two, complement_one, complement_two);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(or_table_, min_max_id))</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> result = Apply&lt;kOr&gt;(<a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">Ite::Ptr</a>(arg_one), <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">Ite::Ptr</a>(arg_two),</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                               complement_one, complement_two);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  or_table_.<a class="code" href="classscram_1_1core_1_1CacheTable.xhtml#ae97b2ee82cab1f6944e8bb7c973575d6">emplace</a>(min_max_id, result);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">template</span> &lt;Operator Type&gt;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> Bdd::Apply(<a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> ite_one, <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a> ite_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                         <span class="keywordtype">bool</span> complement_two) noexcept {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordflow">if</span> (ite_one-&gt;order() &gt; ite_two-&gt;order()) {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    ite_one.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#abed3bea3547fa39e96f4dee788311e00">swap</a>(ite_two);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    std::swap(complement_one, complement_two);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> high;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a> low;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">if</span> (ite_one-&gt;order() == ite_two-&gt;order()) {  <span class="comment">// The same variable.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    assert(ite_one-&gt;index() == ite_two-&gt;index());</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    high = Apply&lt;Type&gt;(ite_one-&gt;high(), ite_two-&gt;high(), complement_one,</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                       complement_two);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    low = Apply&lt;Type&gt;(ite_one-&gt;low(), ite_two-&gt;low(),</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                      complement_one ^ ite_one-&gt;complement_edge(),</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                      complement_two ^ ite_two-&gt;complement_edge());</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    assert(ite_one-&gt;order() &lt; ite_two-&gt;order());</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    high =</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        Apply&lt;Type&gt;(ite_one-&gt;high(), ite_two, complement_one, complement_two);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    low = Apply&lt;Type&gt;(ite_one-&gt;low(), ite_two,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                      complement_one ^ ite_one-&gt;complement_edge(),</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                      complement_two);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  }</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordtype">bool</span> complement_edge = high.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a> ^ low.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keywordflow">if</span> (complement_edge || (high.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>-&gt;id() != low.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>-&gt;id())) {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    high.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a> =</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        FindOrAddVertex(ite_one, high.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>, low.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>, complement_edge);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordflow">return</span> high;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> Bdd::Apply(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                         <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; arg_two, <span class="keywordtype">bool</span> complement_one,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                         <span class="keywordtype">bool</span> complement_two) noexcept {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  assert(arg_one-&gt;id() &amp;&amp; arg_two-&gt;id());  <span class="comment">// Both are reduced function graphs.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordflow">if</span> (type == kAnd) {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> Apply&lt;kAnd&gt;(arg_one, arg_two, complement_one, complement_two);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  assert(type == kOr &amp;&amp; <span class="stringliteral">&quot;Unsupported operator.&quot;</span>);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordflow">return</span> Apply&lt;kOr&gt;(arg_one, arg_two, complement_one, complement_two);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> Bdd::CalculateConsensus(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                      <span class="keywordtype">bool</span> complement) noexcept {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  ClearTables();</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="keywordflow">return</span> Apply&lt;kAnd&gt;(ite-&gt;high(), ite-&gt;low(), complement,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                     ite-&gt;complement_edge() ^ complement);</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="keywordtype">int</span> Bdd::CountIteNodes(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a>&amp; ite = <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(vertex);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordflow">if</span> (ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>())</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordtype">int</span> in_module = 0;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordflow">if</span> (ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>()) {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; module = modules_.find(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>())-&gt;second;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    in_module = CountIteNodes(module.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="keywordflow">return</span> 1 + in_module + CountIteNodes(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()) + CountIteNodes(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>());</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">Bdd::ClearMarks</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> mark) noexcept {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a>&amp; ite = <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(vertex);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="keywordflow">if</span> (ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>() == mark)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>(mark);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keywordflow">if</span> (ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>()) {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; res = modules_.find(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>())-&gt;second;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(res.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>, mark);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>(), mark);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">ClearMarks</a>(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>(), mark);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="keywordtype">void</span> Bdd::TestStructure(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <a class="code" href="classscram_1_1core_1_1Ite.xhtml">Ite</a>&amp; ite = <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(vertex);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="keywordflow">if</span> (ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>())</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">mark</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  assert(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>() &amp;&amp; <span class="stringliteral">&quot;Illegal index for a node.&quot;</span>);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  assert(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>() &amp;&amp; <span class="stringliteral">&quot;Improper order for nodes.&quot;</span>);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  assert(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>() &amp;&amp; ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>() &amp;&amp; <span class="stringliteral">&quot;Malformed node high/low pointers.&quot;</span>);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  assert(!(!ite.<a class="code" href="classscram_1_1core_1_1Ite.xhtml#afc14becd66d22adf37cf1177671d5a2c">complement_edge</a>() &amp;&amp; ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()-&gt;id() == ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>()-&gt;id()) &amp;&amp;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;         <span class="stringliteral">&quot;Reduction rule failure.&quot;</span>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  assert(!(!ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()-&gt;terminal() &amp;&amp;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;           ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>() &gt;= <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>()).order()) &amp;&amp;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;         <span class="stringliteral">&quot;Ordering of nodes failed.&quot;</span>);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  assert(</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      !(!ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>()-&gt;terminal() &amp;&amp; ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">order</a>() &gt;= <a class="code" href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">Ite::Ref</a>(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>()).order()) &amp;&amp;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;      <span class="stringliteral">&quot;Ordering of nodes failed.&quot;</span>);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <span class="keywordflow">if</span> (ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">module</a>()) {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Function</a>&amp; res = modules_.find(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">index</a>())-&gt;second;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    assert(!res.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>-&gt;terminal() &amp;&amp; <span class="stringliteral">&quot;Terminal modules must be removed.&quot;</span>);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    TestStructure(res.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  TestStructure(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">high</a>());</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  TestStructure(ite.<a class="code" href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">low</a>());</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="logger_8h_xhtml_a43bfc963f340281b07ac23d1c3ba00b5"><div class="ttname"><a href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a></div><div class="ttdeci">#define TIMER(level,...)</div><div class="ttdoc">Creates an automatic unique logging timer for a scope. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab2a4e8ac78b36541a32cc719863910a5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">scram::core::Gate::constant</a></div><div class="ttdeci">bool constant() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00363">pdag.h:363</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_afc14becd66d22adf37cf1177671d5a2c"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#afc14becd66d22adf37cf1177671d5a2c">scram::core::Ite::complement_edge</a></div><div class="ttdeci">bool complement_edge() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00341">bdd.h:341</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_adeb100923176ebd5f820c75b79280796"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#adeb100923176ebd5f820c75b79280796">scram::core::NonTerminal::low</a></div><div class="ttdeci">const VertexPtr &amp; low() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00296">bdd.h:296</a></div></div>
<div class="ttc" id="bdd_8h_xhtml"><div class="ttname"><a href="bdd_8h.xhtml">bdd.h</a></div><div class="ttdoc">Fault tree analysis with the Binary Decision Diagram algorithms. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a85ca781ff5bec86a44c217fb4b26ff76"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a85ca781ff5bec86a44c217fb4b26ff76">scram::core::Bdd::ClearMarks</a></div><div class="ttdeci">void ClearMarks(bool mark)</div><div class="ttdoc">Helper function to clear and set vertex marks. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00765">bdd.h:765</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml"><div class="ttname"><a href="zbdd_8h.xhtml">zbdd.h</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagram facilities. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_ae9407efbb00e5f28aecb40db2ab7925b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#ae9407efbb00e5f28aecb40db2ab7925b">scram::core::Pdag::root</a></div><div class="ttdeci">const GatePtr &amp; root()</div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00886">pdag.h:886</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in a PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00281">pdag.h:281</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_a7c782e61588664e379a54ad68b6a0c39"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#a7c782e61588664e379a54ad68b6a0c39">scram::core::WeakIntrusivePtr::expired</a></div><div class="ttdeci">bool expired() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00115">bdd.h:115</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml_a6fca1af860a85acc2907699d1d1be716"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">scram::core::NodeParentManager::parents</a></div><div class="ttdeci">const ParentMap &amp; parents() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00078">pdag.h:78</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml">scram::core::Terminal</a></div><div class="ttdoc">Representation of terminal vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00130">bdd.h:130</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">scram::core::Bdd::Function</a></div><div class="ttdoc">Holder of computation resultant functions and gate representations. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00696">bdd.h:696</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a1e7f5f7608e5839e27d6be41712b4800"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a1e7f5f7608e5839e27d6be41712b4800">scram::core::Bdd::Analyze</a></div><div class="ttdeci">void Analyze(const Pdag *graph=nullptr) noexcept</div><div class="ttdoc">Runs the Qualitative analysis with the representation of a PDAG as ROBDD. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8cc_source.xhtml#l00084">bdd.cc:84</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aa793eeaa12244c5b39a0d80e5b1518ae"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">scram::core::Gate::args</a></div><div class="ttdeci">const ArgSet &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00366">pdag.h:366</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a9230422e92d086c34f67bcb864bfc8a9"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a9230422e92d086c34f67bcb864bfc8a9">scram::core::NonTerminal::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00276">bdd.h:276</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00881">pdag.cc:881</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_abac07f2126ed657d744a92e4f88415fd"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">scram::core::Bdd::VertexPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; VertexPtr</div><div class="ttdoc">BDD vertex base. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00692">bdd.h:692</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a7b184b2ba68a289aae9f3737f1d13b97"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a7b184b2ba68a289aae9f3737f1d13b97">scram::core::NonTerminal::high</a></div><div class="ttdeci">const VertexPtr &amp; high() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00293">bdd.h:293</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a09f0aa3bddb78b2eff0446736d040e1b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a09f0aa3bddb78b2eff0446736d040e1b">scram::core::Pdag::IsTrivial</a></div><div class="ttdeci">bool IsTrivial() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00925">pdag.h:925</a></div></div>
<div class="ttc" id="bdd_8h_xhtml_a2b39509bba3a81b0dc11f6e3acc98e25"><div class="ttname"><a href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">scram::core::ItePtr</a></div><div class="ttdeci">IntrusivePtr&lt; Ite &gt; ItePtr</div><div class="ttdoc">Shared if-then-else vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00370">bdd.h:370</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml">scram::core::Ite</a></div><div class="ttdoc">Representation of non-terminal if-then-else vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00327">bdd.h:327</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_a2b5daa48590ae16124dfd66271439c5e"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">scram::core::Bdd::Function::vertex</a></div><div class="ttdeci">VertexPtr vertex</div><div class="ttdoc">The root vertex of the BDD function graph. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00698">bdd.h:698</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ad5a5766ce9dbbd2104c0bb07b9639a48"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">scram::core::Gate::type</a></div><div class="ttdeci">Operator type() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00336">pdag.h:336</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_aeeaafd82ae5890a7ec3462c68ffc8628"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#aeeaafd82ae5890a7ec3462c68ffc8628">scram::core::NonTerminal::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00267">bdd.h:267</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">scram::DEBUG3</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG2. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00080">logger.h:80</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00817">pdag.cc:817</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_abed3bea3547fa39e96f4dee788311e00"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#abed3bea3547fa39e96f4dee788311e00">scram::core::Bdd::Function::swap</a></div><div class="ttdeci">void swap(Function &amp;other) noexcept</div><div class="ttdoc">Swaps with another function. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00707">bdd.h:707</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1IntrusivePtrCast_xhtml_adc53e5b89cace18e05bac95316da7d91"><div class="ttname"><a href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#adc53e5b89cace18e05bac95316da7d91">scram::core::IntrusivePtrCast&lt; Ite &gt;::Ptr</a></div><div class="ttdeci">static IntrusivePtr&lt; Ite &gt; Ptr(const IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00064">bdd.h:64</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_a371345f30fc0280f2f8b45c3602d0b76"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#a371345f30fc0280f2f8b45c3602d0b76">scram::core::CacheTable::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00589">bdd.h:589</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_a7b70ab1b978f3197458c95e0891fd79c"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#a7b70ab1b978f3197458c95e0891fd79c">scram::core::NonTerminal::mark</a></div><div class="ttdeci">bool mark() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00299">bdd.h:299</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00060">logger.h:60</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_ab7af95900c1ab921446e2e67177a315c"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#ab7af95900c1ab921446e2e67177a315c">scram::core::Bdd::Bdd</a></div><div class="ttdeci">Bdd(const Pdag *graph, const Settings &amp;settings)</div><div class="ttdoc">Constructor with the analysis target. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8cc_source.xhtml#l00041">bdd.cc:41</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CacheTable_xhtml_ae97b2ee82cab1f6944e8bb7c973575d6"><div class="ttname"><a href="classscram_1_1core_1_1CacheTable.xhtml#ae97b2ee82cab1f6944e8bb7c973575d6">scram::core::CacheTable::emplace</a></div><div class="ttdeci">void emplace(const key_type &amp;key, const mapped_type &amp;value)</div><div class="ttdoc">Emplaces a new entry. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00642">bdd.h:642</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">scram::DEBUG4</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG3. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00081">logger.h:81</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab844ef7334752c4118a476870a56fa91"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab844ef7334752c4118a476870a56fa91">scram::core::Gate::ConstArg</a></div><div class="ttdeci">std::pair&lt; int, const T &amp; &gt; ConstArg</div><div class="ttdoc">An argument entry type in the gate&amp;#39;s argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00296">pdag.h:296</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00260">pdag.h:260</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_aa0c4dba36b68a6a2ae496573346b887c"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">scram::core::Bdd::Function::complement</a></div><div class="ttdeci">bool complement</div><div class="ttdoc">The interpretation of the function. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00697">bdd.h:697</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">scram::core::WeakIntrusivePtr&lt; Ite &gt;</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00049">settings.h:49</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml"><div class="ttname"><a href="find__iterator_8h.xhtml">find_iterator.h</a></div><div class="ttdoc">Convenience iterator adaptor to wrap find calls and results. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a7ef48b098f618469a9347005f90a2280"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a7ef48b098f618469a9347005f90a2280">scram::core::Bdd::~Bdd</a></div><div class="ttdeci">~Bdd() noexcept</div><div class="ttdoc">To handle incomplete ZBDD type with unique pointers. </div></div>
<div class="ttc" id="structscram_1_1core_1_1IntrusivePtrCast_xhtml_af153c12dc6133b7d9f9b7a57bba29f1d"><div class="ttname"><a href="structscram_1_1core_1_1IntrusivePtrCast.xhtml#af153c12dc6133b7d9f9b7a57bba29f1d">scram::core::IntrusivePtrCast&lt; Ite &gt;::Ref</a></div><div class="ttdeci">static Ite &amp; Ref(const IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00067">bdd.h:67</a></div></div>
<div class="ttc" id="bdd_8cc_xhtml_a585e12e2a71cabcfd8e90c53261060f7"><div class="ttname"><a href="bdd_8cc.xhtml#a585e12e2a71cabcfd8e90c53261060f7">scram::core::GetPrimeNumber</a></div><div class="ttdeci">int GetPrimeNumber(int n)</div><div class="ttdoc">Prime number generation for hash tables. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8cc_source.xhtml#l00032">bdd.cc:32</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a93fa477d60140843c4abae7de52fffa1"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">scram::core::Gate::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00463">pdag.h:463</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NonTerminal_xhtml_af5853746ad388f479a7aa45c5d843466"><div class="ttname"><a href="classscram_1_1core_1_1NonTerminal.xhtml#af5853746ad388f479a7aa45c5d843466">scram::core::NonTerminal::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00270">bdd.h:270</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a0d070ec20569129162398c73165f65bc"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">scram::core::Gate::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00455">pdag.h:455</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml">scram::core::Variable</a></div><div class="ttdoc">Boolean variables in a Boolean formula or graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00241">pdag.h:241</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a8b76f2081293edc1cf85ddf8cb2ac2ed"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">scram::core::Node::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00128">pdag.h:128</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml_ad1e3be6267e1316cbc4fb440fc08dde1"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml#ad1e3be6267e1316cbc4fb440fc08dde1">scram::core::WeakIntrusivePtr::lock</a></div><div class="ttdeci">IntrusivePtr&lt; T &gt; lock() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00119">bdd.h:119</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml">scram::core::Pdag</a></div><div class="ttdoc">PDAG is a propositional directed acyclic graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00780">pdag.h:780</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a670bc30d04c01d2fb124d5ebbc8ade71"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">ext::linear_map::size</a></div><div class="ttdeci">size_type size() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00372">linear_map.h:372</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a62121e217b0da73112af7e07275f2c15"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">scram::core::Node::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00125">pdag.h:125</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_af5900b29c6c9f1b1cca22ed83e4dd58b"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#af5900b29c6c9f1b1cca22ed83e4dd58b">scram::core::Pdag::complement</a></div><div class="ttdeci">bool complement() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00905">pdag.h:905</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
