<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>instruction.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">instruction.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="instruction_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Model and event tree modifier instructions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">expression.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1mef.xhtml">scram::mef</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>InstructionVisitor;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// Instructions and rules for event tree paths.</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Instruction.xhtml">   38</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">  /// Applies the visitor to the object.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>* visitor) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;};</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// Default visit for instruction type of T.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Visitable.xhtml">   48</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a> {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">  /// Calls visit with the object pointer T*.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>* visitor) <span class="keyword">const</span> <span class="keyword">final</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">/// The operation to change house-events.</span></div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">   55</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;SetHouseEvent&gt; {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  /// @param[in] name  Non-empty public house-event name.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  /// @param[in] state  The new state for the given house-event.</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#aece4a88079685cfe53968c770214ba88">   59</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#aece4a88079685cfe53968c770214ba88">SetHouseEvent</a>(std::string name, <span class="keywordtype">bool</span> state)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      : name_(std::move(name)), state_(state) {}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// @returns The name of the house-event to apply this instruction.</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">   63</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> name_; }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  /// @returns The state of the target house-event to be changed into.</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">   66</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> state_; }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  std::string name_;  <span class="comment">///&lt; The public name of the house event.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> state_;  <span class="comment">///&lt; The state for the house event.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// The operation of collecting expressions for event tree sequences.</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectExpression.xhtml">   74</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;CollectExpression&gt; {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// @param[in] expression  The expression to multiply</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  ///                        the current sequence probability.</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectExpression.xhtml#a37104b2f6774ce92968bec66a7c1facc">   78</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml#a37104b2f6774ce92968bec66a7c1facc">CollectExpression</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      : expression_(expression) {}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// @returns The collected expression for value extraction.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">   82</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">expression</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *expression_; }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression_;  <span class="comment">///&lt; The probability expression to multiply.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/// The operation of connecting fault tree events into the event tree.</span></div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectFormula.xhtml">   89</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;CollectFormula&gt; {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  /// @param[in] formula  The valid formula to add into the sequence fault tree.</span></div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectFormula.xhtml#a891f3de164fce7f15d0ad53dab1e95fd">   92</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml#a891f3de164fce7f15d0ad53dab1e95fd">CollectFormula</a>(<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula) : formula_(std::move(formula)) {}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  /// @returns The formula to include into the current product of the path.</span></div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">   95</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">formula</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *formula_; }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula_;  <span class="comment">///&lt; The valid single formula for the collection.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">/// Conditional application of instructions.</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml">  102</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;IfThenElse&gt; {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  /// @param[in] expression  The expression to evaluate for truth.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// @param[in] then_instruction  The required instruction to execute.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  /// @param[in] else_instruction  An optional instruction for the false case.</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#aab13d860d45d741cac43ccb2192a0072">  107</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#aab13d860d45d741cac43ccb2192a0072">IfThenElse</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* then_instruction,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;             <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* else_instruction = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      : expression_(expression),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        then_instruction_(std::move(then_instruction)),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        else_instruction_(std::move(else_instruction)) {}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  /// @returns The conditional expression of the ternary instruction.</span></div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">  114</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">expression</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> expression_; }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// @returns The instruction to execute if the expression is true.</span></div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">  117</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> then_instruction_; }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  /// @returns The instruction to execute if the expression is false.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  ///          nullptr if the else instruction is optional and not set.</span></div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">  121</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> else_instruction_; }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression_;  <span class="comment">///&lt; The condition source.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* then_instruction_;  <span class="comment">///&lt; The mandatory &#39;truth&#39; instruction.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* else_instruction_;  <span class="comment">///&lt; The optional &#39;false&#39; instruction.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">/// Compound instructions.</span></div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Block.xhtml">  130</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;Block&gt; {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  /// @param[in] instructions  Instructions to be applied in this block.</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Block.xhtml#a676b90f6be42e68a3c83cd63fc644fd8">  133</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml#a676b90f6be42e68a3c83cd63fc644fd8">Block</a>(std::vector&lt;Instruction*&gt; instructions)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      : instructions_(std::move(instructions)) {}</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// @returns The instructions to be applied in the block.</span></div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">  137</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  std::vector&lt;Instruction*&gt; instructions_;  <span class="comment">///&lt; Zero or more instructions.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">/// A reusable collection of instructions.</span></div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Rule.xhtml">  146</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;             <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;Rule&gt;,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;             <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a>,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;             <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">  /// @param[in] instructions  One or more instructions for the sequence.</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">  154</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>(std::vector&lt;Instruction*&gt; instructions) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    assert(!instructions.empty());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    instructions_ = std::move(instructions);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">  /// @returns The instructions to be applied in the rule.</span></div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Rule.xhtml#a609edf81ed71768db0f02ba2dfc14948">  160</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a609edf81ed71768db0f02ba2dfc14948">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  std::vector&lt;Instruction*&gt; instructions_;  <span class="comment">///&lt; Instructions to execute.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="instruction_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">  168</a></span>&#160;<span class="keyword">using</span> <a class="code" href="instruction_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">RulePtr</a> = std::unique_ptr&lt;Rule&gt;;  <span class="comment">///&lt; Unique rules in a model.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>;  <span class="comment">// The target of the Link (avoid dependency cycle).</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">/// A link to another event tree in end-states only.</span></div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Link.xhtml">  173</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;Link&gt;, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a> {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  /// @param[in] event_tree  The event tree to be linked in the end-sequence.</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Link.xhtml#a72f41975cddffec2c78a6ec17a397634">  176</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml#a72f41975cddffec2c78a6ec17a397634">Link</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>&amp; event_tree) : event_tree_(event_tree) {}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// @returns The referenced event tree in the link.</span></div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">  179</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>&amp; <a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> event_tree_; }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>&amp; event_tree_;  <span class="comment">///&lt; The referenced event tree.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">/// The base abstract class for instruction visitors.</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">  186</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  /// A set of required visitation functions for concrete visitors to implement.</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*) = 0;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*) = 0;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*) = 0;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*) = 0;</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a100bdabeea8503c87dd349eda22e3b14">  196</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a100bdabeea8503c87dd349eda22e3b14">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">expression</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>()) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  }</div><div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a9925b9935fcab071c97e90b377559d6a">  203</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a9925b9935fcab071c97e90b377559d6a">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a>* block) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : block-&gt;<a class="code" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">instructions</a>())</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      instruction-&gt;Accept(<span class="keyword">this</span>);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  }</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a17b5f067a805f191ed84427c7e4a4537">  207</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a17b5f067a805f191ed84427c7e4a4537">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : rule-&gt;<a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>())</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      instruction-&gt;Accept(<span class="keyword">this</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">/// Visits only instructions and ignores non-instructions.</span></div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml">  215</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml">NullVisitor</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#ab1471e842002f3b841264b2710bdf369">  217</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#ab1471e842002f3b841264b2710bdf369">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#abb20e2759037c9d49bf55a3f8c2d1ddc">  218</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#abb20e2759037c9d49bf55a3f8c2d1ddc">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#a387408bee706990d89424476f84a5a15">  219</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#a387408bee706990d89424476f84a5a15">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#a3c02254bd74a2badea031f519c75b56f">  220</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#a3c02254bd74a2badea031f519c75b56f">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#a6c9500b9e2f7d4e1dfa079469af5626f">  221</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#a6c9500b9e2f7d4e1dfa079469af5626f">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite)<span class="keyword"> override </span>{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>())</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Visitable.xhtml#a8e512950cd6e9f9cd20392e56f085db7">  229</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml#a8e512950cd6e9f9cd20392e56f085db7">Visitable&lt;T&gt;::Accept</a>(<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>* visitor)<span class="keyword"> const </span>{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  visitor-&gt;<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a6e511343744f2ac89798a54fb1b0babc">Visit</a>(static_cast&lt;const T*&gt;(<span class="keyword">this</span>));</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}  <span class="comment">// namespace scram::mef</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00227">event.h:227</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_a3b505b6a9e7ef49095b73d7d65446571"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">scram::mef::IfThenElse::else_instruction</a></div><div class="ttdeci">Instruction * else_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00121">instruction.h:121</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_abd842ad7d8b94120439b72ea9af71c49"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">scram::mef::IfThenElse::then_instruction</a></div><div class="ttdeci">Instruction * then_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00117">instruction.h:117</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_a4d7470e83d76df47f6d7e3febb2ae1d1"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">scram::mef::SetHouseEvent::state</a></div><div class="ttdeci">bool state() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00066">instruction.h:66</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_abb20e2759037c9d49bf55a3f8c2d1ddc"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#abb20e2759037c9d49bf55a3f8c2d1ddc">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const CollectExpression *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00218">instruction.h:218</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a9925b9935fcab071c97e90b377559d6a"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a9925b9935fcab071c97e90b377559d6a">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const Block *block)</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00203">instruction.h:203</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a006e56dfae6a5a3bb91f1a4644ed59fa"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">scram::mef::Element::Element</a></div><div class="ttdeci">Element(std::string name)</div><div class="ttdoc">Constructs an element with an original name. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00030">element.cc:30</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml">scram::mef::CollectExpression</a></div><div class="ttdoc">The operation of collecting expressions for event tree sequences. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00074">instruction.h:74</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00038">instruction.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml">scram::mef::Block</a></div><div class="ttdoc">Compound instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00130">instruction.h:130</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_aece4a88079685cfe53968c770214ba88"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#aece4a88079685cfe53968c770214ba88">scram::mef::SetHouseEvent::SetHouseEvent</a></div><div class="ttdeci">SetHouseEvent(std::string name, bool state)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00059">instruction.h:59</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a17b5f067a805f191ed84427c7e4a4537"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a17b5f067a805f191ed84427c7e4a4537">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const Rule *rule)</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00207">instruction.h:207</a></div></div>
<div class="ttc" id="namespacescram_1_1mef_xhtml"><div class="ttname"><a href="namespacescram_1_1mef.xhtml">scram::mef</a></div><div class="ttdef"><b>Definition:</b> <a href="alignment_8cc_source.xhtml#l00026">alignment.cc:26</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Visitable_xhtml_a8e512950cd6e9f9cd20392e56f085db7"><div class="ttname"><a href="classscram_1_1mef_1_1Visitable.xhtml#a8e512950cd6e9f9cd20392e56f085db7">scram::mef::Visitable::Accept</a></div><div class="ttdeci">void Accept(InstructionVisitor *visitor) const final</div><div class="ttdoc">Calls visit with the object pointer T*. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00229">instruction.h:229</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml">scram::mef::IfThenElse</a></div><div class="ttdoc">Conditional application of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00102">instruction.h:102</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_aa650d6f7eb404e52ffce429c6e08a747"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">scram::mef::IfThenElse::expression</a></div><div class="ttdeci">Expression * expression() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00114">instruction.h:114</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00165">event_tree.h:165</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml_a676b90f6be42e68a3c83cd63fc644fd8"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml#a676b90f6be42e68a3c83cd63fc644fd8">scram::mef::Block::Block</a></div><div class="ttdeci">Block(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00133">instruction.h:133</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a3886fbcbb5f9bc2ce3b45bc64a25559a"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">scram::mef::Link::event_tree</a></div><div class="ttdeci">const EventTree &amp; event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00179">instruction.h:179</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a6e511343744f2ac89798a54fb1b0babc"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a6e511343744f2ac89798a54fb1b0babc">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const SetHouseEvent *)=0</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml_a37104b2f6774ce92968bec66a7c1facc"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml#a37104b2f6774ce92968bec66a7c1facc">scram::mef::CollectExpression::CollectExpression</a></div><div class="ttdeci">CollectExpression(Expression *expression)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00078">instruction.h:78</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml">scram::mef::SetHouseEvent</a></div><div class="ttdoc">The operation to change house-events. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00055">instruction.h:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml_a64ff8a04a3cce0febdf9fce4cc25d19a"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">scram::mef::Instruction::Accept</a></div><div class="ttdeci">virtual void Accept(InstructionVisitor *visitor) const =0</div><div class="ttdoc">Applies the visitor to the object. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a72f41975cddffec2c78a6ec17a397634"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a72f41975cddffec2c78a6ec17a397634">scram::mef::Link::Link</a></div><div class="ttdeci">Link(const EventTree &amp;event_tree)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00176">instruction.h:176</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml_a78250514b4f9959087dc96f37e74eff0"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">scram::mef::Block::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00137">instruction.h:137</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml">scram::mef::Rule</a></div><div class="ttdoc">A reusable collection of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00146">instruction.h:146</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml">scram::mef::Link</a></div><div class="ttdoc">A link to another event tree in end-states only. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00173">instruction.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml">scram::mef::Usage</a></div><div class="ttdoc">Mixin class for providing usage marks for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00305">element.h:305</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a609edf81ed71768db0f02ba2dfc14948"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a609edf81ed71768db0f02ba2dfc14948">scram::mef::Rule::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00160">instruction.h:160</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a100bdabeea8503c87dd349eda22e3b14"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a100bdabeea8503c87dd349eda22e3b14">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const IfThenElse *ite)</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00196">instruction.h:196</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml">scram::mef::CollectFormula</a></div><div class="ttdoc">The operation of connecting fault tree events into the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00089">instruction.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_ab1471e842002f3b841264b2710bdf369"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#ab1471e842002f3b841264b2710bdf369">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const SetHouseEvent *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00217">instruction.h:217</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml_a0be8ace1305ed498fca212a3b1a6938f"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">scram::mef::CollectExpression::expression</a></div><div class="ttdeci">Expression &amp; expression() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00082">instruction.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml_a56a3cfe8798a0ed58a33d9a0b40d729c"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">scram::mef::CollectFormula::formula</a></div><div class="ttdeci">Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00095">instruction.h:95</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Visitable_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Visitable.xhtml">scram::mef::Visitable</a></div><div class="ttdoc">Default visit for instruction type of T. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00048">instruction.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml">scram::mef::InstructionVisitor</a></div><div class="ttdoc">The base abstract class for instruction visitors. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00186">instruction.h:186</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00047">element.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_a6c9500b9e2f7d4e1dfa079469af5626f"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#a6c9500b9e2f7d4e1dfa079469af5626f">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const IfThenElse *ite) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00221">instruction.h:221</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_a3c02254bd74a2badea031f519c75b56f"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#a3c02254bd74a2badea031f519c75b56f">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const Link *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00220">instruction.h:220</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml_a891f3de164fce7f15d0ad53dab1e95fd"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml#a891f3de164fce7f15d0ad53dab1e95fd">scram::mef::CollectFormula::CollectFormula</a></div><div class="ttdeci">CollectFormula(FormulaPtr formula)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00092">instruction.h:92</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_a78d78cbf5e26fadf3efda96fbe5cb066"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">scram::mef::SetHouseEvent::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00063">instruction.h:63</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af4c1a5cb29e8f45623a99742b7ba8bc5"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">scram::mef::Expression::value</a></div><div class="ttdeci">virtual double value() noexcept=0</div></div>
<div class="ttc" id="instruction_8h_xhtml_a7766297ed0a530a6c53fa56a0747f331"><div class="ttname"><a href="instruction_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">scram::mef::RulePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Rule &gt; RulePtr</div><div class="ttdoc">Unique rules in a model. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00168">instruction.h:168</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_a387408bee706990d89424476f84a5a15"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#a387408bee706990d89424476f84a5a15">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const CollectFormula *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00219">instruction.h:219</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_aab13d860d45d741cac43ccb2192a0072"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#aab13d860d45d741cac43ccb2192a0072">scram::mef::IfThenElse::IfThenElse</a></div><div class="ttdeci">IfThenElse(Expression *expression, Instruction *then_instruction, Instruction *else_instruction=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00107">instruction.h:107</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml">scram::mef::NullVisitor</a></div><div class="ttdoc">Visits only instructions and ignores non-instructions. </div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00215">instruction.h:215</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00067">expression.h:67</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00158">event.h:158</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a6094da386afbd31ffa1843dc270a0e0f"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">scram::mef::Rule::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="instruction_8h_source.xhtml#l00154">instruction.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml">scram::mef::NodeMark</a></div><div class="ttdoc">Mixin class for providing marks for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00280">element.h:280</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:36 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
