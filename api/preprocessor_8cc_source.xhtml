<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>preprocessor.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">preprocessor.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="preprocessor_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of preprocessing algorithms.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// The main goal of preprocessing algorithms is</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/// to make PDAGs simpler, modular, easier for analysis.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">/// If a preprocessing algorithm has</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">/// its limitations, side-effects, and assumptions,</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/// the documentation in the header file</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/// must contain all the relevant information within</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/// its description, preconditions, postconditions, notes, or warnings.</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">/// The default assumption for all algorithms is</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">/// that the PDAG is valid and well-formed.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">/// Some suggested contracts/notes for preprocessing algorithms:</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">///   * Works with coherent graphs only</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">///   * Works with positive gates or nodes only</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">///   * Depends on node visit information, gate marks, or other node flags.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">///   * May introduce NULL or UNITY state gates or constants</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">///   * May introduce NULL/NOT type gates</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">///   * Operates on certain gate types only</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">///   * Works with normalized gates or structure only</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">///   * Cannot accept a graph with gates of certain types</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">///   * May destroy modules</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">///   * Can accept graphs with constants or constant gates</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">///   * Depends on other preprocessing functions or algorithms</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">///   * Swaps the root gate of the graph with another (arg) gate</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">///   * Removes gates or other kind of nodes</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">///   * May introduce new gate clones or subgraphs,</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">///     making the graph more complex.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">///   * Works on particular cases or setups only</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">///   * Has trade-offs</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">///   * Runs better/More effective before/after some preprocessing step(s)</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">///   * Coupled with another preprocessing algorithms</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///   * Idempotent (consecutive, repeated application doesn&#39;t yield any change)</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">///   * One-time operation (any repetition is pointless or dangerous)</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// Assuming that the PDAG is provided</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// in the state as described in the contract,</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/// the algorithms should never throw an exception.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">/// The algorithms must guarantee</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">/// that, given a valid and well-formed PDAG,</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">/// the resulting PDAG</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">/// will at least be valid, well-formed,</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/// and semantically equivalent (isomorphic) to the input PDAG.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/// Moreover, the algorithms must be deterministic</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">/// and produce stable results.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// If the contract is violated,</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/// the result or behavior of the algorithm can be undefined.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// There is no requirement</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/// to check for the contract violations</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// and to exit gracefully.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="preprocessor_8h.xhtml">preprocessor.h</a>&quot;</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">#include &lt;boost/functional/hash.hpp&gt;</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/sign.hpp&gt;</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm_ext.hpp&gt;</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="algorithm_8h.xhtml">ext/algorithm.h</a>&quot;</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="find__iterator_8h.xhtml">ext/find_iterator.h</a>&quot;</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1core.xhtml">scram::core</a> {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">namespace </span>pdag {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="preprocessor_8cc.xhtml#aad23ca4172bc61fc1fbb6024eb81dc59">   97</a></span>&#160;std::vector&lt;T*&gt; <a class="code" href="preprocessor_8cc.xhtml#aad23ca4172bc61fc1fbb6024eb81dc59">OrderArguments</a>(<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* gate) noexcept {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  std::vector&lt;T*&gt; args;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;T&gt;</a>&amp; arg : gate-&gt;args&lt;T&gt;()) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    args.push_back(arg.second.get());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  boost::sort(args, [](T* lhs, T* rhs) {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> lhs-&gt;parents().size() &gt; rhs-&gt;parents().size();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  });</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> args;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="preprocessor_8cc.xhtml#afb6bfa449cb37d89e64264cab6d3efaa">  108</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="preprocessor_8cc.xhtml#afb6bfa449cb37d89e64264cab6d3efaa">TopologicalOrder</a>(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="comment">// Assigns the order starting from the given gate arguments.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keyword">auto</span> topological_order = [](<span class="keyword">auto</span>&amp; <span class="keyword">self</span>, <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* root, <span class="keywordtype">int</span> order) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> (root-&gt;<a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>())</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      <span class="keywordflow">return</span> order;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* arg : OrderArguments&lt;Gate&gt;(root)) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      order = <span class="keyword">self</span>(<span class="keyword">self</span>, arg, order);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>* arg : OrderArguments&lt;Variable&gt;(root)) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      <span class="keywordflow">if</span> (!arg-&gt;order())</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        arg-&gt;order(++order);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    assert(!root-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">constant</a>());</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    root-&gt;<a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>(++order);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> order;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  graph-&gt;Clear&lt;Pdag::kOrder&gt;();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  topological_order(topological_order, graph-&gt;root().get(), 0);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="preprocessor_8cc.xhtml#ac1f71051965d2af495655a946c09724c">  129</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="preprocessor_8cc.xhtml#ac1f71051965d2af495655a946c09724c">MarkCoherence</a>(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keyword">auto</span> mark_coherence = [](<span class="keyword">auto</span>&amp; <span class="keyword">self</span>, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">bool</span> coherent = <span class="keyword">true</span>;  <span class="comment">// Optimistic initialization.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        coherent = <span class="keyword">false</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        assert(coherent);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <span class="keyword">self</span>(<span class="keyword">self</span>, arg.second);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordflow">if</span> (coherent &amp;&amp; (arg.first &lt; 0 || !arg.second-&gt;coherent()))</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        coherent = <span class="keyword">false</span>;  <span class="comment">// Must continue with all gates.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (coherent) {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span> (arg.first &lt; 0) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;          coherent = <span class="keyword">false</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;          <span class="keywordflow">break</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    assert(!gate-&gt;constant());</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    gate-&gt;coherent(coherent);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  };</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  graph-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  mark_coherence(mark_coherence, graph-&gt;root());</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  assert(!(graph-&gt;coherent() &amp;&amp; !graph-&gt;root()-&gt;coherent()));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  graph-&gt;coherent(!graph-&gt;complement() &amp;&amp; graph-&gt;root()-&gt;coherent());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}  <span class="comment">// namespace pdag</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a41db9fe9261126a080c87113223eaf18">  170</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a41db9fe9261126a080c87113223eaf18">Preprocessor::Preprocessor</a>(<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>* graph) noexcept : graph_(graph) {}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a5ee92284aef510ce01a71c962d50f51c">  172</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a5ee92284aef510ce01a71c962d50f51c">Preprocessor::operator()</a>() noexcept {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Preprocessing&quot;</span>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  this-&gt;Run();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a2b6705e815fa3d02119c405b483766d5">  177</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a2b6705e815fa3d02119c405b483766d5">Preprocessor::Run</a>() noexcept {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  pdag::Transform(graph_, [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { RunPhaseOne(); },</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { RunPhaseTwo(); },</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">if</span> (!graph_-&gt;normal())</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                      RunPhaseThree();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                  });</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/// Container of unique gates.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">/// This container acts like an unordered set of gates.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">/// The gates are equivalent</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">/// if they have the same semantics.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">/// However, this set does not test</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">/// for the isomorphism of the gates&#39; Boolean formulas.</span></div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">  192</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">Preprocessor::GateSet</a> {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">  /// Inserts a gate into the set</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// if it is semantically unique.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">  /// @param[in] gate  The gate to insert.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  /// @returns A pair of the unique gate and</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  ///          the insertion success flag.</span></div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml#ae00239084858979e096032c4cf2f05b9">  201</a></span>&#160;<span class="comment"></span>  std::pair&lt;GatePtr, bool&gt; <a class="code" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml#ae00239084858979e096032c4cf2f05b9">insert</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">auto</span> result = table_[gate-&gt;type()].insert(gate);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> {*result.first, result.second};</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// Functor for hashing gates by their arguments.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  /// @note The hashing discards the logic of the gate.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>Hash {<span class="comment"></span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">    /// Operator overload for hashing.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">    /// @param[in] gate  The gate which hash must be calculated.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">    /// @returns Hash value of the gate</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    ///          from its arguments but not logic.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span>    std::size_t operator()(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) <span class="keyword">const</span> noexcept {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="keywordflow">return</span> boost::hash_range(gate-&gt;args().begin(), gate-&gt;args().end());</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  };<span class="comment"></span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">  /// Functor for equality test for gates by their arguments.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">  /// @note The equality discards the logic of the gate.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"></span>  <span class="keyword">struct </span>Equal {<span class="comment"></span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">    /// Operator overload for gate argument equality test.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /// @param[in] lhs  The first gate.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">    /// @param[in] rhs  The second gate.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">    /// @returns true if the gate arguments are equal.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; rhs) <span class="keyword">const</span> noexcept {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      assert(lhs-&gt;type() == rhs-&gt;type());</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      <span class="keywordflow">if</span> (lhs-&gt;args() != rhs-&gt;args())</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <span class="keywordflow">if</span> (lhs-&gt;type() == kVote &amp;&amp; lhs-&gt;vote_number() != rhs-&gt;vote_number())</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  };<span class="comment"></span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  /// Container of gates grouped by their types.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span>  std::array&lt;std::unordered_set&lt;GatePtr, Hash, Equal&gt;, kNumOperators&gt; table_;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;};</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// PDAG structure verification tools.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">/// Functor to sanity check the marks of PDAG gates.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span><span class="keyword">class </span>TestGateMarks {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">  /// Helper function to find discontinuous gate marking.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">  /// The traversal will fail with assert</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">  /// upon depth-first encounter of a problem.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">  /// @param[in] gate  The starting gate to traverse.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">  /// @param[in] mark  Assumed mark of the whole graph.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">  /// @returns true if the job is done.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keywordtype">bool</span> mark) noexcept {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> (tested_gates_.insert(gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>()).second == <span class="keyword">false</span>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">mark</a>() == mark &amp;&amp; <span class="stringliteral">&quot;Found discontinuous gate mark.&quot;</span>);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;())</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      (*<span class="keyword">this</span>)(arg.second, mark);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  std::unordered_set&lt;int&gt; tested_gates_;  <span class="comment">///&lt; Alternative to gate marking.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">/// Functor to sanity check the structure of PDAG gates.</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span><span class="keyword">class </span>TestGateStructure {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">  /// Helper function to find malformed gates.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// The traversal will fail with assert</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  /// upon depth-first encounter of a problem.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  /// @param[in] gate  The starting gate to traverse.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">  /// @returns true if the job is done.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate) noexcept {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">if</span> (tested_gates_.insert(gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>()).second == <span class="keyword">false</span>)</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    assert(!gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">constant</a>() &amp;&amp; <span class="stringliteral">&quot;Constant gates are not clear!&quot;</span>);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">switch</span> (gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">type</a>()) {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;      <span class="keywordflow">case</span> kNull:</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;      <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>().size() == 1 &amp;&amp; <span class="stringliteral">&quot;Malformed one-arg gate!&quot;</span>);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>().size() == 2 &amp;&amp; <span class="stringliteral">&quot;Malformed XOR gate!&quot;</span>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="keywordflow">case</span> kVote:</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a44b9a758151d932743543241ca669517">vote_number</a>() &gt; 1 &amp;&amp; <span class="stringliteral">&quot;K/N has wrong K!&quot;</span>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>().size() &gt; gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a44b9a758151d932743543241ca669517">vote_number</a>() &amp;&amp; <span class="stringliteral">&quot;K/N has wrong N!&quot;</span>);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>().size() &gt; 1 &amp;&amp; <span class="stringliteral">&quot;Missing arguments!&quot;</span>);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;())</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      (*<span class="keyword">this</span>)(arg.second);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  std::unordered_set&lt;int&gt; tested_gates_;  <span class="comment">///&lt; Alternative to gate marking.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">/// A collection of sanity checks between preprocessing phases.</span></div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">  311</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define SANITY_ASSERT                                                      \</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">  assert(graph_-&gt;root() &amp;&amp; &quot;Corrupted pointer to the root gate.&quot;);         \</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">  assert(graph_-&gt;root()-&gt;parents().empty() &amp;&amp; &quot;Root can&#39;t have parents.&quot;); \</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">  assert(!(graph_-&gt;coherent() &amp;&amp; graph_-&gt;complement()));                   \</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">  assert(!graph_-&gt;HasConstants() &amp;&amp; &quot;Const gate cleanup is broken!&quot;);      \</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">  assert(!graph_-&gt;HasNullGates() &amp;&amp; &quot;Null gate cleanup is broken!&quot;);       \</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">  assert(TestGateStructure()(*graph_-&gt;root()));                            \</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">  assert(TestGateMarks()(*graph_-&gt;root(), graph_-&gt;root()-&gt;mark()))</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a44f820b6fe2c23594c818432b33e26a6">  320</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a44f820b6fe2c23594c818432b33e26a6">Preprocessor::RunPhaseOne</a>() noexcept {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Preprocessing Phase I&quot;</span>);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;HasNullGates()) {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Removing NULL gates&quot;</span>);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span> (graph_-&gt;IsTrivial())</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <a class="code" href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">SANITY_ASSERT</a>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="keywordflow">if</span> (!graph_-&gt;coherent()) {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    NormalizeGates(<span class="comment">/*full=*/</span><span class="keyword">false</span>);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a9d5f89471499508eb9e6c01ea43e0f15">  335</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a9d5f89471499508eb9e6c01ea43e0f15">Preprocessor::RunPhaseTwo</a>() noexcept {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Preprocessing Phase II&quot;</span>);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <a class="code" href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">SANITY_ASSERT</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  pdag::Transform(graph_,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <span class="keywordflow">while</span> (ProcessMultipleDefinitions())</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                  },</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { DetectModules(); },</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    <span class="keywordflow">while</span> (CoalesceGates(<span class="comment">/*common=*/</span><span class="keyword">false</span>))</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                  },</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { MergeCommonArgs(); },</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { DetectDistributivity(); },</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { DetectModules(); },</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { BooleanOptimization(); },</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { DecomposeCommonNodes(); },</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { DetectModules(); },</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    <span class="keywordflow">while</span> (CoalesceGates(<span class="comment">/*common=*/</span><span class="keyword">false</span>))</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                  },</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { DetectModules(); });</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#abf2c66723172a85b2ae87ef2a034cd1f">  363</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#abf2c66723172a85b2ae87ef2a034cd1f">Preprocessor::RunPhaseThree</a>() noexcept {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Preprocessing Phase III&quot;</span>);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <a class="code" href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">SANITY_ASSERT</a>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  assert(!graph_-&gt;normal());</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  NormalizeGates(<span class="comment">/*full=*/</span><span class="keyword">true</span>);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  graph_-&gt;normal(<span class="keyword">true</span>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;IsTrivial())</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Continue with Phase II within Phase III&quot;</span>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  RunPhaseTwo();</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;}</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a5c224938dfba861f061525658bd7b156">  377</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a5c224938dfba861f061525658bd7b156">Preprocessor::RunPhaseFour</a>() noexcept {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Preprocessing Phase IV&quot;</span>);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <a class="code" href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">SANITY_ASSERT</a>;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  assert(!graph_-&gt;coherent());</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Propagating complements...&quot;</span>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;complement()) {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root = graph_-&gt;root();</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    assert(root-&gt;type() == kOr || root-&gt;type() == kAnd ||</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;           root-&gt;type() == kNull);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">if</span> (root-&gt;type() == kOr || root-&gt;type() == kAnd)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      root-&gt;type(root-&gt;type() == kOr ? kAnd : kOr);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    root-&gt;NegateArgs();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    graph_-&gt;complement() = <span class="keyword">false</span>;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  std::unordered_map&lt;int, GatePtr&gt; complements;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  PropagateComplements(graph_-&gt;root(), <span class="keyword">false</span>, &amp;complements);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  complements.clear();</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Complement propagation is done!&quot;</span>;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;IsTrivial())</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Continue with Phase II within Phase IV&quot;</span>;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  RunPhaseTwo();</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a3569bbcd5e863c750cdfa69115399600">  404</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a3569bbcd5e863c750cdfa69115399600">Preprocessor::RunPhaseFive</a>() noexcept {</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, <span class="stringliteral">&quot;Preprocessing Phase V&quot;</span>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <a class="code" href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">SANITY_ASSERT</a>;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <span class="keywordflow">while</span> (CoalesceGates(<span class="comment">/*common=*/</span><span class="keyword">true</span>))</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;IsTrivial())</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Continue with Phase II within Phase V&quot;</span>;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  RunPhaseTwo();</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;IsTrivial())</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <span class="keywordflow">while</span> (CoalesceGates(<span class="comment">/*common=*/</span><span class="keyword">true</span>))</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;IsTrivial())</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  graph_-&gt;Log();</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="preprocessor">#undef SANITY_ASSERT</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// Helper functions for all preprocessing algorithms.</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">/// Detects overlap in ranges.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">/// @param[in] a_min  The lower boundary of the first range.</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">/// @param[in] a_max  The upper boundary of the first range.</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">/// @param[in] b_min  The lower boundary of the second range.</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">/// @param[in] b_max  The upper boundary of the second range.</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">/// @returns true if there&#39;s overlap in the ranges.</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> DetectOverlap(<span class="keywordtype">int</span> a_min, <span class="keywordtype">int</span> a_max, <span class="keywordtype">int</span> b_min, <span class="keywordtype">int</span> b_max) noexcept {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  assert(a_min &lt; a_max);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  assert(b_min &lt; b_max);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  <span class="keywordflow">return</span> a_min &lt;= b_max &amp;&amp; a_max &gt;= b_min;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">/// Checks if a node within a graph enter and exit times.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">/// @param[in] node  The node to be tested.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">/// @param[in] enter_time  The enter time of the root gate of the graph.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">/// @param[in] exit_time  The exit time of the root gate of the graph.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">/// @returns true if the node within the graph visit times.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> IsNodeWithinGraph(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; node, <span class="keywordtype">int</span> enter_time,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                       <span class="keywordtype">int</span> exit_time) noexcept {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  assert(enter_time &gt; 0);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  assert(exit_time &gt; enter_time);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  assert(node-&gt;EnterTime() &gt;= 0);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  assert(node-&gt;LastVisit() &gt;= node-&gt;EnterTime());</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  <span class="keywordflow">return</span> node-&gt;EnterTime() &gt; enter_time &amp;&amp; node-&gt;LastVisit() &lt; exit_time;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">/// Checks if a subgraph with a root gate is within a subgraph.</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">/// The positive result means</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">/// that all nodes of the subgraph is contained within the main graph.</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">/// @param[in] root  The root gate of the subgraph.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">/// @param[in] enter_time  The enter time of the root gate of the graph.</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">/// @param[in] exit_time  The exit time of the root gate of the graph.</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">/// @returns true if the subgraph within the graph visit times.</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> IsSubgraphWithinGraph(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root, <span class="keywordtype">int</span> enter_time,</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                           <span class="keywordtype">int</span> exit_time) noexcept {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  assert(enter_time &gt; 0);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  assert(exit_time &gt; enter_time);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  assert(root-&gt;min_time() &gt; 0);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  assert(root-&gt;max_time() &gt; root-&gt;min_time());</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  <span class="keywordflow">return</span> root-&gt;min_time() &gt; enter_time &amp;&amp; root-&gt;max_time() &lt; exit_time;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ad13e133278ea7563c1ba037c05c35aa2">  480</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ad13e133278ea7563c1ba037c05c35aa2">Preprocessor::NormalizeGates</a>(<span class="keywordtype">bool</span> full) noexcept {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, (full ? <span class="stringliteral">&quot;Full normalization&quot;</span> : <span class="stringliteral">&quot;Partial normalization&quot;</span>));</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  <span class="keywordflow">if</span> (full)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    pdag::TopologicalOrder(graph_);  <span class="comment">// K/N gates need order.</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root_gate = graph_-&gt;root();</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type = root_gate-&gt;type();</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  <span class="keywordflow">switch</span> (type) {  <span class="comment">// Handle special case for the root gate.</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      graph_-&gt;complement() ^= <span class="keyword">true</span>;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">default</span>:  <span class="comment">// All other types keep the sign of the root.</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;      assert((type == kAnd || type == kOr || type == kVote || type == kXor ||</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;              type == kNull) &amp;&amp;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;             <span class="stringliteral">&quot;Update the logic if new gate types are introduced.&quot;</span>);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;  <span class="comment">// Process negative gates.</span></div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;  <span class="comment">// Note that root&#39;s negative gate is processed in the above lines.</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  NotifyParentsOfNegativeGates(root_gate);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  NormalizeGate(root_gate, full);  <span class="comment">// Registers null gates only.</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  assert(!graph_-&gt;HasConstants());</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;  graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a6ee8f65454835d8de931a2d38bf8b276">  511</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a6ee8f65454835d8de931a2d38bf8b276">Preprocessor::NotifyParentsOfNegativeGates</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  gate-&gt;NegateNonCoherentGateArgs();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    NotifyParentsOfNegativeGates(arg.second);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;  }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;}</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#abfe2eda90c983750e28db49900a4909d">  521</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#abfe2eda90c983750e28db49900a4909d">Preprocessor::NormalizeGate</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keywordtype">bool</span> full) noexcept {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  assert(!gate-&gt;args().empty());</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;  <span class="comment">// Depth-first traversal before the arguments may get changed.</span></div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    NormalizeGate(arg.second, full);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  <span class="keywordflow">switch</span> (gate-&gt;type()) {  <span class="comment">// Negation is already processed.</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;      assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;      gate-&gt;type(kOr);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;      assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;      gate-&gt;type(kAnd);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;      assert(gate-&gt;args().size() == 2);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;      <span class="keywordflow">if</span> (full)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        NormalizeXorGate(gate);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">case</span> kVote:</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;      assert(gate-&gt;args().size() &gt; 2);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;      assert(gate-&gt;vote_number() &gt; 1);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;      <span class="keywordflow">if</span> (full)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        NormalizeVoteGate(gate);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;      assert(gate-&gt;args().size() == 1);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;      gate-&gt;type(kNull);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordflow">default</span>:  <span class="comment">// Already normal gates.</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;      assert(gate-&gt;type() == kAnd || gate-&gt;type() == kOr);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;      assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;  }</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;}</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a45cf08c3809e801be50eda53dd68fca6">  562</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a45cf08c3809e801be50eda53dd68fca6">Preprocessor::NormalizeXorGate</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  assert(gate-&gt;args().size() == 2);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keyword">auto</span> gate_one = std::make_shared&lt;Gate&gt;(kAnd, graph_);</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  <span class="keyword">auto</span> gate_two = std::make_shared&lt;Gate&gt;(kAnd, graph_);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  gate_one-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  gate_two-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  gate-&gt;type(kOr);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  <span class="keyword">auto</span> it = gate-&gt;args().begin();</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  gate-&gt;ShareArg(*it, gate_one);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;  gate-&gt;ShareArg(*it, gate_two);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  gate_two-&gt;NegateArg(*it);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;  ++it;  <span class="comment">// Handling the second argument.</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  gate-&gt;ShareArg(*it, gate_one);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;  gate_one-&gt;NegateArg(*it);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;  gate-&gt;ShareArg(*it, gate_two);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  gate-&gt;EraseArgs();</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  gate-&gt;AddArg(gate_one);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  gate-&gt;AddArg(gate_two);</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;}</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a56b5719bcfcfd1678928befe31d9b729">  585</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a56b5719bcfcfd1678928befe31d9b729">Preprocessor::NormalizeVoteGate</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  assert(gate-&gt;type() == kVote);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  <span class="keywordtype">int</span> vote_number = gate-&gt;vote_number();</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  assert(vote_number &gt; 0);  <span class="comment">// Vote number can be 1 for special OR gates.</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;args().size() == vote_number) {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    gate-&gt;type(kAnd);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (vote_number == 1) {</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    gate-&gt;type(kOr);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  }</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  <span class="keyword">auto</span> it = boost::max_element(gate-&gt;args(), [&amp;gate](<span class="keywordtype">int</span> lhs, <span class="keywordtype">int</span> rhs) {</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">return</span> gate-&gt;GetArg(lhs)-&gt;order() &lt; gate-&gt;GetArg(rhs)-&gt;order();</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  });</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;  assert(it != gate-&gt;args().cend());</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  <span class="keyword">auto</span> first_arg = std::make_shared&lt;Gate&gt;(kAnd, graph_);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;  gate-&gt;TransferArg(*it, first_arg);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;  <span class="keyword">auto</span> grand_arg = std::make_shared&lt;Gate&gt;(kVote, graph_);</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  first_arg-&gt;AddArg(grand_arg);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;  grand_arg-&gt;vote_number(vote_number - 1);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;  <span class="keyword">auto</span> second_arg = std::make_shared&lt;Gate&gt;(kVote, graph_);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  second_arg-&gt;vote_number(vote_number);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : gate-&gt;args()) {</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    gate-&gt;ShareArg(index, grand_arg);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    gate-&gt;ShareArg(index, second_arg);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;  }</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  first_arg-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  second_arg-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;  grand_arg-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;  gate-&gt;type(kOr);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;  gate-&gt;EraseArgs();</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  gate-&gt;AddArg(first_arg);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;  gate-&gt;AddArg(second_arg);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;  NormalizeVoteGate(grand_arg);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;  NormalizeVoteGate(second_arg);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;}</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aff25812178063fd0f9bfd9a87cebb5af">  631</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aff25812178063fd0f9bfd9a87cebb5af">Preprocessor::PropagateComplements</a>(</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keywordtype">bool</span> keep_modules,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    std::unordered_map&lt;int, GatePtr&gt;* complements) noexcept {</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  <span class="comment">// If the argument gate is complement,</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="comment">// then create a new gate</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  <span class="comment">// that propagates its sign to its arguments</span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  <span class="comment">// and itself becomes non-complement.</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  <span class="comment">// Keep track of complement gates</span></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  <span class="comment">// for optimization of repeated complements.</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  std::vector&lt;std::pair&lt;int, GatePtr&gt;&gt; to_swap;  <span class="comment">// Gate args with negation.</span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">if</span> ((arg.first &gt; 0) || (keep_modules &amp;&amp; arg_gate-&gt;module())) {</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;      PropagateComplements(arg_gate, keep_modules, complements);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    }  <span class="comment">// arg is complement and (not keep_modules or arg is not module).</span></div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(*complements, arg_gate-&gt;index())) {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;      to_swap.emplace_back(arg.first, it-&gt;second);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;      assert(it-&gt;second-&gt;mark());</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Existing complements are already processed.</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type = arg_gate-&gt;type();</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    assert(type == kAnd || type == kOr);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> complement_type = type == kOr ? kAnd : kOr;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> complement;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">if</span> (arg_gate-&gt;parents().size() == 1) {  <span class="comment">// Optimization. Reuse.</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;      arg_gate-&gt;type(complement_type);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;      arg_gate-&gt;NegateArgs();</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;      complement = arg_gate;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;      complement = arg_gate-&gt;Clone();</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;      <span class="keywordflow">if</span> (arg_gate-&gt;module())</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        arg_gate-&gt;module(<span class="keyword">false</span>);  <span class="comment">// Not good.</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;      complement-&gt;type(complement_type);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;      complement-&gt;NegateArgs();</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;      complements-&gt;emplace(arg_gate-&gt;index(), complement);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    }</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    to_swap.emplace_back(arg.first, complement);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    PropagateComplements(complement, keep_modules, complements);</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  }</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : to_swap) {</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    assert(arg.first &lt; 0);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    gate-&gt;EraseArg(arg.first);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    gate-&gt;AddArg(arg.second);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    assert(!gate-&gt;constant() &amp;&amp; <span class="stringliteral">&quot;No duplicates are expected.&quot;</span>);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  }</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;}</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a00288bef180767d7c79e3c79a33ef2d8">  683</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a00288bef180767d7c79e3c79a33ef2d8">Preprocessor::CoalesceGates</a>(<span class="keywordtype">bool</span> common) noexcept {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Coalescing gates&quot;</span>);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;root()-&gt;constant())</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  <span class="keywordtype">bool</span> ret = CoalesceGates(graph_-&gt;root(), common);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  graph_-&gt;RemoveNullGates();  <span class="comment">// Actually, only constants are created.</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a3a0500bd52152df42fca486c97043140">  695</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a00288bef180767d7c79e3c79a33ef2d8">Preprocessor::CoalesceGates</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keywordtype">bool</span> common) noexcept {</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> target_type = kNull;  <span class="comment">// What kind of arg gate are we searching for?</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;  <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;      assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;      target_type = kAnd;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;      assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;      target_type = kOr;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;      target_type = kNull;  <span class="comment">// Implicit no operation!</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  }</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;  assert(!gate-&gt;args().empty());</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;  std::vector&lt;GatePtr&gt; to_join;  <span class="comment">// Gate arguments of the same logic.</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;  <span class="comment">// Indication if the graph is changed.</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    changed |= CoalesceGates(arg_gate, common);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">if</span> (target_type == kNull)</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Coalescing is impossible.</span></div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">if</span> (arg_gate-&gt;constant())</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// No args to join.</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">if</span> (arg.first &lt; 0)</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Cannot coalesce a negative arg gate.</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keywordflow">if</span> (arg_gate-&gt;module())</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Preserve modules.</span></div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordflow">if</span> (!common &amp;&amp; arg_gate-&gt;parents().size() &gt; 1)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Check common.</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordflow">if</span> (arg_gate-&gt;type() == target_type)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;      to_join.push_back(arg_gate);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;  }</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;  changed |= !to_join.empty();</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg : to_join) {</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    gate-&gt;CoalesceGate(arg);</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;constant())</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;      <span class="keywordflow">break</span>;  <span class="comment">// The parent is constant. No need to join other arguments.</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    assert(gate-&gt;args().size() &gt; 1);  <span class="comment">// Does not produce NULL type gates.</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;  }</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;}</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ac0abd7f5b54f98643644110b160569bd">  746</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ac0abd7f5b54f98643644110b160569bd">Preprocessor::ProcessMultipleDefinitions</a>() noexcept {</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;root()-&gt;constant())</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Detecting multiple definitions&quot;</span>);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;  <span class="comment">// The original gate and its multiple definitions.</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  std::unordered_map&lt;GatePtr, std::vector&lt;GateWeakPtr&gt;&gt; multi_def;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;  {</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <a class="code" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">GateSet</a> unique_gates;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    DetectMultipleDefinitions(graph_-&gt;root(), &amp;multi_def, &amp;unique_gates);</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;  }</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;  <span class="keywordflow">if</span> (multi_def.empty())</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; multi_def.size() &lt;&lt; <span class="stringliteral">&quot; gates are multiply defined.&quot;</span>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; def : multi_def) {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Gate &quot;</span> &lt;&lt; def.first-&gt;index() &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; def.second.size()</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                &lt;&lt; <span class="stringliteral">&quot; times.&quot;</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a>&amp; duplicate : def.second) {</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;      <span class="keywordflow">if</span> (duplicate.expired())</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;      ReplaceGate(duplicate.lock(), def.first);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    }</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;  }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;  graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ae0bdf196274427420631bc20f95cb72a">  778</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ae0bdf196274427420631bc20f95cb72a">Preprocessor::DetectMultipleDefinitions</a>(</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate,</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    std::unordered_map&lt;<a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>, std::vector&lt;GateWeakPtr&gt;&gt;* multi_def,</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <a class="code" href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">GateSet</a>* unique_gates) noexcept {</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;module()) {  <span class="comment">// Modules are unique by definition.</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    std::pair&lt;GatePtr, bool&gt; ret = unique_gates-&gt;insert(gate);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    assert(ret.first-&gt;mark());</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keywordflow">if</span> (!ret.second) {  <span class="comment">// The gate is duplicate.</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;      (*multi_def)[ret.first].push_back(gate);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    }</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  }</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;  <span class="comment">// No redefinition is found for this gate.</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    DetectMultipleDefinitions(arg.second, multi_def, unique_gates);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;  }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aa9856913eee7b854abfbe8d8330566d3">  801</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aa9856913eee7b854abfbe8d8330566d3">Preprocessor::DetectModules</a>() noexcept {</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Module detection&quot;</span>);</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;  <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root_gate = graph_-&gt;root();  <span class="comment">// No change in this algorithm.</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  <span class="comment">// First stage, traverse the graph depth-first for gates</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;  <span class="comment">// and indicate visit time for each node.</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Assigning timings to nodes...&quot;</span>;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">Pdag::kVisit</a>&gt;();</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;  AssignTiming(0, root_gate);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Timings are assigned to nodes.&quot;</span>;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;  FindModules(root_gate);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  assert(!root_gate-&gt;Revisited());  <span class="comment">// Sanity checks.</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  assert(root_gate-&gt;min_time() == 1);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;  assert(root_gate-&gt;max_time() == root_gate-&gt;ExitTime());</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ac83a0afe1f22761907f2a017abd96268">  820</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ac83a0afe1f22761907f2a017abd96268">Preprocessor::AssignTiming</a>(<span class="keywordtype">int</span> time, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;Visit(++time))</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keywordflow">return</span> time;  <span class="comment">// Revisited gate.</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    time = AssignTiming(time, arg.second);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  }</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    arg.second-&gt;Visit(++time);  <span class="comment">// Enter the leaf.</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    arg.second-&gt;Visit(time);  <span class="comment">// Exit at the same time.</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;  }</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;  <span class="keywordtype">bool</span> re_visited = gate-&gt;Visit(++time);  <span class="comment">// Exiting the gate in second visit.</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;  assert(!re_visited &amp;&amp; <span class="stringliteral">&quot;Detected a cycle!&quot;</span>);  <span class="comment">// No cyclic visiting.</span></div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;  <span class="keywordflow">return</span> time;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;}</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#afbce0b5c45a445c3b70ae298b9518281">  837</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#afbce0b5c45a445c3b70ae298b9518281">Preprocessor::FindModules</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;  <span class="keywordtype">int</span> enter_time = gate-&gt;EnterTime();</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;  <span class="keywordtype">int</span> exit_time = gate-&gt;ExitTime();</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;  <span class="keywordtype">int</span> min_time = enter_time;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  <span class="keywordtype">int</span> max_time = exit_time;</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;  std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt; non_shared_args;</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;  std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt; modular_args;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;  std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt; non_modular_args;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    FindModules(arg_gate);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keywordflow">if</span> (arg_gate-&gt;module() &amp;&amp; !arg_gate-&gt;Revisited()) {</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;      assert(arg_gate-&gt;parents().size() == 1);</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;      assert(arg_gate-&gt;parents().count(gate-&gt;index()));</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;      assert(IsSubgraphWithinGraph(arg_gate, enter_time, exit_time));</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;      non_shared_args.push_back(arg);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Sub-graph&#39;s visit times are within the Enter and Exit time.</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    }</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keywordflow">if</span> (IsSubgraphWithinGraph(arg_gate, enter_time, exit_time)) {</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;      modular_args.push_back(arg);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;      non_modular_args.push_back(arg);</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;      min_time = std::min(min_time, arg_gate-&gt;min_time());</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;      max_time = std::max(max_time, arg_gate-&gt;max_time());</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    }</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;  }</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a>&amp; var = arg.second;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordflow">if</span> (var-&gt;parents().size() == 1) {</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;      assert(IsNodeWithinGraph(var, enter_time, exit_time));</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;      assert(var-&gt;parents().count(gate-&gt;index()));</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;      non_shared_args.push_back(arg);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// The single parent argument.</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    }</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordflow">if</span> (IsNodeWithinGraph(var, enter_time, exit_time)) {</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;      modular_args.push_back(arg);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;      non_modular_args.push_back(arg);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;      min_time = std::min(min_time, var-&gt;EnterTime());</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;      max_time = std::max(max_time, var-&gt;LastVisit());</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    }</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;  }</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;  <span class="comment">// Determine if this gate is module itself.</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;module() &amp;&amp; min_time == enter_time &amp;&amp; max_time == exit_time) {</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Found original module: G&quot;</span> &lt;&lt; gate-&gt;index();</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    assert(non_modular_args.empty());</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    gate-&gt;module(<span class="keyword">true</span>);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;  }</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  max_time = std::max(max_time, gate-&gt;LastVisit());</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;  gate-&gt;min_time(min_time);</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;  gate-&gt;max_time(max_time);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;  ProcessModularArgs(gate, non_shared_args, &amp;modular_args, &amp;non_modular_args);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;}</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a4e97ffcda9c98ffc5aff93214f827c18">  902</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4e97ffcda9c98ffc5aff93214f827c18">Preprocessor::ProcessModularArgs</a>(</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate,</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;&amp; non_shared_args,</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;* modular_args,</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;* non_modular_args) noexcept {</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;  assert(gate-&gt;args().size() == (non_shared_args.size() + modular_args-&gt;size() +</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                                 non_modular_args-&gt;size()) &amp;&amp;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;         <span class="stringliteral">&quot;Module detection has messed up grouping of arguments.&quot;</span>);</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;  <span class="comment">// Attempting to create new modules for specific gate types.</span></div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;  <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">case</span> kAnd: {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;      CreateNewModule(gate, non_shared_args);</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;      FilterModularArgs(modular_args, non_modular_args);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;      assert(modular_args-&gt;size() != 1 &amp;&amp; <span class="stringliteral">&quot;One modular arg is non-shared.&quot;</span>);</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;      std::vector&lt;std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;&gt; groups;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;      GroupModularArgs(modular_args, &amp;groups);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;      CreateNewModules(gate, *modular_args, groups);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    }</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;      assert(<span class="stringliteral">&quot;More complex gates are considered impossible to sub-modularize!&quot;</span>);</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;  }</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;}</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div><div class="line"><a name="l00930"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a434534b6a7c3fccc82c073e6aced90b1">  930</a></span>&#160;<a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a434534b6a7c3fccc82c073e6aced90b1">Preprocessor::CreateNewModule</a>(</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate,</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;&amp; args) noexcept {</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> module;  <span class="comment">// Empty pointer as an indication of a failure.</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;  <span class="keywordflow">if</span> (args.empty())</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keywordflow">return</span> module;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;  <span class="keywordflow">if</span> (args.size() == 1)</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keywordflow">return</span> module;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;  <span class="keywordflow">if</span> (args.size() == gate-&gt;args().size()) {</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    assert(gate-&gt;module());</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keywordflow">return</span> module;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;  }</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;  assert(args.size() &lt; gate-&gt;args().size());</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;  <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;      module = std::make_shared&lt;Gate&gt;(kAnd, graph_);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;      module = std::make_shared&lt;Gate&gt;(kOr, graph_);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;      <span class="keywordflow">return</span> module;  <span class="comment">// Cannot create sub-modules for other types.</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;  }</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;  module-&gt;module(<span class="keyword">true</span>);</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;  assert(gate-&gt;mark());</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;  module-&gt;mark(<span class="keyword">true</span>);  <span class="comment">// Keep consistent marking with the subgraph.</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : args) {</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    gate-&gt;TransferArg(arg.first, module);</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;  }</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;  gate-&gt;AddArg(module);</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;  assert(gate-&gt;args().size() &gt; 1);</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Created a module G&quot;</span> &lt;&lt; module-&gt;index() &lt;&lt; <span class="stringliteral">&quot; with &quot;</span></div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;              &lt;&lt; args.size() &lt;&lt; <span class="stringliteral">&quot; arguments for G&quot;</span> &lt;&lt; gate-&gt;index();</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;  <span class="keywordflow">return</span> module;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;}</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div><div class="line"><a name="l00968"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aa65bdffb78291a0e41a34d34bf3fa198">  968</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aa65bdffb78291a0e41a34d34bf3fa198">Preprocessor::FilterModularArgs</a>(</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;* modular_args,</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;* non_modular_args) noexcept {</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;  <span class="keywordflow">if</span> (modular_args-&gt;empty() || non_modular_args-&gt;empty())</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;  <span class="keyword">auto</span> it_end = modular_args-&gt;end();</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it_begin = modular_args-&gt;begin(),</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;            check_begin = non_modular_args-&gt;begin(),</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;            check_end = non_modular_args-&gt;end();</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;       check_begin != check_end;) {</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    check_begin = std::partition(</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        it_begin, it_end,</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        [check_begin, check_end](<span class="keyword">const</span> std::pair&lt;int, NodePtr&gt;&amp; mod_arg) {</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;          <span class="keywordflow">return</span> std::none_of(check_begin, check_end,</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                              [&amp;mod_arg](<span class="keyword">const</span> std::pair&lt;int, NodePtr&gt;&amp; arg) {</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                <span class="keywordflow">return</span> DetectOverlap(mod_arg.second-&gt;min_time(),</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                                     mod_arg.second-&gt;max_time(),</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                                     arg.second-&gt;min_time(),</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                                                     arg.second-&gt;max_time());</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                              });</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        });</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    check_end = it_end;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    it_end = check_begin;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;  }</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;  non_modular_args-&gt;insert(non_modular_args-&gt;end(), it_end,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                           modular_args-&gt;end());</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;  modular_args-&gt;erase(it_end, modular_args-&gt;end());</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;}</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;</div><div class="line"><a name="l00997"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a5c10e807e558b06a1573c08ed13e205e">  997</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a5c10e807e558b06a1573c08ed13e205e">Preprocessor::GroupModularArgs</a>(</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;* modular_args,</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    std::vector&lt;std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;&gt;* groups) noexcept {</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;  <span class="keywordflow">if</span> (modular_args-&gt;empty())</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;  assert(modular_args-&gt;size() &gt; 1);</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;  assert(groups-&gt;empty());</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;  <span class="comment">// Group nodes by the intersection of their visit ranges.</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;  boost::sort(*modular_args, [](<span class="keyword">const</span> std::pair&lt;int, NodePtr&gt;&amp; lhs_pair,</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                                <span class="keyword">const</span> std::pair&lt;int, NodePtr&gt;&amp; rhs_pair) {</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; lhs_node = lhs_pair.second;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; rhs_node = rhs_pair.second;</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <span class="keywordflow">if</span> (lhs_node-&gt;max_time() &lt; rhs_node-&gt;min_time())</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <span class="keywordflow">if</span> (lhs_node-&gt;min_time() &gt; rhs_node-&gt;max_time())</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    <span class="comment">// Considering the intersection.</span></div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keywordflow">if</span> (lhs_node-&gt;max_time() &lt; rhs_node-&gt;max_time())</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">if</span> (lhs_node-&gt;max_time() &gt; rhs_node-&gt;max_time())</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <span class="keywordflow">return</span> lhs_node-&gt;min_time() &gt; rhs_node-&gt;min_time();</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;  });</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;  <span class="comment">// Gather intersections into groups.</span></div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = modular_args-&gt;rbegin(), it_end = modular_args-&gt;rend();</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;       it != it_end;) {</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keywordtype">int</span> min_time = it-&gt;second-&gt;min_time();</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keyword">auto</span> it_group_end = std::find_if(</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        it + 1, it_end, [it, &amp;min_time](<span class="keyword">const</span> std::pair&lt;int, NodePtr&gt;&amp; arg) {</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;          assert(it-&gt;second-&gt;max_time() &gt;= arg.second-&gt;max_time());</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;          <span class="keywordflow">if</span> (min_time &lt;= arg.second-&gt;max_time()) {</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            min_time = std::min(min_time, arg.second-&gt;min_time());</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;          }</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">true</span>;  <span class="comment">// Found first element not in the group.</span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        });</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    assert(it_group_end - it &gt; 1);</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    groups-&gt;emplace_back(it, it_group_end);</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    it = it_group_end;  <span class="comment">// Continue with the next group.</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;  }</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Grouped modular args in &quot;</span> &lt;&lt; groups-&gt;size() &lt;&lt; <span class="stringliteral">&quot; group(s).&quot;</span>;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;  assert(!groups-&gt;empty());</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;}</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div><div class="line"><a name="l01041"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#affe78b1e830afb73585affe0ada477be"> 1041</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#affe78b1e830afb73585affe0ada477be">Preprocessor::CreateNewModules</a>(</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate,</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;&amp; modular_args,</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::vector&lt;std::pair&lt;int, NodePtr&gt;&gt;&gt;&amp; groups) noexcept {</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;  <span class="keywordflow">if</span> (modular_args.empty())</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;  assert(modular_args.size() &gt; 1);</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;  assert(!groups.empty());</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;  <span class="keywordflow">if</span> (modular_args.size() == gate-&gt;args().size() &amp;&amp; groups.size() == 1) {</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    assert(gate-&gt;module());</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;  }</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> main_arg;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;  <span class="keywordflow">if</span> (modular_args.size() == gate-&gt;args().size()) {</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    assert(groups.size() &gt; 1);</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    assert(gate-&gt;module());</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    main_arg = gate;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    main_arg = CreateNewModule(gate, modular_args);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    assert(main_arg);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;  }</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; group : groups) {</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    CreateNewModule(main_arg, group);</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;  }</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;}</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;</div><div class="line"><a name="l01068"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#af4dae5abf76e5da8b8c9f4371550b7dc"> 1068</a></span>&#160;std::vector&lt;GateWeakPtr&gt; <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#af4dae5abf76e5da8b8c9f4371550b7dc">Preprocessor::GatherModules</a>() noexcept {</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;  <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root = graph_-&gt;root();</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;  assert(!root-&gt;mark());</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;  assert(root-&gt;module());</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;  root-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;  std::vector&lt;GateWeakPtr&gt; modules;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;  modules.push_back(root);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;  std::queue&lt;Gate*&gt; gates_queue;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;  gates_queue.push(root.get());</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;  <span class="keywordflow">while</span> (!gates_queue.empty()) {</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* gate = gates_queue.front();</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    gates_queue.pop();</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    assert(gate-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">mark</a>());</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;      <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;      assert(!arg_gate-&gt;constant());</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;      <span class="keywordflow">if</span> (arg_gate-&gt;mark())</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;      arg_gate-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">mark</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;      gates_queue.push(arg_gate.get());</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;      <span class="keywordflow">if</span> (arg_gate-&gt;module())</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;        modules.push_back(arg_gate);</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    }</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;  }</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;  <span class="keywordflow">return</span> modules;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;}</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;</div><div class="line"><a name="l01096"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ab97a52e27ad8bf7ed049ae1a764f8fba"> 1096</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ab97a52e27ad8bf7ed049ae1a764f8fba">Preprocessor::MergeCommonArgs</a>() noexcept {</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Merging common arguments&quot;</span>);</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Merging common arguments for AND gates...&quot;</span>;</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;  changed |= MergeCommonArgs(kAnd);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Finished merging for AND gates!&quot;</span>;</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Merging common arguments for OR gates...&quot;</span>;</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;  changed |= MergeCommonArgs(kOr);</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Finished merging for OR gates!&quot;</span>;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;}</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;</div><div class="line"><a name="l01113"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a651b32816243e37c58b7835220997ef2"> 1113</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ab97a52e27ad8bf7ed049ae1a764f8fba">Preprocessor::MergeCommonArgs</a>(<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>) noexcept {</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;  assert(<a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a> == kAnd || <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a> == kOr);</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;  graph_-&gt;Clear&lt;Pdag::kCount&gt;();</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;  <span class="comment">// Gather and group gates</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;  <span class="comment">// by their operator types and common arguments.</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;  MarkCommonArgs(graph_-&gt;root(), <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>);</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;  std::vector&lt;GateWeakPtr&gt; modules = GatherModules();</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Working with &quot;</span> &lt;&lt; modules.size() &lt;&lt; <span class="stringliteral">&quot; modules...&quot;</span>;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; module : modules) {</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    <span class="keywordflow">if</span> (module.expired())</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> root = module.lock();</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> candidates;</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    GatherCommonArgs(root, <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>, &amp;candidates);</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;(root);</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keywordflow">if</span> (candidates.size() &lt; 2)</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    FilterMergeCandidates(&amp;candidates);</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keywordflow">if</span> (candidates.size() &lt; 2)</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    std::vector&lt;MergeTable::Candidates&gt; groups;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    GroupCandidatesByArgs(&amp;candidates, &amp;groups);</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; group : groups) {</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;      <span class="comment">// Finding common parents for the common arguments.</span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> parents;</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;      GroupCommonParents(2, group, &amp;parents);</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;      <span class="keywordflow">if</span> (parents.empty())</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// No candidates for merging.</span></div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;      changed = <span class="keyword">true</span>;</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;      <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Merging &quot;</span> &lt;&lt; parents.size() &lt;&lt; <span class="stringliteral">&quot; collection...&quot;</span>;</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a> table;</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;      GroupCommonArgs(parents, &amp;table);</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;      <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Transforming &quot;</span> &lt;&lt; table.<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">groups</a>.size()</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                  &lt;&lt; <span class="stringliteral">&quot; table groups...&quot;</span>;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>&amp; member_group : table.<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">groups</a>) {</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        TransformCommonArgs(&amp;member_group);</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;      }</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    }</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;  }</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;}</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;</div><div class="line"><a name="l01160"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a13778626bd9ce007e01b7bbd8d11e850"> 1160</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a13778626bd9ce007e01b7bbd8d11e850">Preprocessor::MarkCommonArgs</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>) noexcept {</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;  <span class="keywordtype">bool</span> in_group = gate-&gt;type() == <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    assert(!arg_gate-&gt;constant());</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    MarkCommonArgs(arg_gate, <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>);</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordflow">if</span> (in_group)</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;      arg_gate-&gt;AddCount(arg.first &gt; 0);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;  }</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;  <span class="keywordflow">if</span> (!in_group)</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// No need to visit leaf variables.</span></div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    arg.second-&gt;AddCount(arg.first &gt; 0);</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;  }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;}</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div><div class="line"><a name="l01184"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aef197badfb47bb3c604fd93d6260e635"> 1184</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aef197badfb47bb3c604fd93d6260e635">Preprocessor::GatherCommonArgs</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>,</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                                    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a>* group) noexcept {</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;  <span class="keywordtype">bool</span> in_group = gate-&gt;type() == <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>;</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;  std::vector&lt;int&gt; common_args;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    assert(!arg_gate-&gt;constant());</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="keywordflow">if</span> (!arg_gate-&gt;module())</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;      GatherCommonArgs(arg_gate, <a class="code" href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>, group);</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    <span class="keywordflow">if</span> (!in_group)</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="keywordtype">int</span> count = arg.first &gt; 0 ? arg_gate-&gt;pos_count() : arg_gate-&gt;neg_count();</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="keywordflow">if</span> (count &gt; 1)</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;      common_args.push_back(arg.first);</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;  }</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;  <span class="keywordflow">if</span> (!in_group)</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// No need to check variables.</span></div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a>&amp; var = arg.second;</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    <span class="keywordtype">int</span> count = arg.first &gt; 0 ? var-&gt;pos_count() : var-&gt;neg_count();</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <span class="keywordflow">if</span> (count &gt; 1)</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;      common_args.push_back(arg.first);</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;  }</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;  <span class="keywordflow">if</span> (common_args.size() &lt; 2)</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// Can&#39;t be merged anyway.</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;  boost::sort(common_args);  <span class="comment">// Unique and stable.</span></div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;  group-&gt;emplace_back(gate, common_args);</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;}</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aba011f495cdec8449a315c17fe67a8c0"> 1223</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aba011f495cdec8449a315c17fe67a8c0">Preprocessor::FilterMergeCandidates</a>(</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a>* candidates) noexcept {</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;  assert(candidates-&gt;size() &gt; 1);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;  boost::stable_sort(*candidates, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a9d27b5fb5a457a3e1a3d85c7748e98b3">MergeTable::Candidate</a>&amp; lhs,</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a9d27b5fb5a457a3e1a3d85c7748e98b3">MergeTable::Candidate</a>&amp; rhs) {</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    <span class="keywordflow">return</span> lhs.second.size() &lt; rhs.second.size();</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;  });</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;  <span class="keywordtype">bool</span> cleanup = <span class="keyword">false</span>;  <span class="comment">// Clean constant or NULL type gates.</span></div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = candidates-&gt;begin(); it != candidates-&gt;end(); ++it) {</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate = it-&gt;first;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; common_args = it-&gt;second;</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;args().size() == 1)</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;constant())</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="keywordflow">if</span> (common_args.size() &lt; 2)</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;args().size() != common_args.size())</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Not perfect.</span></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="keyword">auto</span> it_next = it;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keywordflow">for</span> (++it_next; it_next != candidates-&gt;end(); ++it_next) {</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;      <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; comp_gate = it_next-&gt;first;</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; comp_args = it_next-&gt;second;</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;      <span class="keywordflow">if</span> (comp_args.size() &lt; common_args.size())</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// Changed gate.</span></div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;      assert(!comp_gate-&gt;constant());</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;      <span class="keywordflow">if</span> (!boost::includes(comp_args, common_args))</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a> diff;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;      boost::set_difference(comp_args, common_args, std::back_inserter(diff));</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;      diff.push_back(gate-&gt;index());</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;      diff.erase(boost::unique(boost::sort(diff)).<a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>(), diff.end());</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;      comp_args = std::move(diff);</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : common_args)</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        comp_gate-&gt;EraseArg(index);</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;      comp_gate-&gt;AddArg(gate);</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;      <span class="keywordflow">if</span> (comp_gate-&gt;constant()) {  <span class="comment">// Complement of gate is arg.</span></div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;        comp_args.clear();</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        cleanup = <span class="keyword">true</span>;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comp_gate-&gt;args().size() == 1) {  <span class="comment">// Perfect substitution.</span></div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        comp_gate-&gt;type(kNull);</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        assert(comp_args.size() == 1);</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        cleanup = <span class="keyword">true</span>;</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (comp_args.size() == 1) {</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        cleanup = <span class="keyword">true</span>;</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;      }</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    }</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;  }</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;  <span class="keywordflow">if</span> (!cleanup)</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;  boost::remove_erase_if(*candidates, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a9d27b5fb5a457a3e1a3d85c7748e98b3">MergeTable::Candidate</a>&amp; mem) {</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <span class="keywordflow">return</span> mem.first-&gt;constant() || mem.first-&gt;type() == kNull ||</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;           mem.second.size() == 1;</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;  });</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;}</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;</div><div class="line"><a name="l01280"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#adabd895d60a8ee0950f75da9a98fa155"> 1280</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#adabd895d60a8ee0950f75da9a98fa155">Preprocessor::GroupCandidatesByArgs</a>(</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a>* candidates,</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    std::vector&lt;MergeTable::Candidates&gt;* groups) noexcept {</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;  <span class="keywordflow">if</span> (candidates-&gt;empty())</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;  assert(candidates-&gt;size() &gt; 1);</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;  assert(groups-&gt;empty());</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;  <span class="comment">// Group candidates by the intersection of their [min_arg, max_arg] ranges.</span></div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;  boost::sort(*candidates, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a9d27b5fb5a457a3e1a3d85c7748e98b3">MergeTable::Candidate</a>&amp; lhs_candidate,</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                              <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a9d27b5fb5a457a3e1a3d85c7748e98b3">MergeTable::Candidate</a>&amp; rhs_candidate) {</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; lhs_args = lhs_candidate.second;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; rhs_args = rhs_candidate.second;</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <span class="keywordflow">if</span> (lhs_args.back() &lt; rhs_args.front())</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <span class="keywordflow">if</span> (lhs_args.front() &gt; rhs_args.back())</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    <span class="comment">// Considering the intersection.</span></div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <span class="keywordflow">if</span> (lhs_args.back() &lt; rhs_args.back())</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="keywordflow">if</span> (lhs_args.back() &gt; rhs_args.back())</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <span class="keywordflow">return</span> lhs_args.front() &gt; rhs_args.front();</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;  });</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;  std::vector&lt;std::list&lt;MergeTable::Candidate*&gt;&gt; super_groups;</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = candidates-&gt;rbegin(), it_end = candidates-&gt;rend();</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;       it != it_end;) {</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    <span class="keywordtype">int</span> min_time = it-&gt;second.front();</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    std::list&lt;MergeTable::Candidate*&gt; super_group = {&amp;*it};</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <span class="keywordflow">for</span> (++it; it != it_end &amp;&amp; min_time &lt;= it-&gt;second.back(); ++it) {</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;      min_time = std::min(min_time, it-&gt;second.front());</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;      super_group.push_back(&amp;*it);</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    }</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    super_groups.emplace_back(std::move(super_group));</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;  }</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; super_group : super_groups) {</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <span class="keywordflow">while</span> (!super_group.empty()) {</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> group;</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;      <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; common_args = super_group.front()-&gt;second;</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;      std::set&lt;int&gt; group_args(common_args.begin(), common_args.end());</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;      assert(group_args.size() &gt; 1);</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;      group.push_back(*super_group.front());</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;      super_group.pop_front();</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;      <span class="keywordtype">int</span> prev_size = 0;  <span class="comment">// To track the change in group arguments.</span></div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;      <span class="keywordflow">while</span> (prev_size &lt; group_args.size()) {</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;        prev_size = group_args.size();</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = super_group.begin(); it != super_group.end();) {</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;          <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; member_args = (*it)-&gt;second;</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;          <span class="keywordflow">if</span> (ext::intersects(member_args, group_args)) {</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;            group.push_back(**it);</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;            group_args.insert(member_args.begin(), member_args.end());</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;            it = super_group.erase(it);</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;          } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;            ++it;</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;          }</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        }</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;      }</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;      <span class="keywordflow">if</span> (group.size() &gt; 1)</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;        groups-&gt;emplace_back(std::move(group));</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    }</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;  }</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>, !groups-&gt;empty())</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;      &lt;&lt; <span class="stringliteral">&quot;Grouped merge candidates in &quot;</span> &lt;&lt; groups-&gt;size() &lt;&lt; <span class="stringliteral">&quot; group(s).&quot;</span>;</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;}</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;</div><div class="line"><a name="l01347"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#af9b5fba2247a02afe6cf480a405b6ca0"> 1347</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#af9b5fba2247a02afe6cf480a405b6ca0">Preprocessor::GroupCommonParents</a>(</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <span class="keywordtype">int</span> num_common_args, <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a>&amp; group,</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a>* parents) noexcept {</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; group.size(); ++i) {</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; args_gate = group[i].second;</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    assert(args_gate.size() &gt; 1);</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <span class="keywordtype">int</span> j = i;</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <span class="keywordflow">for</span> (++j; j &lt; group.size(); ++j) {</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt;&amp; args_comp = group[j].second;</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;      assert(args_comp.size() &gt; 1);</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;      std::vector&lt;int&gt; common;</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;      boost::set_intersection(args_gate, args_comp, std::back_inserter(common));</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;      <span class="keywordflow">if</span> (common.size() &lt; num_common_args)</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// Doesn&#39;t satisfy.</span></div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; common_parents = (*parents)[common];</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;      common_parents.insert(group[i].first);</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;      common_parents.insert(group[j].first);</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    }</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;  }</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;}</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a4f35278c0542722dc42cc74358522a64"> 1369</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4f35278c0542722dc42cc74358522a64">Preprocessor::GroupCommonArgs</a>(<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a>&amp; options,</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                                   <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a>* table) noexcept {</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;  assert(!options.empty());</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;  <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> all_options(options.begin(), options.end());</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;  boost::stable_sort(all_options, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; lhs,</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; rhs) {</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <span class="keywordflow">return</span> lhs.first.size() &lt; rhs.first.size();</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;  });</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;  <span class="keywordflow">while</span> (!all_options.empty()) {</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">MergeTable::OptionGroup</a> best_group;</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    FindOptionGroup(&amp;all_options, &amp;best_group);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    assert(!best_group.empty());</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> merge_group;  <span class="comment">// The group to go into the table.</span></div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>* member : best_group) {</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;      merge_group.push_back(*member);</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;      member-&gt;second.clear();  <span class="comment">// To remove the best group from the all options.</span></div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    }</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    table-&gt;groups.push_back(merge_group);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a> = merge_group.front().second;<span class="comment"></span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;<span class="comment">    /// @todo This strategy deletes too many groups.</span></div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="comment">    ///       The intersections must be considered for each option.</span></div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="comment"></span>    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; args = merge_group.back().first;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; option : all_options) {</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;      <span class="keywordflow">if</span> (!ext::intersects(option.first, args))</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// Doesn&#39;t affect this option.</span></div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; parents = option.second;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate : gates)</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;        parents.erase(gate);</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    }</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    boost::remove_erase_if(all_options, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; option) {</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;      <span class="keywordflow">return</span> option.second.size() &lt; 2;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    });</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;  }</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;}</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;</div><div class="line"><a name="l01406"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a3c51e098f0ff45be068f68296323f45f"> 1406</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a3c51e098f0ff45be068f68296323f45f">Preprocessor::FindOptionGroup</a>(</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>* all_options,</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">MergeTable::OptionGroup</a>* best_group) noexcept {</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;  assert(best_group-&gt;empty());</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;  <span class="comment">// Find the best starting option.</span></div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;  MergeTable::MergeGroup::iterator best_option;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;  FindBaseOption(all_options, &amp;best_option);</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;  <span class="keywordtype">bool</span> best_is_found = best_option != all_options-&gt;end();</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;  <span class="keyword">auto</span> it = best_is_found ? best_option : all_options-&gt;begin();</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;  <span class="keywordflow">for</span> (; it != all_options-&gt;end(); ++it) {</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">MergeTable::OptionGroup</a> group = {&amp;*it};</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <span class="keyword">auto</span> it_next = it;</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <span class="keywordflow">for</span> (++it_next; it_next != all_options-&gt;end(); ++it_next) {</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>* candidate = &amp;*it_next;</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;      <span class="keywordtype">bool</span> superset = boost::includes(candidate-&gt;first, group.back()-&gt;first);</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;      <span class="keywordflow">if</span> (!superset)</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// Does not include all the arguments.</span></div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;      <span class="keywordtype">bool</span> parents = boost::includes(group.back()-&gt;second, candidate-&gt;second);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;      <span class="keywordflow">if</span> (!parents)</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// Parents do not match.</span></div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;      group.push_back(candidate);</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    }</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <span class="keywordflow">if</span> (group.size() &gt; best_group-&gt;size()) {  <span class="comment">// The more members, the merrier.</span></div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;      *best_group = group;</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (group.size() == best_group-&gt;size()) {  <span class="comment">// Optimistic choice.</span></div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;      <span class="keywordflow">if</span> (group.front()-&gt;second.size() &lt; best_group-&gt;front()-&gt;second.size())</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        *best_group = group;  <span class="comment">// The fewer parents, the more room for others.</span></div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    }</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <span class="keywordflow">if</span> (best_is_found)</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;  }</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;}</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;</div><div class="line"><a name="l01439"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#adbaee2a993e0538280dc437d0a3b849f"> 1439</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#adbaee2a993e0538280dc437d0a3b849f">Preprocessor::FindBaseOption</a>(</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>* all_options,</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    MergeTable::MergeGroup::iterator* best_option) noexcept {</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;  *best_option = all_options-&gt;end();</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;  std::array&lt;int, 3&gt; best_counts{};  <span class="comment">// The number of extra parents.</span></div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = all_options-&gt;begin(); it != all_options-&gt;end(); ++it) {</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    <span class="keywordtype">int</span> num_parents = it-&gt;second.size();</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; parent = *it-&gt;second.begin();  <span class="comment">// Representative.</span></div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; args = it-&gt;first;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    std::array&lt;int, 3&gt; cur_counts{};</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : args) {</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;      <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a> arg = parent-&gt;GetArg(index);</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;      <span class="keywordtype">int</span> extra_count = arg-&gt;parents().size() - num_parents;</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;      <span class="keywordflow">if</span> (extra_count &gt; 2)</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// Optimal decision criterion.</span></div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;      ++cur_counts[extra_count];  <span class="comment">// Logging extra parents.</span></div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;      <span class="keywordflow">if</span> (cur_counts[0] &gt; 1)</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;        <span class="keywordflow">break</span>;  <span class="comment">// Modular option is found.</span></div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    }</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="keywordflow">if</span> (cur_counts[0] &gt; 1) {  <span class="comment">// Special case of modular options.</span></div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;      *best_option = it;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    }</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <span class="keywordflow">if</span> ((cur_counts[0] &gt; best_counts[0]) ||</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;        (cur_counts[0] == best_counts[0] &amp;&amp; cur_counts[1] &gt; best_counts[1]) ||</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        (cur_counts[0] == best_counts[0] &amp;&amp; cur_counts[1] == best_counts[1] &amp;&amp;</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;         cur_counts[2] &gt; best_counts[2])) {</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;      *best_option = it;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;      best_counts = cur_counts;</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    }</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;  }</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;}</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div><div class="line"><a name="l01472"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#acf534fb9d9510d712a78cb5d27572ec1"> 1472</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#acf534fb9d9510d712a78cb5d27572ec1">Preprocessor::TransformCommonArgs</a>(<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>* group) noexcept {</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;  MergeTable::MergeGroup::iterator it;</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;  <span class="keywordflow">for</span> (it = group-&gt;begin(); it != group-&gt;end(); ++it) {</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; common_parents = it-&gt;second;</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; common_args = it-&gt;first;</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    assert(common_parents.size() &gt; 1);</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    assert(common_args.size() &gt; 1);</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Merging &quot;</span> &lt;&lt; common_args.size() &lt;&lt; <span class="stringliteral">&quot; args into a new gate&quot;</span>;</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;The number of common parents: &quot;</span> &lt;&lt; common_parents.size();</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; parent = *common_parents.begin();  <span class="comment">// To get the arguments.</span></div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    assert(parent-&gt;args().size() &gt; 1);</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    <span class="keyword">auto</span> merge_gate = std::make_shared&lt;Gate&gt;(parent-&gt;type(), graph_);</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : common_args) {</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;      parent-&gt;ShareArg(index, merge_gate);</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; common_parent : common_parents) {</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        common_parent-&gt;EraseArg(index);</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;      }</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    }</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; common_parent : common_parents) {</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;      common_parent-&gt;AddArg(merge_gate);</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;      <span class="keywordflow">if</span> (common_parent-&gt;args().size() == 1) {</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;        common_parent-&gt;type(kNull);  <span class="comment">// Assumes AND/OR gates only.</span></div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;      }</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;      assert(!common_parent-&gt;constant());</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    }</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="comment">// Substitute args in superset common args with the new gate.</span></div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    MergeTable::MergeGroup::iterator it_rest = it;</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordflow">for</span> (++it_rest; it_rest != group-&gt;end(); ++it_rest) {</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; set_args = it_rest-&gt;first;</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;      assert(set_args.size() &gt; common_args.size());</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;      <span class="comment">// Note: it is assumed that common_args is a proper subset of set_args.</span></div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;      std::vector&lt;int&gt; diff;</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;      boost::set_difference(set_args, common_args, std::back_inserter(diff));</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;      assert(diff.size() == (set_args.size() - common_args.size()));</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;      assert(merge_gate-&gt;index() &gt; diff.back());</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;      diff.push_back(merge_gate-&gt;index());  <span class="comment">// Assumes sequential indexing.</span></div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;      set_args = diff;</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;      assert(it_rest-&gt;first.size() == diff.size());</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    }</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;  }</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;}</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div><div class="line"><a name="l01515"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a4737f354474154b3cea9773c25616d27"> 1515</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4737f354474154b3cea9773c25616d27">Preprocessor::DetectDistributivity</a>() noexcept {</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Processing Distributivity&quot;</span>);</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;  <span class="keywordtype">bool</span> changed = DetectDistributivity(graph_-&gt;root());</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;  assert(!graph_-&gt;HasConstants());</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;  graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;}</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;</div><div class="line"><a name="l01525"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a79fe8e90f0e8fbc20a76610aaf09fe6e"> 1525</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4737f354474154b3cea9773c25616d27">Preprocessor::DetectDistributivity</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;  <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> distr_type = kNull;  <span class="comment">// Implicit flag of no operation!</span></div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;  <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;      distr_type = kOr;</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;      distr_type = kAnd;</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;      distr_type = kNull;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;  }</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;  std::vector&lt;GatePtr&gt; candidates;</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;  <span class="comment">// Collect child gates of distributivity type.</span></div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; child_gate = arg.second;</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    changed |= DetectDistributivity(child_gate);</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    assert(!child_gate-&gt;constant() &amp;&amp; <span class="stringliteral">&quot;Impossible state.&quot;</span>);</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keywordflow">if</span> (distr_type == kNull)</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Distributivity is not possible.</span></div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    <span class="keywordflow">if</span> (arg.first &lt; 0)</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Does not work on negation.</span></div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <span class="keywordflow">if</span> (child_gate-&gt;module())</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Can&#39;t have common arguments.</span></div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    <span class="keywordflow">if</span> (child_gate-&gt;type() == distr_type)</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;      candidates.push_back(child_gate);</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;  }</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;  changed |= HandleDistributiveArgs(gate, distr_type, &amp;candidates);</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;}</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;</div><div class="line"><a name="l01563"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a4b29173b8f6d18031d7a8cacbac15ce1"> 1563</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4b29173b8f6d18031d7a8cacbac15ce1">Preprocessor::HandleDistributiveArgs</a>(</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> distr_type,</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    std::vector&lt;GatePtr&gt;* candidates) noexcept {</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;  <span class="keywordflow">if</span> (candidates-&gt;empty())</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;  assert(gate-&gt;args().size() &gt; 1 &amp;&amp; <span class="stringliteral">&quot;Malformed parent gate.&quot;</span>);</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;  assert(distr_type == kAnd || distr_type == kOr);</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;  <span class="keywordtype">bool</span> changed = FilterDistributiveArgs(gate, candidates);</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;  <span class="keywordflow">if</span> (candidates-&gt;size() &lt; 2)</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;  <span class="comment">// Detecting a combination</span></div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;  <span class="comment">// that gives the most optimization is combinatorial.</span></div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;  <span class="comment">// The problem is similar to merging common arguments of gates.</span></div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;  <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">MergeTable::Candidates</a> all_candidates;</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; candidate : *candidates) {</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    all_candidates.emplace_back(</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;        candidate,</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;        std::vector&lt;int&gt;(candidate-&gt;args().begin(), candidate-&gt;args().end()));</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;  }</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Considering &quot;</span> &lt;&lt; all_candidates.size() &lt;&lt; <span class="stringliteral">&quot; candidates...&quot;</span>;</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;  <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a> options;</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;  GroupCommonParents(1, all_candidates, &amp;options);</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;  <span class="keywordflow">if</span> (options.empty())</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Got &quot;</span> &lt;&lt; options.size() &lt;&lt; <span class="stringliteral">&quot; distributive option(s).&quot;</span>;</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;  <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a> table;</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;  GroupDistributiveArgs(options, &amp;table);</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;  assert(!table.<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">groups</a>.empty());</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Found &quot;</span> &lt;&lt; table.<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">groups</a>.size() &lt;&lt; <span class="stringliteral">&quot; distributive group(s).&quot;</span>;</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;  <span class="comment">// Sanitize the table with single parent gates only.</span></div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>&amp; group : table.<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">groups</a>) {</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; base_option = group.front();</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    std::vector&lt;std::pair&lt;GatePtr, GatePtr&gt;&gt; to_swap;</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; member : base_option.second) {</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;      assert(!member-&gt;parents().empty());</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;      <span class="keywordflow">if</span> (member-&gt;parents().size() &gt; 1) {</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;        <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> clone = member-&gt;Clone();</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;        clone-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;        to_swap.emplace_back(member, clone);</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;      }</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    }</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a> : to_swap) {</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;      gate-&gt;EraseArg(<a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>.first-&gt;index());</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;      gate-&gt;AddArg(<a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>.second);</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; option : group) {</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;        <span class="keywordflow">if</span> (option.second.erase(<a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>.first)) {</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;          option.second.insert(<a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>.second);</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;        }</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;      }</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    }</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;  }</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>&amp; group : table.<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">groups</a>) {</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    TransformDistributiveArgs(gate, distr_type, &amp;group);</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;  }</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;  assert(!gate-&gt;args().empty());</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;}</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;</div><div class="line"><a name="l01623"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a29d3775965ee487d000591739fdbaa4b"> 1623</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a29d3775965ee487d000591739fdbaa4b">Preprocessor::FilterDistributiveArgs</a>(</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, std::vector&lt;GatePtr&gt;* candidates) noexcept {</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;  assert(!candidates-&gt;empty());</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;  <span class="comment">// Handling a special case of fast constant propagation.</span></div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;  std::vector&lt;int&gt; to_erase;  <span class="comment">// Late erase for more opportunities.</span></div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; candidate : *candidates) {  <span class="comment">// All of them are positive.</span></div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;    <span class="keywordflow">if</span> (ext::intersects(candidate-&gt;args(), gate-&gt;args()))</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;      to_erase.push_back(candidate-&gt;index());</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;  }</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;  <span class="keywordtype">bool</span> changed = !to_erase.empty();</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;  boost::remove_erase_if(*candidates, [&amp;to_erase](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; candidate) {</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    <span class="keywordflow">return</span> boost::find(to_erase, candidate-&gt;index()) != to_erase.end();</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;  });</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : to_erase)</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    gate-&gt;EraseArg(index);</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;  <span class="comment">// Sort in descending size of gate arguments.</span></div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;  boost::sort(*candidates, [](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> rhs) {</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <span class="keywordflow">return</span> lhs-&gt;args().size() &gt; rhs-&gt;args().size();</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;  });</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;  std::vector&lt;GatePtr&gt; exclusive;  <span class="comment">// No candidate is a subset of another.</span></div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;  <span class="keywordflow">while</span> (!candidates-&gt;empty()) {</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> sub = std::move(candidates-&gt;back());</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    candidates-&gt;pop_back();</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;    exclusive.push_back(sub);</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; super : *candidates) {</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;      <span class="keywordflow">if</span> (boost::includes(super-&gt;args(), sub-&gt;args())) {</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        changed = <span class="keyword">true</span>;</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        gate-&gt;EraseArg(super-&gt;index());</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;      }</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    }</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;    boost::remove_erase_if(*candidates, [&amp;sub](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; super) {</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;      <span class="keywordflow">return</span> boost::includes(super-&gt;args(), sub-&gt;args());</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;    });</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;  }</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;  *candidates = std::move(exclusive);</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;  assert(!gate-&gt;args().empty());</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;args().size() == 1) {</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;      <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;        gate-&gt;type(kNull);</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;      <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;      <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;        gate-&gt;type(kNot);</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        assert(<span class="keyword">false</span>);</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;    }</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;  }</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;}</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;</div><div class="line"><a name="l01678"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a51340a3bcfa9785e430bab27ee08bbbf"> 1678</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a51340a3bcfa9785e430bab27ee08bbbf">Preprocessor::GroupDistributiveArgs</a>(<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">MergeTable::Collection</a>&amp; options,</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;                                         <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">MergeTable</a>* table) noexcept {</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;  assert(!options.empty());</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;  <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> all_options(options.begin(), options.end());</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;  boost::stable_sort(all_options, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; lhs,</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; rhs) {</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    <span class="keywordflow">return</span> lhs.first.size() &lt; rhs.first.size();</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;  });</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;  <span class="keywordflow">while</span> (!all_options.empty()) {</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">MergeTable::OptionGroup</a> best_group;</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    FindOptionGroup(&amp;all_options, &amp;best_group);</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a> merge_group;  <span class="comment">// The group to go into the table.</span></div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>* member : best_group) {</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;      merge_group.push_back(*member);</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;      member-&gt;second.clear();  <span class="comment">// To remove the best group from the all options.</span></div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    }</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;    table-&gt;groups.push_back(merge_group);</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a> = merge_group.front().second;</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; option : all_options) {</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;      <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; parents = option.second;</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate : gates)</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        parents.erase(gate);</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    }</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    boost::remove_erase_if(all_options, [](<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; option) {</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;      <span class="keywordflow">return</span> option.second.size() &lt; 2;</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    });</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;  }</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;}</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;</div><div class="line"><a name="l01709"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a2557ab80c04d7f91372992edfbedd93a"> 1709</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a2557ab80c04d7f91372992edfbedd93a">Preprocessor::TransformDistributiveArgs</a>(</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> distr_type,</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">MergeTable::MergeGroup</a>* group) noexcept {</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;  <span class="keywordflow">if</span> (group-&gt;empty())</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;  assert(distr_type == kAnd || distr_type == kOr);</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;  <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; base_option = group-&gt;front();</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;  <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; args = base_option.first;</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;  <span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">MergeTable::CommonParents</a>&amp; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a> = base_option.second;</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> new_parent;</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;args().size() == gates.size()) {</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    new_parent = gate;  <span class="comment">// Reuse the gate to avoid extra merging operations.</span></div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;      <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;        gate-&gt;type(distr_type);</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;      <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;        gate-&gt;type(kNor);</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;      <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;        gate-&gt;type(kNand);</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;        assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Gate is not suited for distributive operations.&quot;</span>);</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    }</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;    new_parent = std::make_shared&lt;Gate&gt;(distr_type, graph_);</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    new_parent-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    gate-&gt;AddArg(new_parent);</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;  }</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;  <span class="keyword">auto</span> sub_parent =</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;      std::make_shared&lt;Gate&gt;(distr_type == kAnd ? kOr : kAnd, graph_);</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;  sub_parent-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;  new_parent-&gt;AddArg(sub_parent);</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;  <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; rep = *gates.begin();  <span class="comment">// Representative of common parents.</span></div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;  <span class="comment">// Getting the common part of the distributive equation.</span></div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : args)</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    rep-&gt;ShareArg(index, new_parent);  <span class="comment">// May be negative.</span></div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;  <span class="comment">// Removing the common part from the sub-equations.</span></div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; member : gates) {</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;    assert(member-&gt;parents().size() == 1);</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;    gate-&gt;EraseArg(member-&gt;index());</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;</div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    sub_parent-&gt;AddArg(member);</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index : args)</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;      member-&gt;EraseArg(index);</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    assert(!member-&gt;args().empty());  <span class="comment">// Assumes that filtering is done.</span></div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    <span class="keywordflow">if</span> (member-&gt;args().size() == 1) {</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;      member-&gt;type(kNull);</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    }</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;  }</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;  <span class="comment">// Cleaning the arguments from the group.</span></div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = std::next(group-&gt;begin()); it != group-&gt;end(); ++it) {</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">MergeTable::Option</a>&amp; super = *it;</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    <a class="code" href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">MergeTable::CommonArgs</a>&amp; super_args = super.first;</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    boost::remove_erase_if(super_args, [&amp;args](<span class="keywordtype">int</span> index) {</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;      <span class="keywordflow">return</span> boost::binary_search(args, index);</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;    });</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;  }</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;  group-&gt;erase(group-&gt;begin());</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;  TransformDistributiveArgs(sub_parent, distr_type, group);</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;}</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;</div><div class="line"><a name="l01778"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aebc709ad2e097c24e837889a6a9e4696"> 1778</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aebc709ad2e097c24e837889a6a9e4696">Preprocessor::BooleanOptimization</a>() noexcept {</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Boolean optimization&quot;</span>);</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;  graph_-&gt;Clear&lt;Pdag::kOptiValue&gt;();</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;  graph_-&gt;Clear&lt;Pdag::kDescendant&gt;();</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;  <span class="keywordflow">if</span> (graph_-&gt;root()-&gt;module() == <span class="keyword">false</span>)</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;    graph_-&gt;root()-&gt;module(<span class="keyword">true</span>);</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;  std::vector&lt;GateWeakPtr&gt; common_gates;</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;  std::vector&lt;std::weak_ptr&lt;Variable&gt;&gt; common_variables;</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;  GatherCommonNodes(&amp;common_gates, &amp;common_variables);</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; gate : common_gates)</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    ProcessCommonNode(gate);</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; var : common_variables)</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;    ProcessCommonNode(var);</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;}</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;</div><div class="line"><a name="l01796"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a394fb1b5b5f9ee31dc81ad8d64353ee3"> 1796</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a394fb1b5b5f9ee31dc81ad8d64353ee3">Preprocessor::GatherCommonNodes</a>(</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;    std::vector&lt;GateWeakPtr&gt;* common_gates,</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;    std::vector&lt;std::weak_ptr&lt;Variable&gt;&gt;* common_variables) noexcept {</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">Pdag::kVisit</a>&gt;();</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;  std::queue&lt;Gate*&gt; gates_queue;</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;  gates_queue.push(graph_-&gt;root().get());</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;  <span class="keywordflow">while</span> (!gates_queue.empty()) {</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* gate = gates_queue.front();</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    gates_queue.pop();</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;      <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;      assert(!arg_gate-&gt;constant());</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;      <span class="keywordflow">if</span> (arg_gate-&gt;Visited())</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;      arg_gate-&gt;<a class="code" href="classscram_1_1core_1_1Node.xhtml#a54799feee1f1e91f848d11f3918e3e88">Visit</a>(1);</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;      gates_queue.push(arg_gate.get());</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;      <span class="keywordflow">if</span> (arg_gate-&gt;parents().size() &gt; 1)</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;        common_gates-&gt;push_back(arg_gate);</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;    }</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;      <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a>&amp; var = arg.second;</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;      <span class="keywordflow">if</span> (var-&gt;Visited())</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;      var-&gt;Visit(1);</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;      <span class="keywordflow">if</span> (var-&gt;parents().size() &gt; 1)</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;        common_variables-&gt;push_back(var);</div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;    }</div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;  }</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;}</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> N&gt;</div><div class="line"><a name="l01827"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a4086c57695d49b4770915d5d53bd47de"> 1827</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4086c57695d49b4770915d5d53bd47de">Preprocessor::ProcessCommonNode</a>(</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;    <span class="keyword">const</span> std::weak_ptr&lt;N&gt;&amp; common_node) noexcept {</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;  <span class="keywordflow">if</span> (common_node.expired())</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// The node has been deleted.</span></div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;  std::shared_ptr&lt;N&gt; node = common_node.lock();</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;  <span class="keywordflow">if</span> (node-&gt;parents().size() == 1)</div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// The extra parent is deleted.</span></div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;  <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> root;</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;  MarkAncestors(node, &amp;root);</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;  assert(root &amp;&amp; <span class="stringliteral">&quot;Marking ancestors ended without guaranteed module.&quot;</span>);</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;  assert(root-&gt;mark() &amp;&amp; <span class="stringliteral">&quot;Graph gate marks are not cleaned.&quot;</span>);</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;  assert(!root-&gt;opti_value() &amp;&amp; <span class="stringliteral">&quot;Optimization values are corrupted.&quot;</span>);</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;  assert(!node-&gt;opti_value() &amp;&amp; <span class="stringliteral">&quot;Optimization values are corrupted.&quot;</span>);</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;  node-&gt;opti_value(1);  <span class="comment">// Setting for failure.</span></div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;  <span class="keywordtype">int</span> mult_tot = node-&gt;parents().size();  <span class="comment">// Total multiplicity.</span></div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;  assert(mult_tot &gt; 1);</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;  mult_tot += PropagateState(root, node);</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;  assert(!root-&gt;mark() &amp;&amp; <span class="stringliteral">&quot;Partial unmarking failed.&quot;</span>);</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;  assert(root-&gt;descendant() == node-&gt;index() &amp;&amp; <span class="stringliteral">&quot;Ancestors are not indexed.&quot;</span>);</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;  <span class="comment">// The results of the failure propagation.</span></div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;  std::unordered_map&lt;int, GateWeakPtr&gt; destinations;</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;  <span class="keywordtype">int</span> num_dest = 0;  <span class="comment">// This is not the same as the size of destinations.</span></div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;  <span class="keywordflow">if</span> (root-&gt;opti_value()) {  <span class="comment">// The root gate received the state.</span></div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;    destinations.emplace(root-&gt;index(), root);</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    num_dest = 1;</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;    num_dest = CollectStateDestinations(root, node-&gt;index(), &amp;destinations);</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;  }</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;  <span class="keywordflow">if</span> (num_dest &gt; 0 &amp;&amp; num_dest &lt; mult_tot) {  <span class="comment">// Redundancy detection criterion.</span></div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    assert(!destinations.empty());</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    std::vector&lt;GateWeakPtr&gt; redundant_parents;</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    CollectRedundantParents(node, &amp;destinations, &amp;redundant_parents);</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    <span class="keywordflow">if</span> (!redundant_parents.empty()) {  <span class="comment">// Note: empty destinations is OK!</span></div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;      <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Node &quot;</span> &lt;&lt; node-&gt;index() &lt;&lt; <span class="stringliteral">&quot;: &quot;</span></div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;                  &lt;&lt; redundant_parents.size() &lt;&lt; <span class="stringliteral">&quot; redundant parent(s) and &quot;</span></div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;                  &lt;&lt; destinations.size() &lt;&lt; <span class="stringliteral">&quot; failure destination(s)&quot;</span>;</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;      ProcessRedundantParents(node, redundant_parents);</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;      ProcessStateDestinations(node, destinations);</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;    }</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;  }</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;  ClearStateMarks(root);</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;  node-&gt;opti_value(0);</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;  graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;}</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;</div><div class="line"><a name="l01878"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a3b83bc14261cee28f0e1553222b7d5e5"> 1878</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a3b83bc14261cee28f0e1553222b7d5e5">Preprocessor::MarkAncestors</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; node,</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;                                 <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>* module) noexcept {</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : node-&gt;parents()) {</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    assert(!member.second.expired());</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = member.second.lock();</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;    <span class="keywordflow">if</span> (parent-&gt;mark())</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    parent-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;    <span class="keywordflow">if</span> (parent-&gt;module()) {  <span class="comment">// Do not mark further than independent subgraph.</span></div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;      assert(!*module);</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;      *module = parent;</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;    }</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    MarkAncestors(parent, module);</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;  }</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;}</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;</div><div class="line"><a name="l01895"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ae9a8bac98061d7f82633486ed6a36861"> 1895</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ae9a8bac98061d7f82633486ed6a36861">Preprocessor::PropagateState</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate,</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; node) noexcept {</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;mark())</div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;  gate-&gt;mark(<span class="keyword">false</span>);  <span class="comment">// Cleaning up the marks of the ancestors.</span></div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;  assert(!gate-&gt;descendant() &amp;&amp; <span class="stringliteral">&quot;Descendant marks are corrupted.&quot;</span>);</div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;  gate-&gt;descendant(node-&gt;index());  <span class="comment">// Setting ancestorship mark.</span></div><div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;  assert(!gate-&gt;opti_value());</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;  <span class="keywordtype">int</span> mult_tot = 0;  <span class="comment">// The total multiplicity of the subgraph.</span></div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;  <span class="keywordtype">int</span> num_failure = 0;  <span class="comment">// The number of failed arguments.</span></div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;  <span class="keywordtype">int</span> num_success = 0;  <span class="comment">// The number of success arguments.</span></div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate = arg.second;</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;    mult_tot += PropagateState(arg_gate, node);</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;    assert(!arg_gate-&gt;mark());</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;    <span class="keywordtype">int</span> failed = arg_gate-&gt;opti_value() * boost::math::sign(arg.first);</div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;    assert(!failed || failed == -1 || failed == 1);</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;    <span class="keywordflow">if</span> (failed == 1) {</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;      ++num_failure;</div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (failed == -1) {</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;      ++num_success;</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;    }  <span class="comment">// Ignore when 0.</span></div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;  }</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;  <span class="keywordflow">if</span> (node-&gt;parents().count(gate-&gt;index())) {  <span class="comment">// Try to find the basic event.</span></div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    <span class="keywordtype">int</span> failed = gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;().count(node-&gt;index());</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    <span class="keywordflow">if</span> (!failed)</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;      failed = -gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;().count(-node-&gt;index());</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    failed *= node-&gt;<a class="code" href="classscram_1_1core_1_1Node.xhtml#a90ef93c4b0667215d2a8c3a3eb4f3822">opti_value</a>();</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    <span class="keywordflow">if</span> (failed == 1) {</div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;      ++num_failure;</div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (failed == -1) {</div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;      ++num_success;</div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;    }  <span class="comment">// Ignore when 0.</span></div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;  }</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;  assert(!gate-&gt;constant());</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;  DetermineGateState(gate, num_failure, num_success);</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;  <span class="keywordtype">int</span> mult_add = gate-&gt;parents().size();</div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;opti_value() || mult_add &lt; 2)</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;    mult_add = 0;</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;  <span class="keywordflow">return</span> mult_tot + mult_add;</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;}</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;</div><div class="line"><a name="l01937"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a019e679ad9077caac8c48253d42647ff"> 1937</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a019e679ad9077caac8c48253d42647ff">Preprocessor::DetermineGateState</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keywordtype">int</span> num_failure,</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;                                      <span class="keywordtype">int</span> num_success) noexcept {</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;  assert(!gate-&gt;opti_value() &amp;&amp; <span class="stringliteral">&quot;Unclear initial optimization value.&quot;</span>);</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;  assert(num_failure &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Illegal arguments or corrupted state.&quot;</span>);</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;  assert(num_success &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Illegal arguments or corrupted state.&quot;</span>);</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;  assert(!(num_success &amp;&amp; graph_-&gt;coherent()) &amp;&amp; <span class="stringliteral">&quot;Impossible state.&quot;</span>);</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;  <span class="keywordflow">if</span> (!(num_success + num_failure))</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// Undetermined 0 state.</span></div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;  <span class="keyword">auto</span> compute_state = [&amp;num_failure, &amp;num_success](<span class="keywordtype">int</span> req_failure,</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;                                                    <span class="keywordtype">int</span> req_success) {</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    <span class="keywordflow">if</span> (num_failure &gt;= req_failure)</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;      <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    <span class="keywordflow">if</span> (num_success &gt;= req_success)</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;      <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;  };</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;  <span class="keywordflow">switch</span> (gate-&gt;type()) {</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;    <span class="keywordflow">case</span> kNull:</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;      assert((num_failure + num_success) == 1);</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;      gate-&gt;opti_value(compute_state(1, 1));</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;      gate-&gt;opti_value(compute_state(1, gate-&gt;args().size()));</div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;      gate-&gt;opti_value(compute_state(gate-&gt;args().size(), 1));</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;    <span class="keywordflow">case</span> kVote:</div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;      assert(gate-&gt;args().size() &gt; gate-&gt;vote_number());</div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;      gate-&gt;opti_value(compute_state(</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;          gate-&gt;vote_number(), gate-&gt;args().size() - gate-&gt;vote_number() + 1));</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;    <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;      <span class="keywordflow">if</span> (num_failure == 1 &amp;&amp; num_success == 1) {</div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;        gate-&gt;opti_value(1);</div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (num_success == 2 || num_failure == 2) {</div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;        gate-&gt;opti_value(-1);</div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;      }</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;    <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;      assert((num_failure + num_success) == 1);</div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;      gate-&gt;opti_value(-compute_state(1, 1));</div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;      gate-&gt;opti_value(-compute_state(gate-&gt;args().size(), 1));</div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;      gate-&gt;opti_value(-compute_state(1, gate-&gt;args().size()));</div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;  }</div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;}</div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;</div><div class="line"><a name="l01990"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a4539f18d3dde97514ca267b41d30d220"> 1990</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a4539f18d3dde97514ca267b41d30d220">Preprocessor::CollectStateDestinations</a>(</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keywordtype">int</span> index,</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    std::unordered_map&lt;int, GateWeakPtr&gt;* destinations) noexcept {</div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;descendant())</div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    <span class="keywordflow">return</span> 0;  <span class="comment">// Deal with ancestors only.</span></div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;  assert(gate-&gt;descendant() == index &amp;&amp; <span class="stringliteral">&quot;Corrupted descendant marks.&quot;</span>);</div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;opti_value())</div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    <span class="keywordflow">return</span> 0;  <span class="comment">// Don&#39;t change failure information.</span></div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;  gate-&gt;opti_value(2);</div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;  <span class="keywordtype">int</span> num_dest = 0;</div><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; member : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg = member.second;</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;    num_dest += CollectStateDestinations(arg, index, destinations);</div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;    <span class="keywordflow">if</span> (arg-&gt;index() == index)</div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// The state source.</span></div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;    <span class="keywordflow">if</span> (!arg-&gt;opti_value())</div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Indeterminate branches.</span></div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;    <span class="keywordflow">if</span> (arg-&gt;opti_value() &gt; 1)</div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Not a state destination.</span></div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;    ++num_dest;  <span class="comment">// Optimization value is 1 or -1.</span></div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;    destinations-&gt;emplace(arg-&gt;index(), arg);</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;  }</div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;  <span class="keywordflow">return</span> num_dest;</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;}</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;</div><div class="line"><a name="l02015"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ad79145fdd5487ef0537728f74e6a94e4"> 2015</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ad79145fdd5487ef0537728f74e6a94e4">Preprocessor::CollectRedundantParents</a>(</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; node, std::unordered_map&lt;int, GateWeakPtr&gt;* destinations,</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;    std::vector&lt;GateWeakPtr&gt;* redundant_parents) noexcept {</div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : node-&gt;parents()) {</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;    assert(!member.second.expired());</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = member.second.lock();</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;    assert(!parent-&gt;mark());</div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;    <span class="keywordflow">if</span> (parent-&gt;opti_value() == 2)</div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Non-redundant parent.</span></div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    <span class="keywordflow">if</span> (parent-&gt;opti_value()) {</div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;      assert(parent-&gt;opti_value() == 1 || parent-&gt;opti_value() == -1);</div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;      <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(*destinations, parent-&gt;index())) {</div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;        <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type = parent-&gt;opti_value() == 1 ? kOr : kAnd;</div><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;        <span class="keywordflow">if</span> (parent-&gt;type() == type &amp;&amp;</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;            parent-&gt;opti_value() == parent-&gt;GetArgSign(node)) {</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;          destinations-&gt;erase(it);</div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;          <span class="keywordflow">continue</span>;  <span class="comment">// Destination and redundancy collision.</span></div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;        }</div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;        assert(!(graph_-&gt;coherent() &amp;&amp; parent-&gt;type() == type));</div><div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;      }</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;    }</div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;    redundant_parents-&gt;push_back(parent);</div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;  }</div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;}</div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;</div><div class="line"><a name="l02040"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a6edfe2a6d9836942944921a8de0c011e"> 2040</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a6edfe2a6d9836942944921a8de0c011e">Preprocessor::ProcessRedundantParents</a>(</div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; node,</div><div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;    <span class="keyword">const</span> std::vector&lt;GateWeakPtr&gt;&amp; redundant_parents) noexcept {</div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;  <span class="comment">// The node behaves like a constant False for redundant parents.</span></div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">GateWeakPtr</a>&amp; ptr : redundant_parents) {</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;    <span class="keywordflow">if</span> (ptr.expired())</div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = ptr.lock();</div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;    parent-&gt;ProcessConstantArg(node, node-&gt;opti_value() != 1);</div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;  }</div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;}</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;</div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> N&gt;</div><div class="line"><a name="l02053"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#aa42b66bb888f665bc68324cca15452ad"> 2053</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#aa42b66bb888f665bc68324cca15452ad">Preprocessor::ProcessStateDestinations</a>(</div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;    <span class="keyword">const</span> std::shared_ptr&lt;N&gt;&amp; node,</div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;    <span class="keyword">const</span> std::unordered_map&lt;int, GateWeakPtr&gt;&amp; destinations) noexcept {</div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ptr : destinations) {</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;    <span class="keywordflow">if</span> (ptr.second.expired())</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> target = ptr.second.lock();</div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;    assert(!target-&gt;mark());</div><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;    assert(target-&gt;opti_value() == 1 || target-&gt;opti_value() == -1);</div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;    <a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type = target-&gt;opti_value() == 1 ? kOr : kAnd;</div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;    <span class="keywordflow">if</span> (target-&gt;type() == type) {  <span class="comment">// Reuse of an existing gate.</span></div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;      <span class="keywordflow">if</span> (target-&gt;constant())</div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;        <span class="keywordflow">continue</span>;  <span class="comment">// No need to process.</span></div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;      target-&gt;AddArg(node, target-&gt;opti_value() &lt; 0);</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;      assert(!(!target-&gt;constant() &amp;&amp; target-&gt;type() == kNull));</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;    }</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;    <span class="keyword">auto</span> new_gate = std::make_shared&lt;Gate&gt;(type, graph_);</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;    new_gate-&gt;AddArg(node, target-&gt;opti_value() &lt; 0);</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;    <span class="keywordflow">if</span> (target-&gt;module()) {  <span class="comment">// Transfer modularity.</span></div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;      target-&gt;module(<span class="keyword">false</span>);</div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;      new_gate-&gt;module(<span class="keyword">true</span>);</div><div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;    }</div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;    <span class="keywordflow">if</span> (target == graph_-&gt;root()) {</div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;      graph_-&gt;root(new_gate);  <span class="comment">// The sign is preserved.</span></div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;      ReplaceGate(target, new_gate);</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;    }</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;    new_gate-&gt;AddArg(target);  <span class="comment">// Only after replacing target!</span></div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;    new_gate-&gt;descendant(node-&gt;index());  <span class="comment">// Preserve continuity.</span></div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;  }</div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;}</div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;</div><div class="line"><a name="l02086"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a5eb477e9ecd0552b2b554d7df56df652"> 2086</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a5eb477e9ecd0552b2b554d7df56df652">Preprocessor::ClearStateMarks</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;descendant())</div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// Clean only &#39;dirty&#39; gates.</span></div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;  gate-&gt;descendant(0);</div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;  gate-&gt;opti_value(0);</div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;    ClearStateMarks(arg.second);</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;  }</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : gate-&gt;parents()) {</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;    ClearStateMarks(member.second.lock());  <span class="comment">// Due to replacement.</span></div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;  }</div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;}</div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;</div><div class="line"><a name="l02099"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#ae12f3096132d7f6e9daa779724255f7e"> 2099</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#ae12f3096132d7f6e9daa779724255f7e">Preprocessor::DecomposeCommonNodes</a>() noexcept {</div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;  <a class="code" href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>, <span class="stringliteral">&quot;Decomposition of common nodes&quot;</span>);</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;  assert(!graph_-&gt;HasNullGates());</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;  std::vector&lt;GateWeakPtr&gt; common_gates;</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;  std::vector&lt;std::weak_ptr&lt;Variable&gt;&gt; common_variables;</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;  GatherCommonNodes(&amp;common_gates, &amp;common_variables);</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">Pdag::kVisit</a>&gt;();</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;  AssignTiming(0, graph_-&gt;root());  <span class="comment">// Required for optimization.</span></div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;  graph_-&gt;Clear&lt;Pdag::kDescendant&gt;();  <span class="comment">// Used for ancestor detection.</span></div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;  graph_-&gt;Clear&lt;Pdag::kAncestor&gt;();  <span class="comment">// Used for sub-graph detection.</span></div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;();  <span class="comment">// Important for linear traversal.</span></div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;  <span class="comment">// The processing is done deepest-layer-first.</span></div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;  <span class="comment">// The deepest-first processing avoids generating extra parents</span></div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;  <span class="comment">// for the nodes that are deep in the graph.</span></div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = common_gates.rbegin(); it != common_gates.rend(); ++it) {</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    changed |= <a class="code" href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml">DecompositionProcessor</a>()(*it, <span class="keyword">this</span>);</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;  }</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;</div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;  <span class="comment">// Variables are processed after gates</span></div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;  <span class="comment">// because, if parent gates are removed,</span></div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;  <span class="comment">// there may be no need to process these variables.</span></div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = common_variables.rbegin(); it != common_variables.rend();</div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;       ++it) {</div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;    changed |= <a class="code" href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml">DecompositionProcessor</a>()(*it, <span class="keyword">this</span>);</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;  }</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;}</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;</div><div class="line"><a name="l02131"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml#a2a238875a51c31560c2eac6e26fb2597"> 2131</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml#a2a238875a51c31560c2eac6e26fb2597">Preprocessor::DecompositionProcessor::operator()</a>(  <span class="comment">// clang-format confuse?</span></div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    <span class="keyword">const</span> std::weak_ptr&lt;Node&gt;&amp; common_node,</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;    <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml">Preprocessor</a>* preprocessor) noexcept {</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;  assert(preprocessor);</div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;  <span class="keywordflow">if</span> (common_node.expired())</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// The node has been deleted.</span></div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;  node_ = common_node.lock();</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;  <span class="keywordflow">if</span> (node_-&gt;parents().size() &lt; 2)</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// Not common anymore.</span></div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;  preprocessor_ = preprocessor;</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;  assert(!preprocessor_-&gt;graph_-&gt;HasNullGates());</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;  <span class="comment">// Determines whether decomposition is possible with a given type.</span></div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;  <span class="keyword">auto</span> is_decomposition_type = [](<a class="code" href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type) {</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    <span class="keywordflow">switch</span> (type) {</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;      <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;      <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;      <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    }</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;  };</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;  <span class="comment">// Determine if the decomposition setups are possible.</span></div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;  <span class="keyword">auto</span> it = boost::find_if(</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;      node_-&gt;parents(), [&amp;is_decomposition_type](<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member) {</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;        <span class="keywordflow">return</span> is_decomposition_type(member.second.lock()-&gt;type());</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;      });</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;  <span class="keywordflow">if</span> (it == node_-&gt;parents().end())</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// No setups possible.</span></div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;  assert(2 &gt; boost::count_if(node_-&gt;parents(), [](<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member) {</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;           <span class="keywordflow">return</span> member.second.lock()-&gt;module();</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;         }));</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;  <span class="comment">// Mark parents and ancestors.</span></div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : node_-&gt;parents()) {</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;    assert(!member.second.expired());</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = member.second.lock();</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;    MarkDestinations(parent);</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;  }</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;  <span class="comment">// Find destinations with particular setups.</span></div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;  <span class="comment">// If a parent gets marked upon destination search,</span></div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;  <span class="comment">// the parent is the destination.</span></div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;  std::vector&lt;GateWeakPtr&gt; dest;</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : node_-&gt;parents()) {</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;    assert(!member.second.expired());</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = member.second.lock();</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;    <span class="keywordflow">if</span> (parent-&gt;descendant() == node_-&gt;index() &amp;&amp;</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;        is_decomposition_type(parent-&gt;type())) {</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;      dest.push_back(parent);</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;    }</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;  }</div><div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;  <span class="keywordflow">if</span> (dest.empty())</div><div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// No setups are found.</span></div><div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;</div><div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;  <span class="keywordtype">bool</span> ret = ProcessDestinations(dest);</div><div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>, ret) &lt;&lt; <span class="stringliteral">&quot;Successful decomposition of node &quot;</span> &lt;&lt; node_-&gt;index();</div><div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;  <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;}</div><div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;</div><div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;<span class="keywordtype">void</span> Preprocessor::DecompositionProcessor::MarkDestinations(</div><div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; parent) noexcept {</div><div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;  <span class="keywordflow">if</span> (parent-&gt;module())</div><div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// Limited with independent subgraphs.</span></div><div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : parent-&gt;parents()) {</div><div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;    assert(!member.second.expired());</div><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> ancestor = member.second.lock();</div><div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;    <span class="keywordflow">if</span> (ancestor-&gt;descendant() == node_-&gt;index())</div><div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Already marked.</span></div><div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;    ancestor-&gt;descendant(node_-&gt;index());</div><div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;    MarkDestinations(ancestor);</div><div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;  }</div><div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;}</div><div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;</div><div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;<span class="keywordtype">bool</span> Preprocessor::DecompositionProcessor::ProcessDestinations(</div><div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;    <span class="keyword">const</span> std::vector&lt;GateWeakPtr&gt;&amp; dest) noexcept {</div><div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;</div><div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ptr : dest) {</div><div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;    <span class="keywordflow">if</span> (ptr.expired())</div><div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;      <span class="keywordflow">continue</span>;  <span class="comment">// Removed by constant propagation.</span></div><div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = ptr.lock();</div><div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;</div><div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;    <span class="comment">// The destination may already be processed</span></div><div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;    <span class="comment">// in the link of ancestors.</span></div><div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;    <span class="keywordflow">if</span> (!node_-&gt;parents().count(parent-&gt;index()))</div><div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;</div><div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;    <span class="keywordtype">bool</span> state = <span class="keyword">false</span>;  <span class="comment">// State for the constant propagation.</span></div><div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;    <span class="keywordflow">switch</span> (parent-&gt;type()) {</div><div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;      <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;      <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;        state = <span class="keyword">true</span>;</div><div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;      <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;      <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;        state = <span class="keyword">false</span>;</div><div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;        assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Complex gates cannot be decomposition destinations.&quot;</span>);</div><div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;    }</div><div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;    <span class="keywordflow">if</span> (parent-&gt;GetArgSign(node_) &lt; 0)</div><div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;      state = !state;</div><div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;    assert(!parent-&gt;mark() &amp;&amp; <span class="stringliteral">&quot;Subgraph is not clean!&quot;</span>);</div><div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;    <span class="keywordtype">bool</span> ret = ProcessAncestors(parent, state, parent);</div><div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;    changed |= ret;</div><div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;    <span class="comment">// Keep the graph clean.</span></div><div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;    preprocessor_-&gt;graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">Pdag::kGateMark</a>&gt;(parent);</div><div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;    <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, ret) &lt;&lt; <span class="stringliteral">&quot;Successful decomposition is in G&quot;</span> &lt;&lt; parent-&gt;index();</div><div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;  }</div><div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;  <span class="comment">// Actual propagation of the constant.</span></div><div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;  preprocessor_-&gt;graph_-&gt;RemoveNullGates();</div><div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;}</div><div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;</div><div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;<span class="keywordtype">bool</span> Preprocessor::DecompositionProcessor::ProcessAncestors(</div><div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; ancestor, <span class="keywordtype">bool</span> state, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root) noexcept {</div><div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;  <span class="keywordflow">if</span> (ancestor-&gt;mark())</div><div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;  ancestor-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;  <span class="keywordtype">bool</span> changed = <span class="keyword">false</span>;</div><div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;  std::vector&lt;std::pair&lt;int, GatePtr&gt;&gt; to_swap;  <span class="comment">// For common gates.</span></div><div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : ancestor-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> gate = arg.second;</div><div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;    <span class="keywordflow">if</span> (node_-&gt;parents().count(gate-&gt;index())) {</div><div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;      <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Reached decomposition sub-parent G&quot;</span> &lt;&lt; gate-&gt;index();</div><div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;      <span class="keywordflow">if</span> (IsAncestryWithinGraph(gate, root)) {</div><div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;        changed = <span class="keyword">true</span>;</div><div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;        gate-&gt;ProcessConstantArg(node_, state);</div><div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;        preprocessor_-&gt;RegisterToClear(gate);</div><div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;        <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> clone = gate-&gt;Clone();</div><div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;        <span class="keywordflow">if</span> (preprocessor_-&gt;RegisterToClear(clone)) {</div><div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;          to_swap.emplace_back(arg.first, clone);</div><div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;          changed = <span class="keyword">true</span>;</div><div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;          clone-&gt;descendant(gate-&gt;descendant());</div><div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;          clone-&gt;ancestor(root-&gt;index());</div><div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;          clone-&gt;Visit(gate-&gt;EnterTime());</div><div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;          clone-&gt;Visit(gate-&gt;ExitTime());</div><div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;          clone-&gt;Visit(gate-&gt;LastVisit());</div><div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;          clone-&gt;ProcessConstantArg(node_, state);</div><div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;          gate = clone;  <span class="comment">// Continue with the new parent.</span></div><div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;        }</div><div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;      }</div><div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;    }</div><div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;descendant() != node_-&gt;index())</div><div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    <span class="keywordflow">if</span> (!IsAncestryWithinGraph(gate, root))</div><div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;    changed |= ProcessAncestors(gate, state, root);</div><div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;  }</div><div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : ancestor-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;    ClearAncestorMarks(arg.second, root);</div><div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;  }</div><div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : to_swap) {</div><div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;    ancestor-&gt;EraseArg(arg.first);</div><div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;    ancestor-&gt;AddArg(arg.second, arg.first &lt; 0);</div><div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;  }</div><div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;  <span class="keywordflow">if</span> (!node_-&gt;parents().count(ancestor-&gt;index()) &amp;&amp;</div><div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;      ext::none_of(ancestor-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;(), [<span class="keyword">this</span>](<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg) {</div><div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;        <span class="keywordflow">return</span> arg.second-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a06dae52eac3565cda4d1db1bd2ce2fc5">descendant</a>() == this-&gt;node_-&gt;index();</div><div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;      })) {</div><div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;    ancestor-&gt;descendant(0);  <span class="comment">// Lose ancestorship if the descendant is gone.</span></div><div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;  }</div><div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;  <span class="keywordflow">return</span> changed;</div><div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;}</div><div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;</div><div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;<span class="keywordtype">bool</span> Preprocessor::DecompositionProcessor::IsAncestryWithinGraph(</div><div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root) noexcept {</div><div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;  <span class="keywordflow">if</span> (gate == root)</div><div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;ancestor() == root-&gt;index())</div><div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;ancestor() == -root-&gt;index())</div><div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;</div><div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;  <span class="keywordflow">if</span> (IsNodeWithinGraph(gate, root-&gt;EnterTime(), root-&gt;ExitTime()) &amp;&amp;</div><div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;      ext::all_of(gate-&gt;parents(), [&amp;root](<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member) {</div><div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;        <span class="keywordflow">return</span> IsAncestryWithinGraph(member.second.lock(), root);</div><div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;      })) {</div><div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;    gate-&gt;ancestor(root-&gt;index());</div><div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;  }</div><div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;</div><div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;  gate-&gt;ancestor(-root-&gt;index());</div><div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;}</div><div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;</div><div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;<span class="keywordtype">void</span> Preprocessor::DecompositionProcessor::ClearAncestorMarks(</div><div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;    <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; root) noexcept {</div><div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;  assert(root-&gt;ancestor() == 0 &amp;&amp; <span class="stringliteral">&quot;The root mark is dirty.&quot;</span>);</div><div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;ancestor() == 0)</div><div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;  assert(std::abs(gate-&gt;ancestor()) == root-&gt;index() &amp;&amp; <span class="stringliteral">&quot;Wrong markings.&quot;</span>);</div><div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;  gate-&gt;ancestor(0);</div><div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">Node::Parent</a>&amp; member : gate-&gt;parents()) {</div><div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;    ClearAncestorMarks(member.second.lock(), root);</div><div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;  }</div><div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;}</div><div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;</div><div class="line"><a name="l02331"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a26434bec1bc5a496f80c9cbad1ed3a62"> 2331</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a26434bec1bc5a496f80c9cbad1ed3a62">Preprocessor::ReplaceGate</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate,</div><div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;                               <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; replacement) noexcept {</div><div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;  assert(!gate-&gt;parents().empty());</div><div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;  <span class="keywordflow">while</span> (!gate-&gt;parents().empty()) {</div><div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;    <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> parent = gate-&gt;parents().begin()-&gt;second.lock();</div><div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;    <span class="keywordtype">int</span> sign = parent-&gt;GetArgSign(gate);</div><div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;    parent-&gt;EraseArg(sign * gate-&gt;index());</div><div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;    parent-&gt;AddArg(replacement, sign &lt; 0);</div><div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;  }</div><div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;}</div><div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;</div><div class="line"><a name="l02342"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a1c6e290b05a37759627487a6e028b1ca"> 2342</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a1c6e290b05a37759627487a6e028b1ca">Preprocessor::RegisterToClear</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) noexcept {</div><div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;  <span class="keywordflow">return</span> gate-&gt;constant() || gate-&gt;type() == kNull;  <span class="comment">// automatic register.</span></div><div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;}</div><div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;</div><div class="line"><a name="l02346"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a3fa7788f0a789a43a8bd1bb7ee8a5e22"> 2346</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a3fa7788f0a789a43a8bd1bb7ee8a5e22">Preprocessor::GatherNodes</a>(std::vector&lt;GatePtr&gt;* <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>,</div><div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;                               std::vector&lt;VariablePtr&gt;* <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>) noexcept {</div><div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;  graph_-&gt;Clear&lt;<a class="code" href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">Pdag::kVisit</a>&gt;();</div><div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;  GatherNodes(graph_-&gt;root(), <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>);</div><div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;}</div><div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;</div><div class="line"><a name="l02352"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Preprocessor.xhtml#a9caf4677a024ed935d831210b57b8ed9"> 2352</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a3fa7788f0a789a43a8bd1bb7ee8a5e22">Preprocessor::GatherNodes</a>(<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate, std::vector&lt;GatePtr&gt;* <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>,</div><div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;                               std::vector&lt;VariablePtr&gt;* <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>) noexcept {</div><div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;Visited())</div><div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;  gate-&gt;Visit(1);</div><div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;  <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>-&gt;push_back(gate);</div><div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;    GatherNodes(arg.second, <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>);</div><div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;  }</div><div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;    <span class="keywordflow">if</span> (!arg.second-&gt;Visited()) {</div><div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;      arg.second-&gt;Visit(1);</div><div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;      <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>-&gt;push_back(arg.second);</div><div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;    }</div><div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;  }</div><div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;}</div><div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;</div><div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CustomPreprocessor.xhtml">CustomPreprocessor&lt;Bdd&gt;::Run</a>() noexcept {</div><div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;  <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a2b6705e815fa3d02119c405b483766d5">Preprocessor::Run</a>();</div><div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;  pdag::Transform(graph_, &amp;pdag::MarkCoherence, &amp;pdag::TopologicalOrder);</div><div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;}</div><div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;</div><div class="line"><a name="l02374"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CustomPreprocessor_3_01Zbdd_01_4.xhtml#a5185075f852c647c7aa4313d23420ee5"> 2374</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CustomPreprocessor.xhtml">CustomPreprocessor&lt;Zbdd&gt;::Run</a>() noexcept {</div><div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;  <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a2b6705e815fa3d02119c405b483766d5">Preprocessor::Run</a>();</div><div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;  pdag::Transform(graph_,</div><div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) {</div><div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;                    <span class="keywordflow">if</span> (!graph_-&gt;coherent())</div><div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;                      RunPhaseFour();</div><div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;                  },</div><div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;                  [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { RunPhaseFive(); }, &amp;pdag::MarkCoherence,</div><div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;                  &amp;pdag::TopologicalOrder);</div><div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;}</div><div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;</div><div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CustomPreprocessor.xhtml">CustomPreprocessor&lt;Mocus&gt;::Run</a>() noexcept {</div><div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;  <a class="code" href="classscram_1_1core_1_1CustomPreprocessor.xhtml">CustomPreprocessor&lt;Zbdd&gt;::Run</a>();</div><div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;  pdag::Transform(graph_, [<span class="keyword">this</span>](<a class="code" href="classscram_1_1core_1_1Pdag.xhtml">Pdag</a>*) { InvertOrder(); });</div><div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;}</div><div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;</div><div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1CustomPreprocessor.xhtml">CustomPreprocessor&lt;Mocus&gt;::InvertOrder</a>() noexcept {</div><div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;  std::vector&lt;GatePtr&gt; <a class="code" href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>;</div><div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;  std::vector&lt;VariablePtr&gt; <a class="code" href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>;</div><div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;  <a class="code" href="classscram_1_1core_1_1Preprocessor.xhtml#a3fa7788f0a789a43a8bd1bb7ee8a5e22">Preprocessor::GatherNodes</a>(&amp;gates, &amp;variables);</div><div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;  <span class="keyword">auto</span> middle = boost::partition(</div><div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;      gates, [](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) { <span class="keywordflow">return</span> gate-&gt;module(); });</div><div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;</div><div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;  std::sort(middle, gates.end(), [](<span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; rhs) {</div><div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;    <span class="keywordflow">return</span> lhs-&gt;order() &lt; rhs-&gt;order();</div><div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;  });</div><div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = middle; it != gates.end(); ++it)</div><div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;    (*it)-&gt;order(gates.end() - it);  <span class="comment">// Inversion.</span></div><div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;</div><div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;  <span class="keywordtype">int</span> shift = gates.end() - middle;</div><div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = gates.begin(); it != middle; ++it)</div><div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;    (*it)-&gt;order(shift + (*it)-&gt;order());</div><div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;</div><div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> var : variables)</div><div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;    var-&gt;order(shift + var-&gt;order());</div><div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;}</div><div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;</div><div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;}  <span class="comment">// namespace scram::core</span></div><div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a434534b6a7c3fccc82c073e6aced90b1"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a434534b6a7c3fccc82c073e6aced90b1">scram::core::Preprocessor::CreateNewModule</a></div><div class="ttdeci">GatePtr CreateNewModule(const GatePtr &amp;gate, const std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; &amp;args) noexcept</div><div class="ttdoc">Creates a new module as an argument of an existing gate if the logic of the existing parent gate allo...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00930">preprocessor.cc:930</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aff25812178063fd0f9bfd9a87cebb5af"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aff25812178063fd0f9bfd9a87cebb5af">scram::core::Preprocessor::PropagateComplements</a></div><div class="ttdeci">void PropagateComplements(const GatePtr &amp;gate, bool keep_modules, std::unordered_map&lt; int, GatePtr &gt; *complements) noexcept</div><div class="ttdoc">Propagates complements of argument gates down to leafs according to the De Morgan&amp;#39;s law in order to r...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00631">preprocessor.cc:631</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a43bfc963f340281b07ac23d1c3ba00b5"><div class="ttname"><a href="logger_8h.xhtml#a43bfc963f340281b07ac23d1c3ba00b5">TIMER</a></div><div class="ttdeci">#define TIMER(level,...)</div><div class="ttdoc">Creates an automatic unique logging timer for a scope. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab2a4e8ac78b36541a32cc719863910a5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab2a4e8ac78b36541a32cc719863910a5">scram::core::Gate::constant</a></div><div class="ttdeci">bool constant() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00363">pdag.h:363</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_acfce4c2fa17c6987cfec6c0bce917667"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#acfce4c2fa17c6987cfec6c0bce917667">scram::core::Preprocessor::MergeTable::MergeGroup</a></div><div class="ttdeci">std::vector&lt; Option &gt; MergeGroup</div><div class="ttdoc">Isolated group for processing. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00481">preprocessor.h:481</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a23999ea2132dbc7c4262fd71ceaa73f0">scram::core::Pdag::kGateMark</a></div><div class="ttdoc">General graph traversal (dirty upon traversal end!). </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00820">pdag.h:820</a></div></div>
<div class="ttc" id="preprocessor_8h_xhtml"><div class="ttname"><a href="preprocessor_8h.xhtml">preprocessor.h</a></div><div class="ttdoc">A collection of PDAG transformation/preprocessing algorithms that simplify fault trees for analysis...</div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a90ef93c4b0667215d2a8c3a3eb4f3822"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a90ef93c4b0667215d2a8c3a3eb4f3822">scram::core::Node::opti_value</a></div><div class="ttdeci">int opti_value() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00137">pdag.h:137</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a29d3775965ee487d000591739fdbaa4b"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a29d3775965ee487d000591739fdbaa4b">scram::core::Preprocessor::FilterDistributiveArgs</a></div><div class="ttdeci">bool FilterDistributiveArgs(const GatePtr &amp;gate, std::vector&lt; GatePtr &gt; *candidates) noexcept</div><div class="ttdoc">Detects relationships between the gate and its distributive arguments to remove unnecessary candidate...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01623">preprocessor.cc:1623</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a4f35278c0542722dc42cc74358522a64"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a4f35278c0542722dc42cc74358522a64">scram::core::Preprocessor::GroupCommonArgs</a></div><div class="ttdeci">void GroupCommonArgs(const MergeTable::Collection &amp;options, MergeTable *table) noexcept</div><div class="ttdoc">Groups common args for merging. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01369">preprocessor.cc:1369</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_1_1GateSet_xhtml_ae00239084858979e096032c4cf2f05b9"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml#ae00239084858979e096032c4cf2f05b9">scram::core::Preprocessor::GateSet::insert</a></div><div class="ttdeci">std::pair&lt; GatePtr, bool &gt; insert(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Inserts a gate into the set if it is semantically unique. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00201">preprocessor.cc:201</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a2557ab80c04d7f91372992edfbedd93a"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a2557ab80c04d7f91372992edfbedd93a">scram::core::Preprocessor::TransformDistributiveArgs</a></div><div class="ttdeci">void TransformDistributiveArgs(const GatePtr &amp;gate, Operator distr_type, MergeTable::MergeGroup *group) noexcept</div><div class="ttdoc">Transforms distributive of arguments gates into a new subgraph. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01709">preprocessor.cc:1709</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a394fb1b5b5f9ee31dc81ad8d64353ee3"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a394fb1b5b5f9ee31dc81ad8d64353ee3">scram::core::Preprocessor::GatherCommonNodes</a></div><div class="ttdeci">void GatherCommonNodes(std::vector&lt; GateWeakPtr &gt; *common_gates, std::vector&lt; std::weak_ptr&lt; Variable &gt;&gt; *common_variables) noexcept</div><div class="ttdoc">Traverses the graph to find nodes that have more than one parent. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01796">preprocessor.cc:1796</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml">scram::core::Preprocessor::MergeTable</a></div><div class="ttdoc">Helper struct for algorithms that must make an optimal decision how to merge or factor out common arg...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00476">preprocessor.h:476</a></div></div>
<div class="ttc" id="preprocessor_8cc_xhtml_ac1f71051965d2af495655a946c09724c"><div class="ttname"><a href="preprocessor_8cc.xhtml#ac1f71051965d2af495655a946c09724c">scram::core::pdag::MarkCoherence</a></div><div class="ttdeci">void MarkCoherence(Pdag *graph) noexcept</div><div class="ttdoc">Marks coherence of the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00129">preprocessor.cc:129</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a6ee8f65454835d8de931a2d38bf8b276"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a6ee8f65454835d8de931a2d38bf8b276">scram::core::Preprocessor::NotifyParentsOfNegativeGates</a></div><div class="ttdeci">void NotifyParentsOfNegativeGates(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Notifies all parents of negative gates, such as NOT, NOR, and NAND, before transforming these gates i...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00511">preprocessor.cc:511</a></div></div>
<div class="ttc" id="preprocessor_8cc_xhtml_afb6bfa449cb37d89e64264cab6d3efaa"><div class="ttname"><a href="preprocessor_8cc.xhtml#afb6bfa449cb37d89e64264cab6d3efaa">scram::core::pdag::TopologicalOrder</a></div><div class="ttdeci">void TopologicalOrder(Pdag *graph) noexcept</div><div class="ttdoc">Assigns topological ordering to nodes of the PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00108">preprocessor.cc:108</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_aae90bf3d9d5aa57f314764cf7c1f92c1"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#aae90bf3d9d5aa57f314764cf7c1f92c1">scram::core::Preprocessor::MergeTable::groups</a></div><div class="ttdeci">std::vector&lt; MergeGroup &gt; groups</div><div class="ttdoc">Container of isolated groups. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00490">preprocessor.h:490</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_adabd895d60a8ee0950f75da9a98fa155"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#adabd895d60a8ee0950f75da9a98fa155">scram::core::Preprocessor::GroupCandidatesByArgs</a></div><div class="ttdeci">void GroupCandidatesByArgs(MergeTable::Candidates *candidates, std::vector&lt; MergeTable::Candidates &gt; *groups) noexcept</div><div class="ttdoc">Groups candidates with common arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01280">preprocessor.cc:1280</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a41db9fe9261126a080c87113223eaf18"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a41db9fe9261126a080c87113223eaf18">scram::core::Preprocessor::Preprocessor</a></div><div class="ttdeci">Preprocessor(Pdag *graph) noexcept</div><div class="ttdoc">Constructs a preprocessor of a PDAG representing a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00170">preprocessor.cc:170</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a4e97ffcda9c98ffc5aff93214f827c18"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a4e97ffcda9c98ffc5aff93214f827c18">scram::core::Preprocessor::ProcessModularArgs</a></div><div class="ttdeci">void ProcessModularArgs(const GatePtr &amp;gate, const std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; &amp;non_shared_args, std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; *modular_args, std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; *non_modular_args) noexcept</div><div class="ttdoc">Processes gate arguments found during the module detection. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00902">preprocessor.cc:902</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml">scram::core::Preprocessor::DecompositionProcessor</a></div><div class="ttdoc">Functor for processing of decomposition setups with common nodes. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00856">preprocessor.h:856</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in a PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00281">pdag.h:281</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_a1479ebc33b7575d245af0072492f59d3"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1479ebc33b7575d245af0072492f59d3">scram::core::Preprocessor::MergeTable::CommonArgs</a></div><div class="ttdeci">std::vector&lt; int &gt; CommonArgs</div><div class="ttdoc">Unique, sorted common arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00477">preprocessor.h:477</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor_xhtml_a2a238875a51c31560c2eac6e26fb2597"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor_1_1DecompositionProcessor.xhtml#a2a238875a51c31560c2eac6e26fb2597">scram::core::Preprocessor::DecompositionProcessor::operator()</a></div><div class="ttdeci">bool operator()(const std::weak_ptr&lt; Node &gt; &amp;common_node, Preprocessor *preprocessor) noexcept</div><div class="ttdoc">Launches the processing of decomposition setups in preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02131">preprocessor.cc:2131</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a06dae52eac3565cda4d1db1bd2ce2fc5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a06dae52eac3565cda4d1db1bd2ce2fc5">scram::core::Gate::descendant</a></div><div class="ttdeci">int descendant() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00415">pdag.h:415</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a45cf08c3809e801be50eda53dd68fca6"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a45cf08c3809e801be50eda53dd68fca6">scram::core::Preprocessor::NormalizeXorGate</a></div><div class="ttdeci">void NormalizeXorGate(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Normalizes a gate with XOR logic. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00562">preprocessor.cc:562</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aef197badfb47bb3c604fd93d6260e635"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aef197badfb47bb3c604fd93d6260e635">scram::core::Preprocessor::GatherCommonArgs</a></div><div class="ttdeci">void GatherCommonArgs(const GatePtr &amp;gate, Operator op, MergeTable::Candidates *group) noexcept</div><div class="ttdoc">Gathers common arguments of the gates in the group of a specific operator. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01184">preprocessor.cc:1184</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_a2dd45b6c16940b9b60e4bc5b13ae6d6b"><div class="ttname"><a href="pdag_8h.xhtml#a2dd45b6c16940b9b60e4bc5b13ae6d6b">scram::core::GateWeakPtr</a></div><div class="ttdeci">std::weak_ptr&lt; Gate &gt; GateWeakPtr</div><div class="ttdoc">An acyclic ptr to parent gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00064">pdag.h:64</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a4737f354474154b3cea9773c25616d27"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a4737f354474154b3cea9773c25616d27">scram::core::Preprocessor::DetectDistributivity</a></div><div class="ttdeci">bool DetectDistributivity() noexcept</div><div class="ttdoc">Detects and manipulates AND and OR gate distributivity for the whole graph. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01515">preprocessor.cc:1515</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a44b9a758151d932743543241ca669517"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a44b9a758151d932743543241ca669517">scram::core::Gate::vote_number</a></div><div class="ttdeci">int vote_number() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00352">pdag.h:352</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_af0cda955fb73a68ffbb9c44ddbfd71c8"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#af0cda955fb73a68ffbb9c44ddbfd71c8">scram::core::Preprocessor::MergeTable::OptionGroup</a></div><div class="ttdeci">std::vector&lt; Option * &gt; OptionGroup</div><div class="ttdoc">A set of best options. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00480">preprocessor.h:480</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a00288bef180767d7c79e3c79a33ef2d8"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a00288bef180767d7c79e3c79a33ef2d8">scram::core::Preprocessor::CoalesceGates</a></div><div class="ttdeci">bool CoalesceGates(bool common) noexcept</div><div class="ttdoc">Runs gate coalescence on the whole PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00683">preprocessor.cc:683</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_adbaee2a993e0538280dc437d0a3b849f"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#adbaee2a993e0538280dc437d0a3b849f">scram::core::Preprocessor::FindBaseOption</a></div><div class="ttdeci">void FindBaseOption(MergeTable::MergeGroup *all_options, MergeTable::MergeGroup::iterator *best_option) noexcept</div><div class="ttdoc">Finds the starting option for group formation. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01439">preprocessor.cc:1439</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a26434bec1bc5a496f80c9cbad1ed3a62"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a26434bec1bc5a496f80c9cbad1ed3a62">scram::core::Preprocessor::ReplaceGate</a></div><div class="ttdeci">void ReplaceGate(const GatePtr &amp;gate, const GatePtr &amp;replacement) noexcept</div><div class="ttdoc">Replaces one gate in the graph with another. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02331">preprocessor.cc:2331</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aa42b66bb888f665bc68324cca15452ad"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aa42b66bb888f665bc68324cca15452ad">scram::core::Preprocessor::ProcessStateDestinations</a></div><div class="ttdeci">void ProcessStateDestinations(const std::shared_ptr&lt; N &gt; &amp;node, const std::unordered_map&lt; int, GateWeakPtr &gt; &amp;destinations) noexcept</div><div class="ttdoc">Transforms failure or success destination according to the logic and the common node. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02053">preprocessor.cc:2053</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_afbce0b5c45a445c3b70ae298b9518281"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#afbce0b5c45a445c3b70ae298b9518281">scram::core::Preprocessor::FindModules</a></div><div class="ttdeci">void FindModules(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Determines modules from original gates that have been already timed. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00837">preprocessor.cc:837</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_a028cc62c4e510cb3063384dd75a36ed5"><div class="ttname"><a href="pdag_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">scram::core::VariablePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Variable &gt; VariablePtr</div><div class="ttdoc">Shared Boolean variables. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00248">pdag.h:248</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a9f420fb29f38ac48bde786a55de3d87c"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">scram::core::Gate::Arg</a></div><div class="ttdeci">std::pair&lt; int, std::shared_ptr&lt; T &gt;&gt; Arg</div><div class="ttdoc">An argument entry type in the gate&amp;#39;s argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00294">pdag.h:294</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aa793eeaa12244c5b39a0d80e5b1518ae"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">scram::core::Gate::args</a></div><div class="ttdeci">const ArgSet &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00366">pdag.h:366</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a56b5719bcfcfd1678928befe31d9b729"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a56b5719bcfcfd1678928befe31d9b729">scram::core::Preprocessor::NormalizeVoteGate</a></div><div class="ttdeci">void NormalizeVoteGate(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Normalizes a VOTE gate with a vote number. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00585">preprocessor.cc:585</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_af4dae5abf76e5da8b8c9f4371550b7dc"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#af4dae5abf76e5da8b8c9f4371550b7dc">scram::core::Preprocessor::GatherModules</a></div><div class="ttdeci">std::vector&lt; GateWeakPtr &gt; GatherModules() noexcept</div><div class="ttdoc">Gathers all modules in the PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01068">preprocessor.cc:1068</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a6edfe2a6d9836942944921a8de0c011e"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a6edfe2a6d9836942944921a8de0c011e">scram::core::Preprocessor::ProcessRedundantParents</a></div><div class="ttdeci">void ProcessRedundantParents(const NodePtr &amp;node, const std::vector&lt; GateWeakPtr &gt; &amp;redundant_parents) noexcept</div><div class="ttdoc">Detects if parents of a node are redundant. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02040">preprocessor.cc:2040</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_aefe4bda6c02d8395380962ebe1497fc8"><div class="ttname"><a href="pdag_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a></div><div class="ttdeci">std::string op</div><div class="ttdoc">Operator between the formula arguments. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00882">pdag.cc:882</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_acf534fb9d9510d712a78cb5d27572ec1"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#acf534fb9d9510d712a78cb5d27572ec1">scram::core::Preprocessor::TransformCommonArgs</a></div><div class="ttdeci">void TransformCommonArgs(MergeTable::MergeGroup *group) noexcept</div><div class="ttdoc">Transforms common arguments of gates into new gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01472">preprocessor.cc:1472</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ab0e18a9481c5e712cbb0b0ff27ba72a5"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ab0e18a9481c5e712cbb0b0ff27ba72a5">scram::core::Gate::mark</a></div><div class="ttdeci">bool mark() const </div><div class="ttdoc">Marks are used for linear traversal of graphs. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00404">pdag.h:404</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">scram::DEBUG5</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG4. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00082">logger.h:82</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml_a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml#a4f1e4aa55c2c1197cbb08ce38cc4ff57a6fa4bb0468851b30014443e457da62f8">scram::core::Pdag::kVisit</a></div><div class="ttdoc">General visit times for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00821">pdag.h:821</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a019e679ad9077caac8c48253d42647ff"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a019e679ad9077caac8c48253d42647ff">scram::core::Preprocessor::DetermineGateState</a></div><div class="ttdeci">void DetermineGateState(const GatePtr &amp;gate, int num_failure, int num_success) noexcept</div><div class="ttdoc">Determines if a gate fails or succeeds due to failed/succeeded arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01937">preprocessor.cc:1937</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a2b6705e815fa3d02119c405b483766d5"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a2b6705e815fa3d02119c405b483766d5">scram::core::Preprocessor::Run</a></div><div class="ttdeci">virtual void Run() noexcept=0</div><div class="ttdoc">Container of unique gates by semantics. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00177">preprocessor.cc:177</a></div></div>
<div class="ttc" id="namespacescram_1_1core_xhtml"><div class="ttname"><a href="namespacescram_1_1core.xhtml">scram::core</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a3fa7788f0a789a43a8bd1bb7ee8a5e22"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a3fa7788f0a789a43a8bd1bb7ee8a5e22">scram::core::Preprocessor::GatherNodes</a></div><div class="ttdeci">void GatherNodes(std::vector&lt; GatePtr &gt; *gates, std::vector&lt; VariablePtr &gt; *variables) noexcept</div><div class="ttdoc">Gathers all nodes in the PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02346">preprocessor.cc:2346</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_affe78b1e830afb73585affe0ada477be"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#affe78b1e830afb73585affe0ada477be">scram::core::Preprocessor::CreateNewModules</a></div><div class="ttdeci">void CreateNewModules(const GatePtr &amp;gate, const std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; &amp;modular_args, const std::vector&lt; std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt;&gt; &amp;groups) noexcept</div><div class="ttdoc">Creates new module gates from groups of modular arguments if the logic of the parent gate allows sub-...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01041">preprocessor.cc:1041</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a3b83bc14261cee28f0e1553222b7d5e5"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a3b83bc14261cee28f0e1553222b7d5e5">scram::core::Preprocessor::MarkAncestors</a></div><div class="ttdeci">void MarkAncestors(const NodePtr &amp;node, GatePtr *module) noexcept</div><div class="ttdoc">Marks ancestor gates true. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01878">preprocessor.cc:1878</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a1c6e290b05a37759627487a6e028b1ca"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a1c6e290b05a37759627487a6e028b1ca">scram::core::Preprocessor::RegisterToClear</a></div><div class="ttdeci">bool RegisterToClear(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Registers mutated gates for potential deletion later. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02342">preprocessor.cc:2342</a></div></div>
<div class="ttc" id="preprocessor_8cc_xhtml_a0a9f983a1ec770b1a9a8185f70bec7c7"><div class="ttname"><a href="preprocessor_8cc.xhtml#a0a9f983a1ec770b1a9a8185f70bec7c7">SANITY_ASSERT</a></div><div class="ttdeci">#define SANITY_ASSERT</div><div class="ttdoc">A collection of sanity checks between preprocessing phases. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00311">preprocessor.cc:311</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a13778626bd9ce007e01b7bbd8d11e850"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a13778626bd9ce007e01b7bbd8d11e850">scram::core::Preprocessor::MarkCommonArgs</a></div><div class="ttdeci">void MarkCommonArgs(const GatePtr &amp;gate, Operator op) noexcept</div><div class="ttdoc">Marks common arguments of gates with a specific operator. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01160">preprocessor.cc:1160</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_a5425c1212844fd5f593add36e1da169a"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a5425c1212844fd5f593add36e1da169a">scram::core::Preprocessor::MergeTable::Option</a></div><div class="ttdeci">std::pair&lt; CommonArgs, CommonParents &gt; Option</div><div class="ttdoc">One possibility. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00479">preprocessor.h:479</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ad13e133278ea7563c1ba037c05c35aa2"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ad13e133278ea7563c1ba037c05c35aa2">scram::core::Preprocessor::NormalizeGates</a></div><div class="ttdeci">void NormalizeGates(bool full) noexcept</div><div class="ttdoc">Normalizes the gates of the whole PDAG into OR, AND gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00480">preprocessor.cc:480</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ad5a5766ce9dbbd2104c0bb07b9639a48"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">scram::core::Gate::type</a></div><div class="ttdeci">Operator type() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00336">pdag.h:336</a></div></div>
<div class="ttc" id="preprocessor_8cc_xhtml_aad23ca4172bc61fc1fbb6024eb81dc59"><div class="ttname"><a href="preprocessor_8cc.xhtml#aad23ca4172bc61fc1fbb6024eb81dc59">scram::core::pdag::OrderArguments</a></div><div class="ttdeci">std::vector&lt; T * &gt; OrderArguments(Gate *gate) noexcept</div><div class="ttdoc">Determines the order of traversal for gate arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00097">preprocessor.cc:97</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ad79145fdd5487ef0537728f74e6a94e4"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ad79145fdd5487ef0537728f74e6a94e4">scram::core::Preprocessor::CollectRedundantParents</a></div><div class="ttdeci">void CollectRedundantParents(const NodePtr &amp;node, std::unordered_map&lt; int, GateWeakPtr &gt; *destinations, std::vector&lt; GateWeakPtr &gt; *redundant_parents) noexcept</div><div class="ttdoc">Detects if parents of a node are redundant. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02015">preprocessor.cc:2015</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ab011b41d7b669539d11e5b4030f4d78d"><div class="ttname"><a href="pdag_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">scram::core::NodePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Node &gt; NodePtr</div><div class="ttdoc">Shared base nodes in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00246">pdag.h:246</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aa9856913eee7b854abfbe8d8330566d3"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aa9856913eee7b854abfbe8d8330566d3">scram::core::Preprocessor::DetectModules</a></div><div class="ttdeci">void DetectModules() noexcept</div><div class="ttdoc">Traverses the PDAG to detect modules. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00801">preprocessor.cc:801</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a3569bbcd5e863c750cdfa69115399600"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a3569bbcd5e863c750cdfa69115399600">scram::core::Preprocessor::RunPhaseFive</a></div><div class="ttdeci">void RunPhaseFive() noexcept</div><div class="ttdoc">The final phase that cleans up the graph, and puts the structure of the graph ready for analysis...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00404">preprocessor.cc:404</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_af9b5fba2247a02afe6cf480a405b6ca0"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#af9b5fba2247a02afe6cf480a405b6ca0">scram::core::Preprocessor::GroupCommonParents</a></div><div class="ttdeci">void GroupCommonParents(int num_common_args, const MergeTable::Candidates &amp;group, MergeTable::Collection *parents) noexcept</div><div class="ttdoc">Finds intersections of common arguments of gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01347">preprocessor.cc:1347</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ac0abd7f5b54f98643644110b160569bd"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ac0abd7f5b54f98643644110b160569bd">scram::core::Preprocessor::ProcessMultipleDefinitions</a></div><div class="ttdeci">bool ProcessMultipleDefinitions() noexcept</div><div class="ttdoc">Detects and replaces multiple definitions of gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00746">preprocessor.cc:746</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">scram::DEBUG3</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG2. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00080">logger.h:80</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="pdag_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00817">pdag.cc:817</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a4b29173b8f6d18031d7a8cacbac15ce1"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a4b29173b8f6d18031d7a8cacbac15ce1">scram::core::Preprocessor::HandleDistributiveArgs</a></div><div class="ttdeci">bool HandleDistributiveArgs(const GatePtr &amp;gate, Operator distr_type, std::vector&lt; GatePtr &gt; *candidates) noexcept</div><div class="ttdoc">Manipulates gates with distributive arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01563">preprocessor.cc:1563</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ae0bdf196274427420631bc20f95cb72a"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ae0bdf196274427420631bc20f95cb72a">scram::core::Preprocessor::DetectMultipleDefinitions</a></div><div class="ttdeci">void DetectMultipleDefinitions(const GatePtr &amp;gate, std::unordered_map&lt; GatePtr, std::vector&lt; GateWeakPtr &gt;&gt; *multi_def, GateSet *unique_gates) noexcept</div><div class="ttdoc">Traverses the PDAG to collect multiple definitions of gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00778">preprocessor.cc:778</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a5c10e807e558b06a1573c08ed13e205e"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a5c10e807e558b06a1573c08ed13e205e">scram::core::Preprocessor::GroupModularArgs</a></div><div class="ttdeci">void GroupModularArgs(std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; *modular_args, std::vector&lt; std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt;&gt; *groups) noexcept</div><div class="ttdoc">Groups modular arguments by their common elements. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00997">preprocessor.cc:997</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a4539f18d3dde97514ca267b41d30d220"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a4539f18d3dde97514ca267b41d30d220">scram::core::Preprocessor::CollectStateDestinations</a></div><div class="ttdeci">int CollectStateDestinations(const GatePtr &amp;gate, int index, std::unordered_map&lt; int, GateWeakPtr &gt; *destinations) noexcept</div><div class="ttdoc">Collects failure or success destinations and marks non-redundant nodes. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01990">preprocessor.cc:1990</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ac83a0afe1f22761907f2a017abd96268"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ac83a0afe1f22761907f2a017abd96268">scram::core::Preprocessor::AssignTiming</a></div><div class="ttdeci">int AssignTiming(int time, const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Traverses the given gate and assigns time of visit to nodes. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00820">preprocessor.cc:820</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00060">logger.h:60</a></div></div>
<div class="ttc" id="algorithm_8h_xhtml"><div class="ttname"><a href="algorithm_8h.xhtml">algorithm.h</a></div><div class="ttdoc">Helpful algorithm facilities as an extension to the STL or Boost. </div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00883">pdag.cc:883</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aebc709ad2e097c24e837889a6a9e4696"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aebc709ad2e097c24e837889a6a9e4696">scram::core::Preprocessor::BooleanOptimization</a></div><div class="ttdeci">void BooleanOptimization() noexcept</div><div class="ttdoc">Propagates failures of common nodes to detect redundancy. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01778">preprocessor.cc:1778</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">scram::DEBUG4</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG3. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00081">logger.h:81</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_abf2c66723172a85b2ae87ef2a034cd1f"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#abf2c66723172a85b2ae87ef2a034cd1f">scram::core::Preprocessor::RunPhaseThree</a></div><div class="ttdeci">void RunPhaseThree() noexcept</div><div class="ttdoc">Application of gate normalization. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00363">preprocessor.cc:363</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_a9d27b5fb5a457a3e1a3d85c7748e98b3"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a9d27b5fb5a457a3e1a3d85c7748e98b3">scram::core::Preprocessor::MergeTable::Candidate</a></div><div class="ttdeci">std::pair&lt; GatePtr, CommonArgs &gt; Candidate</div><div class="ttdoc">Candidate gates with their shared arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00484">preprocessor.h:484</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aeb429ee17505f6ecedfc553f75f667af"><div class="ttname"><a href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a></div><div class="ttdeci">#define BLOG(level, cond)</div><div class="ttdoc">Conditional logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00064">logger.h:64</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ae9a8bac98061d7f82633486ed6a36861"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ae9a8bac98061d7f82633486ed6a36861">scram::core::Preprocessor::PropagateState</a></div><div class="ttdeci">int PropagateState(const GatePtr &amp;gate, const NodePtr &amp;node) noexcept</div><div class="ttdoc">Propagates failure or success of a common node by setting its ancestors&amp;#39; optimization values to 1 or ...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01895">preprocessor.cc:1895</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="pdag_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00260">pdag.h:260</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ab97a52e27ad8bf7ed049ae1a764f8fba"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ab97a52e27ad8bf7ed049ae1a764f8fba">scram::core::Preprocessor::MergeCommonArgs</a></div><div class="ttdeci">bool MergeCommonArgs() noexcept</div><div class="ttdoc">Identifies common arguments of gates, and merges the common arguments into new gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01096">preprocessor.cc:1096</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a44f820b6fe2c23594c818432b33e26a6"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a44f820b6fe2c23594c818432b33e26a6">scram::core::Preprocessor::RunPhaseOne</a></div><div class="ttdeci">void RunPhaseOne() noexcept</div><div class="ttdoc">The initial phase of preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00320">preprocessor.cc:320</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a5c224938dfba861f061525658bd7b156"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a5c224938dfba861f061525658bd7b156">scram::core::Preprocessor::RunPhaseFour</a></div><div class="ttdeci">void RunPhaseFour() noexcept</div><div class="ttdoc">Propagation of complements. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00377">preprocessor.cc:377</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a5ee92284aef510ce01a71c962d50f51c"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a5ee92284aef510ce01a71c962d50f51c">scram::core::Preprocessor::operator()</a></div><div class="ttdeci">void operator()() noexcept</div><div class="ttdoc">Runs the graph preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00172">preprocessor.cc:172</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_1_1GateSet_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor_1_1GateSet.xhtml">scram::core::Preprocessor::GateSet</a></div><div class="ttdoc">Container of unique gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00192">preprocessor.cc:192</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">scram::DEBUG2</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG1. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00079">logger.h:79</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_ab366f39e035d7034632ee3f27f8fb380"><div class="ttname"><a href="pdag_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; variables</div><div class="ttdoc">Collection of variables. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00819">pdag.cc:819</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a9d5f89471499508eb9e6c01ea43e0f15"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a9d5f89471499508eb9e6c01ea43e0f15">scram::core::Preprocessor::RunPhaseTwo</a></div><div class="ttdeci">void RunPhaseTwo() noexcept</div><div class="ttdoc">Preprocessing phase of the original structure of the graph. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00335">preprocessor.cc:335</a></div></div>
<div class="ttc" id="find__iterator_8h_xhtml"><div class="ttname"><a href="find__iterator_8h.xhtml">find_iterator.h</a></div><div class="ttdoc">Convenience iterator adaptor to wrap find calls and results. </div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_a1b49978dd3eedcea36c54c6df20c6712"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a1b49978dd3eedcea36c54c6df20c6712">scram::core::Preprocessor::MergeTable::Collection</a></div><div class="ttdeci">boost::unordered_map&lt; CommonArgs, CommonParents &gt; Collection</div><div class="ttdoc">Mapping for collection of common args and common parents as options. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00488">preprocessor.h:488</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a51340a3bcfa9785e430bab27ee08bbbf"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a51340a3bcfa9785e430bab27ee08bbbf">scram::core::Preprocessor::GroupDistributiveArgs</a></div><div class="ttdeci">void GroupDistributiveArgs(const MergeTable::Collection &amp;options, MergeTable *table) noexcept</div><div class="ttdoc">Groups distributive gate arguments for future factorization. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01678">preprocessor.cc:1678</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CustomPreprocessor_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1CustomPreprocessor.xhtml">scram::core::CustomPreprocessor</a></div><div class="ttdoc">Undefined template class for specialization of Preprocessor for needs of specific analysis algorithms...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l01003">preprocessor.h:1003</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_a931a14a748aa2a67490596349a2b0213"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a931a14a748aa2a67490596349a2b0213">scram::core::Preprocessor::MergeTable::CommonParents</a></div><div class="ttdeci">std::set&lt; GatePtr &gt; CommonParents</div><div class="ttdoc">Unique common parent gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00478">preprocessor.h:478</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_abfe2eda90c983750e28db49900a4909d"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#abfe2eda90c983750e28db49900a4909d">scram::core::Preprocessor::NormalizeGate</a></div><div class="ttdeci">void NormalizeGate(const GatePtr &amp;gate, bool full) noexcept</div><div class="ttdoc">Normalizes complex gates into OR, AND gates. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00521">preprocessor.cc:521</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a4086c57695d49b4770915d5d53bd47de"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a4086c57695d49b4770915d5d53bd47de">scram::core::Preprocessor::ProcessCommonNode</a></div><div class="ttdeci">void ProcessCommonNode(const std::weak_ptr&lt; N &gt; &amp;common_node) noexcept</div><div class="ttdoc">Tries to simplify the graph by removing redundancies generated by a common node. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01827">preprocessor.cc:1827</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml">scram::core::Preprocessor</a></div><div class="ttdoc">The class provides main preprocessing operations over a PDAG to simplify the fault tree and to help a...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00089">preprocessor.h:89</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml">scram::core::Variable</a></div><div class="ttdoc">Boolean variables in a Boolean formula or graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00241">pdag.h:241</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_ae12f3096132d7f6e9daa779724255f7e"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#ae12f3096132d7f6e9daa779724255f7e">scram::core::Preprocessor::DecomposeCommonNodes</a></div><div class="ttdeci">bool DecomposeCommonNodes() noexcept</div><div class="ttdoc">The Shannon decomposition for common nodes in the PDAG. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02099">preprocessor.cc:2099</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a8b76f2081293edc1cf85ddf8cb2ac2ed"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">scram::core::Node::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00128">pdag.h:128</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml_aac6a0def0dc0b7dfe17a5fd4379eaea2"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml#aac6a0def0dc0b7dfe17a5fd4379eaea2">scram::core::NodeParentManager::Parent</a></div><div class="ttdeci">std::pair&lt; int, GateWeakPtr &gt; Parent</div><div class="ttdoc">Parent index and ptr. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00072">pdag.h:72</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a3c51e098f0ff45be068f68296323f45f"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a3c51e098f0ff45be068f68296323f45f">scram::core::Preprocessor::FindOptionGroup</a></div><div class="ttdeci">void FindOptionGroup(MergeTable::MergeGroup *all_options, MergeTable::OptionGroup *best_group) noexcept</div><div class="ttdoc">Finds an optimal way of grouping options. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01406">preprocessor.cc:1406</a></div></div>
<div class="ttc" id="pdag_8h_xhtml_ac38351bd34c3272ac04f9ba8fa1428ec"><div class="ttname"><a href="pdag_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">scram::core::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00063">pdag.h:63</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Pdag_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Pdag.xhtml">scram::core::Pdag</a></div><div class="ttdoc">PDAG is a propositional directed acyclic graph. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00780">pdag.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aa65bdffb78291a0e41a34d34bf3fa198"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aa65bdffb78291a0e41a34d34bf3fa198">scram::core::Preprocessor::FilterModularArgs</a></div><div class="ttdeci">void FilterModularArgs(std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; *modular_args, std::vector&lt; std::pair&lt; int, NodePtr &gt;&gt; *non_modular_args) noexcept</div><div class="ttdoc">Checks if a group of modular arguments share anything with non-modular arguments. ...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l00968">preprocessor.cc:968</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_a5eb477e9ecd0552b2b554d7df56df652"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#a5eb477e9ecd0552b2b554d7df56df652">scram::core::Preprocessor::ClearStateMarks</a></div><div class="ttdeci">void ClearStateMarks(const GatePtr &amp;gate) noexcept</div><div class="ttdoc">Clears all the ancestor marks used in Boolean optimization steps. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l02086">preprocessor.cc:2086</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a62121e217b0da73112af7e07275f2c15"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">scram::core::Node::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00125">pdag.h:125</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Preprocessor_1_1MergeTable_xhtml_a6179811cc1a2d65448aaacf5e65e038b"><div class="ttname"><a href="structscram_1_1core_1_1Preprocessor_1_1MergeTable.xhtml#a6179811cc1a2d65448aaacf5e65e038b">scram::core::Preprocessor::MergeTable::Candidates</a></div><div class="ttdeci">std::vector&lt; Candidate &gt; Candidates</div><div class="ttdoc">Collection of merge-candidate gates with their common arguments. </div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8h_source.xhtml#l00486">preprocessor.h:486</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a54799feee1f1e91f848d11f3918e3e88"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a54799feee1f1e91f848d11f3918e3e88">scram::core::Node::Visit</a></div><div class="ttdeci">bool Visit(int time)</div><div class="ttdoc">Registers the visit time for this node upon graph traversal. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8h_source.xhtml#l00152">pdag.h:152</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Preprocessor_xhtml_aba011f495cdec8449a315c17fe67a8c0"><div class="ttname"><a href="classscram_1_1core_1_1Preprocessor.xhtml#aba011f495cdec8449a315c17fe67a8c0">scram::core::Preprocessor::FilterMergeCandidates</a></div><div class="ttdeci">void FilterMergeCandidates(MergeTable::Candidates *candidates) noexcept</div><div class="ttdoc">Filters merge candidates and their shared arguments to detect opportunities for simplifications like ...</div><div class="ttdef"><b>Definition:</b> <a href="preprocessor_8cc_source.xhtml#l01223">preprocessor.cc:1223</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
