<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>xml_stream.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xml_stream.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xml__stream_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2016-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Facilities to stream data in XML format.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;exception&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_errno.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1xml.xhtml">scram::xml</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/// Errors in using XML streaming facilities.</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="structscram_1_1xml_1_1StreamError.xhtml">   37</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a> : <span class="keyword">public</span> <a class="code" href="structscram_1_1xml_1_1Error.xhtml">Error</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1Error.xhtml#ae292929f21fd325c28c28b0ae6c4633b">Error::Error</a>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;};</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>detail {  <span class="comment">// XML streaming helpers.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="xml__stream_8h.xhtml#a3b32a9245fe4009c367d82d3f7f11734">   43</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> <a class="code" href="xml__stream_8h.xhtml#a3b32a9245fe4009c367d82d3f7f11734">kIndentChar</a> = <span class="charliteral">&#39; &#39;</span>;  <span class="comment">///&lt; The whitespace character.</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="xml__stream_8h.xhtml#acaf4491eacb351481983550f1002e68b">   44</a></span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="xml__stream_8h.xhtml#acaf4491eacb351481983550f1002e68b">kMaxIndent</a> = 20;  <span class="comment">///&lt; The maximum number of characters.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// Manages XML element indentation upon output.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// @pre Indenter instance is not shared between XML Streams.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// @note The indentation is bounded by kMaxIndent.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">///       If indentation exceeds kMaxIndent,</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///       only kMaxIndent indentation will be produced w/o error.</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">   53</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">Indenter</a> {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// RAII class to manage the current indentation string.</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml">   56</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml">Indentation</a> {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    /// @param[in] num_chars  The number of indentation characters.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    /// @param[in,out] indent  The provider of the indentation buffer.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">    /// @pre There&#39;s only a single instance at a time.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    /// @pre The indent buffer is filled w/ kIndentChar up to kMaxIndent.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /// @post If the number of chars exceeds kMaxIndent,</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    ///       the indentation is kMaxIndent.</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a0c5cf76b59b3c134a6954304d2668536">   66</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a0c5cf76b59b3c134a6954304d2668536">Indentation</a>(<span class="keywordtype">int</span> num_chars, <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">Indenter</a>* indent)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        : pos_(num_chars &gt; kMaxIndent ? kMaxIndent : num_chars),</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;          indent_(indent) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      indent_-&gt;spaces[pos_] = <span class="charliteral">&#39;\0&#39;</span>;  <span class="comment">// Indent string up to the position.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">    /// Restores the buffer.</span></div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a08a86a1d235fb4dae62a4340032bf76e">   73</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a08a86a1d235fb4dae62a4340032bf76e">~Indentation</a>() { indent_-&gt;spaces[pos_] = kIndentChar; }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /// @returns The indentation string.</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a11e6fd0629057032bdf027733e300639">   76</a></span>&#160;<span class="comment"></span>    <span class="keyword">operator</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*() { <span class="keywordflow">return</span> indent_-&gt;spaces; }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   <span class="keyword">private</span>:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">int</span> pos_;  <span class="comment">///&lt; The position of the null char in the string.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">Indenter</a>* indent_;  <span class="comment">///&lt; The string buffer provider.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// Initializes the buffer with enough space characters.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  /// @param[in] indent  Enable/disable indentation.</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml#aefd5252ea5f975d494de0cdec1cfc369">   86</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml#aefd5252ea5f975d494de0cdec1cfc369">Indenter</a>(<span class="keywordtype">bool</span> indent = <span class="keyword">true</span>) : indent_(indent) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::fill_n(spaces, kMaxIndent, kIndentChar);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// @param[in] num_chars  The number of indentation characters.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// @returns Indentation to produce the representative string.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml#a03933f546ee45604d3b74c55e005bcdf">   93</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml">Indentation</a> <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml#a03933f546ee45604d3b74c55e005bcdf">operator()</a>(<span class="keywordtype">int</span> num_chars) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> indent_ ? <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml">Indentation</a>(num_chars, <span class="keyword">this</span>) : Indentation(0, <span class="keyword">this</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordtype">bool</span> indent_;  <span class="comment">///&lt; Option to enable/disable indentation.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span>  <span class="keywordtype">char</span> spaces[kMaxIndent + 1];  <span class="comment">///&lt; The indentation and terminator.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/// Adaptor for stdio FILE stream with write generic interface.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">/// @note Write operations do not return any error code or throw exceptions.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">///       If any IO errors happen,</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">///       the FILE handler contains the error information.</span></div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">  107</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">FileStream</a> {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// @param[in] file  The output file stream.</span></div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a21748165d9d27e0597b8594ce2511a32">  110</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a21748165d9d27e0597b8594ce2511a32">FileStream</a>(std::FILE* file) : file_(file) {}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  /// @returns The destination file stream.</span></div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a0cd9d996c3e3a1c1afde245d663f1953">  113</a></span>&#160;<span class="comment"></span>  std::FILE* <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a0cd9d996c3e3a1c1afde245d663f1953">file</a>() { <span class="keywordflow">return</span> file_; }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  /// Writes a value into file.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ac0e1e816f4a7e81c51d3a2f34b04dd43">  117</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ac0e1e816f4a7e81c51d3a2f34b04dd43">write</a>(<span class="keyword">const</span> std::string&amp; value) { <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ac0e1e816f4a7e81c51d3a2f34b04dd43">write</a>(value.c_str()); }</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a52cc70b31f71544273783755d340b35a">  118</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a52cc70b31f71544273783755d340b35a">write</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* value) { std::fputs(value, file_); }</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ad3c04f0d1369fc97d07e414dc3ef97ff">  119</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ad3c04f0d1369fc97d07e414dc3ef97ff">write</a>(<span class="keywordtype">int</span> value) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> (value &lt; 0) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      std::fputc(<span class="charliteral">&#39;-&#39;</span>, file_);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      value = -value;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    write(static_cast&lt;std::size_t&gt;(value));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a6bfae7485c0a4bb0c1a348ba2fad68d5">  126</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a6bfae7485c0a4bb0c1a348ba2fad68d5">write</a>(std::size_t value) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">char</span> temp[20];</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">char</span>* p = temp;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      *p++ = value % 10 + <span class="charliteral">&#39;0&#39;</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      value /= 10;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    } <span class="keywordflow">while</span> (value &gt; 0);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      std::fputc(*--p, file_);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    } <span class="keywordflow">while</span> (p != temp);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  }</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#acfbc10c02bf2d18ef80aa7c75f1db33c">  138</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#acfbc10c02bf2d18ef80aa7c75f1db33c">write</a>(<span class="keywordtype">double</span> value) { std::fprintf(file_, <span class="stringliteral">&quot;%g&quot;</span>, value); }<span class="comment"></span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  std::FILE* file_;  <span class="comment">///&lt; The destination file.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">/// Convenience wrapper to provide C++ stream-like interface.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="xml__stream_8h.xhtml#aeb21dd8d5b918a68a33bf5b50c2efe9f">  147</a></span>&#160;<a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">FileStream</a>&amp; operator&lt;&lt;(<a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">FileStream</a>&amp; file, T&amp;&amp; value) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  file.<a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ac0e1e816f4a7e81c51d3a2f34b04dd43">write</a>(std::forward&lt;T&gt;(value));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keywordflow">return</span> file;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}  <span class="comment">// namespace detail</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/// Writer of data formed as an XML element to a stream.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">/// This class relies on the RAII to put the closing tags.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">/// It is designed for stack-based use</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">/// so that its destructor gets called at scope exit.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// One element at a time must be operated.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/// The output will be malformed</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/// if two child elements at the same scope are being streamed.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">/// To prevent this from happening,</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">/// the parent element is put into an inactive state</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">/// while its child element is alive.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">/// @pre All strings are UTF-8 encoded.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">/// @note The stream is designed to prevent mixing XML text and elements</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">///       due to the absence of the use case or need.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">///       However, there&#39;s no fundamental design or technical issue</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">///       restricting the introduction of this feature.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">///       As a workaround, markup elements in the text (e.g., ``&lt;br/&gt;``)</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">///       can be fed directly as a raw text.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">/// @warning The names of elements and contents of XML data</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">///          are NOT fully validated to be proper XML.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">///          It is up to the caller</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">///          to sanitize the input text (&lt;, &gt;, &amp;, &quot;, &#39;).</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">/// @warning The API works with C strings,</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">///          but this class does not manage the string lifetime.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">///          It doesn&#39;t own any strings.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">///          The provider of the strings must make sure</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">///          the lifetime of the string is long enough for streaming.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">///          It is the most common case that strings are literals,</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">///          so there&#39;s no need to worry about dynamic lifetime.</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1StreamElement.xhtml">  186</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a> {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">  /// Constructs a root streamer for the XML element data</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// ready to accept attributes, elements, text.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">  /// @param[in] name  Non-empty string name for the element.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  /// @param[in] indenter  The indentation provider.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// @param[in,out] out  The destination stream.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// @throws StreamError  Invalid setup for the element.</span></div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1StreamElement.xhtml#a4f248a79673fe7141d59c066c792f27d">  196</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml#a4f248a79673fe7141d59c066c792f27d">StreamElement</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">detail::Indenter</a>* indenter,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">detail::FileStream</a>* out)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      : <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a>(name, 0, nullptr, indenter, out) {}</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  /// Puts the closing tag.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">  /// @pre No child element is alive.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">  /// @warning The output will be malformed</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">  ///          if the child outlives the parent.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">  ///          It can happen if the destructor is called explicitly,</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  ///          or if the objects are allocated on the heap</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  ///          with different lifetimes.</span></div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1StreamElement.xhtml#a2ccc523bc42f71b81f42fac3b13936dd">  209</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml#a2ccc523bc42f71b81f42fac3b13936dd">~StreamElement</a>() noexcept {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    assert(active_ &amp;&amp; <span class="stringliteral">&quot;The child element may still be alive.&quot;</span>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    assert(!(parent_ &amp;&amp; parent_-&gt;active_) &amp;&amp; <span class="stringliteral">&quot;The parent must be inactive.&quot;</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">if</span> (parent_)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      parent_-&gt;active_ = <span class="keyword">true</span>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">if</span> (accept_attributes_) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      out_ &lt;&lt; <span class="stringliteral">&quot;/&gt;\n&quot;</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (accept_elements_) {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      out_ &lt;&lt; indenter_(kIndent_);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    closing_tag:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      out_ &lt;&lt; <span class="stringliteral">&quot;&lt;/&quot;</span> &lt;&lt; kName_ &lt;&lt; <span class="stringliteral">&quot;&gt;\n&quot;</span>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      assert(accept_text_ &amp;&amp; <span class="stringliteral">&quot;The element is in unspecified state.&quot;</span>);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="keywordflow">goto</span> closing_tag;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">  /// Sets the attributes for the element.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  /// @tparam T  Streamable type supporting operator&lt;&lt;.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">  /// @param[in] name  Non-empty name for the attribute.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  /// @param[in] value  The value of the attribute.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  /// @returns The reference to this element.</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// @throws StreamError  Invalid setup for the attribute.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1StreamElement.xhtml#a42273d1e66d736a9c2810fbee7dc4cb9">  237</a></span>&#160;  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a>&amp; <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml#a42273d1e66d736a9c2810fbee7dc4cb9">SetAttribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, T&amp;&amp; value) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">if</span> (!active_)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;The element is inactive.&quot;</span>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">if</span> (!accept_attributes_)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;Too late for attributes.&quot;</span>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span> (*name == <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;Attribute name can&#39;t be empty.&quot;</span>);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    out_ &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;=\&quot;&quot;</span> &lt;&lt; std::forward&lt;T&gt;(value) &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">  /// Adds text to the element.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">  /// @tparam T  Streamable type supporting operator&lt;&lt;.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">  /// @param[in] text  Non-empty text.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">  /// @post No more elements or attributes can be added.</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">  /// @post More text can be added.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">  /// @throws StreamError  Invalid setup or state for text addition.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1StreamElement.xhtml#a7e3c09c8d2041452e04f31dd332b65a6">  260</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml#a7e3c09c8d2041452e04f31dd332b65a6">AddText</a>(T&amp;&amp; text) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">if</span> (!active_)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;The element is inactive.&quot;</span>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (!accept_text_)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;Too late to put text.&quot;</span>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">if</span> (accept_elements_)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      accept_elements_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">if</span> (accept_attributes_) {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      accept_attributes_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      out_ &lt;&lt; <span class="stringliteral">&quot;&gt;&quot;</span>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    out_ &lt;&lt; std::forward&lt;T&gt;(text);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  /// Adds a child element to the element.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  /// @param[in] name  Non-empty name for the child element.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">  /// @returns A streamer for child element.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">  /// @pre The child element will be destroyed before the parent.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">  /// @post The parent element is inactive</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">  ///       while the child element is alive.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">  /// @throws StreamError  Invalid setup or state for element addition.</span></div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1StreamElement.xhtml#a12256127d75537b64e53ccc1d7c0e07c">  287</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a> <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml#a12256127d75537b64e53ccc1d7c0e07c">AddChild</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name) {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">if</span> (!active_)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;The element is inactive.&quot;</span>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">if</span> (!accept_elements_)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;Too late to add elements.&quot;</span>);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">if</span> (*name == <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;Element name can&#39;t be empty.&quot;</span>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span> (accept_text_)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      accept_text_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span> (accept_attributes_) {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      accept_attributes_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      out_ &lt;&lt; <span class="stringliteral">&quot;&gt;\n&quot;</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a>(name, kIndent_ + kIndentIncrement, <span class="keyword">this</span>, &amp;indenter_,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                         &amp;out_);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> kIndentIncrement = 2;  <span class="comment">///&lt; The number of chars per indent.</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">  /// Private constructor for a streamer</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">  /// to pass parent-child information.</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">  /// @param[in] name  Non-empty string name for the element.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">  /// @param[in] indent  The number of spaces to indent the tags.</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">  /// @param[in,out] parent  The parent element.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">  ///                        Null pointer for root streamers.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  /// @param[in] indenter  The indentation provider.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">  /// @param[in,out] out  The destination stream.</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">  /// @throws StreamError  Invalid setup for the element.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, <span class="keywordtype">int</span> indent, <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a>* parent,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">detail::Indenter</a>* indenter, <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">detail::FileStream</a>* out)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      : kName_(name),</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        kIndent_(indent),</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        accept_attributes_(<span class="keyword">true</span>),</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        accept_elements_(<span class="keyword">true</span>),</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        accept_text_(<span class="keyword">true</span>),</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        active_(<span class="keyword">true</span>),</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        parent_(parent),</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        indenter_(*indenter),</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        out_(*out) {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keywordflow">if</span> (*kName_ == <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;The element name can&#39;t be empty.&quot;</span>);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordflow">if</span> (parent_) {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      <span class="keywordflow">if</span> (!parent_-&gt;active_)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;The parent is inactive.&quot;</span>);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;      parent_-&gt;active_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    assert(kIndent_ &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Negative XML indentation.&quot;</span>);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    out_ &lt;&lt; indenter_(kIndent_) &lt;&lt; <span class="stringliteral">&quot;&lt;&quot;</span> &lt;&lt; kName_;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* kName_;  <span class="comment">///&lt; The name of the element.</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <span class="keywordtype">int</span> kIndent_;  <span class="comment">///&lt; Indentation for tags.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> accept_attributes_;  <span class="comment">///&lt; Flag for preventing late attributes.</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> accept_elements_;  <span class="comment">///&lt; Flag for preventing late elements.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> accept_text_;  <span class="comment">///&lt; Flag for preventing late text additions.</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> active_;  <span class="comment">///&lt; Active in streaming.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a>* parent_;  <span class="comment">///&lt; Parent element.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">detail::Indenter</a>&amp; indenter_;  <span class="comment">///&lt; The indentation string producer.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">detail::FileStream</a>&amp; out_;  <span class="comment">///&lt; The output destination.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">/// XML Stream document.</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">/// @pre Only this stream and its elements write to the output destination.</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">///      No other writes happen while this stream is alive.</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment">/// @note The document elements are indented up to 10 levels for readability.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">///       The XML tree depth beyond 10 elements is printed at level 10.</span></div><div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Stream.xhtml">  360</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Stream.xhtml">Stream</a> {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">  /// Constructs a document with XML header.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">  /// @param[in] out  The stream destination.</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">  /// @param[in] indent  Option to indent output for readability.</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">  /// @note This output file has clean error state.</span></div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Stream.xhtml#a9fc66fccf4d050ee650415e1c9087cf1">  368</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1Stream.xhtml#a9fc66fccf4d050ee650415e1c9087cf1">Stream</a>(std::FILE* out, <span class="keywordtype">bool</span> indent = <span class="keyword">true</span>)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      : indenter_(indent),</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        has_root_(false),</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        uncaught_exceptions_(std::uncaught_exceptions()),</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        out_(out) {</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    assert(!std::ferror(out) &amp;&amp; <span class="stringliteral">&quot;Unclean error state in output destination.&quot;</span>);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    out_ &lt;&lt; <span class="stringliteral">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">  /// @throws IOError  The file write operation has failed.</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">  /// @post The exception is thrown only if no other exception is on flight.</span></div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Stream.xhtml#ac38f0cf217a7ba72bfdd994a1be6b2ae">  380</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1Stream.xhtml#ac38f0cf217a7ba72bfdd994a1be6b2ae">~Stream</a>() noexcept(false) {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordtype">int</span> err = std::ferror(out_.file());</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">if</span> (err &amp;&amp; (std::uncaught_exceptions() == uncaught_exceptions_))</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1IOError.xhtml">IOError</a>(<span class="stringliteral">&quot;FILE error on write&quot;</span>)) &lt;&lt; boost::errinfo_errno(err);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">  /// Creates a root element for the document.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">  /// @param[in] name  The name for the root element.</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">  /// @returns XML stream element representing the document root.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">  /// @pre The document is alive at least as long as the created root.</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">  /// @throws StreamError  The document already has a root element,</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">  ///                      or root element construction has failed.</span></div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Stream.xhtml#aef4e5bae1f92709e708c515a255fb5e4">  396</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a> <a class="code" href="classscram_1_1xml_1_1Stream.xhtml#aef4e5bae1f92709e708c515a255fb5e4">root</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name) {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">if</span> (has_root_)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1xml_1_1StreamError.xhtml">StreamError</a>(<span class="stringliteral">&quot;The XML stream document already has a root.&quot;</span>);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="classscram_1_1xml_1_1StreamElement.xhtml">StreamElement</a> element(name, &amp;indenter_, &amp;out_);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    has_root_ = <span class="keyword">true</span>;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">return</span> element;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <a class="code" href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">detail::Indenter</a> indenter_;  <span class="comment">///&lt; The indentation manager for the document.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> has_root_;  <span class="comment">///&lt; The document has constructed its root.</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> uncaught_exceptions_;  <span class="comment">///&lt; The balance of exceptions.</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">detail::FileStream</a> out_;  <span class="comment">///&lt; The output stream.</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;}  <span class="comment">// namespace scram::xml</span></div><div class="ttc" id="structscram_1_1IOError_xhtml"><div class="ttname"><a href="structscram_1_1IOError.xhtml">scram::IOError</a></div><div class="ttdoc">For input/output related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00066">error.h:66</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1StreamElement_xhtml_a42273d1e66d736a9c2810fbee7dc4cb9"><div class="ttname"><a href="classscram_1_1xml_1_1StreamElement.xhtml#a42273d1e66d736a9c2810fbee7dc4cb9">scram::xml::StreamElement::SetAttribute</a></div><div class="ttdeci">StreamElement &amp; SetAttribute(const char *name, T &amp;&amp;value)</div><div class="ttdoc">Sets the attributes for the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00237">xml_stream.h:237</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_acfbc10c02bf2d18ef80aa7c75f1db33c"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#acfbc10c02bf2d18ef80aa7c75f1db33c">scram::xml::detail::FileStream::write</a></div><div class="ttdeci">void write(double value)</div><div class="ttdoc">Writes a value into file. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00138">xml_stream.h:138</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1xml_1_1Stream_xhtml_ac38f0cf217a7ba72bfdd994a1be6b2ae"><div class="ttname"><a href="classscram_1_1xml_1_1Stream.xhtml#ac38f0cf217a7ba72bfdd994a1be6b2ae">scram::xml::Stream::~Stream</a></div><div class="ttdeci">~Stream() noexcept(false)</div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00380">xml_stream.h:380</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1Indenter_xhtml_a03933f546ee45604d3b74c55e005bcdf"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml#a03933f546ee45604d3b74c55e005bcdf">scram::xml::detail::Indenter::operator()</a></div><div class="ttdeci">Indentation operator()(int num_chars)</div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00093">xml_stream.h:93</a></div></div>
<div class="ttc" id="namespacescram_1_1xml_xhtml"><div class="ttname"><a href="namespacescram_1_1xml.xhtml">scram::xml</a></div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00130">error.h:130</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_a21748165d9d27e0597b8594ce2511a32"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a21748165d9d27e0597b8594ce2511a32">scram::xml::detail::FileStream::FileStream</a></div><div class="ttdeci">FileStream(std::FILE *file)</div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00110">xml_stream.h:110</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1Indenter_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml">scram::xml::detail::Indenter</a></div><div class="ttdoc">Manages XML element indentation upon output. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00053">xml_stream.h:53</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_a52cc70b31f71544273783755d340b35a"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a52cc70b31f71544273783755d340b35a">scram::xml::detail::FileStream::write</a></div><div class="ttdeci">void write(const char *value)</div><div class="ttdoc">Writes a value into file. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00118">xml_stream.h:118</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1StreamElement_xhtml_a4f248a79673fe7141d59c066c792f27d"><div class="ttname"><a href="classscram_1_1xml_1_1StreamElement.xhtml#a4f248a79673fe7141d59c066c792f27d">scram::xml::StreamElement::StreamElement</a></div><div class="ttdeci">StreamElement(const char *name, detail::Indenter *indenter, detail::FileStream *out)</div><div class="ttdoc">Constructs a root streamer for the XML element data ready to accept attributes, elements, text. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00196">xml_stream.h:196</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation_xhtml_a0c5cf76b59b3c134a6954304d2668536"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a0c5cf76b59b3c134a6954304d2668536">scram::xml::detail::Indenter::Indentation::Indentation</a></div><div class="ttdeci">Indentation(int num_chars, Indenter *indent)</div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00066">xml_stream.h:66</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1StreamElement_xhtml_a12256127d75537b64e53ccc1d7c0e07c"><div class="ttname"><a href="classscram_1_1xml_1_1StreamElement.xhtml#a12256127d75537b64e53ccc1d7c0e07c">scram::xml::StreamElement::AddChild</a></div><div class="ttdeci">StreamElement AddChild(const char *name)</div><div class="ttdoc">Adds a child element to the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00287">xml_stream.h:287</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_ac0e1e816f4a7e81c51d3a2f34b04dd43"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ac0e1e816f4a7e81c51d3a2f34b04dd43">scram::xml::detail::FileStream::write</a></div><div class="ttdeci">void write(const std::string &amp;value)</div><div class="ttdoc">Writes a value into file. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00117">xml_stream.h:117</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_a0cd9d996c3e3a1c1afde245d663f1953"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a0cd9d996c3e3a1c1afde245d663f1953">scram::xml::detail::FileStream::file</a></div><div class="ttdeci">std::FILE * file()</div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00113">xml_stream.h:113</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation_xhtml_a08a86a1d235fb4dae62a4340032bf76e"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml#a08a86a1d235fb4dae62a4340032bf76e">scram::xml::detail::Indenter::Indentation::~Indentation</a></div><div class="ttdeci">~Indentation()</div><div class="ttdoc">Restores the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00073">xml_stream.h:73</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Stream_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Stream.xhtml">scram::xml::Stream</a></div><div class="ttdoc">XML Stream document. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00360">xml_stream.h:360</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1Indenter_1_1Indentation.xhtml">scram::xml::detail::Indenter::Indentation</a></div><div class="ttdoc">RAII class to manage the current indentation string. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00056">xml_stream.h:56</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_a6bfae7485c0a4bb0c1a348ba2fad68d5"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#a6bfae7485c0a4bb0c1a348ba2fad68d5">scram::xml::detail::FileStream::write</a></div><div class="ttdeci">void write(std::size_t value)</div><div class="ttdoc">Writes a value into file. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00126">xml_stream.h:126</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml_ad3c04f0d1369fc97d07e414dc3ef97ff"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml#ad3c04f0d1369fc97d07e414dc3ef97ff">scram::xml::detail::FileStream::write</a></div><div class="ttdeci">void write(int value)</div><div class="ttdoc">Writes a value into file. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00119">xml_stream.h:119</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Stream_xhtml_a9fc66fccf4d050ee650415e1c9087cf1"><div class="ttname"><a href="classscram_1_1xml_1_1Stream.xhtml#a9fc66fccf4d050ee650415e1c9087cf1">scram::xml::Stream::Stream</a></div><div class="ttdeci">Stream(std::FILE *out, bool indent=true)</div><div class="ttdoc">Constructs a document with XML header. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00368">xml_stream.h:368</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1StreamElement_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1StreamElement.xhtml">scram::xml::StreamElement</a></div><div class="ttdoc">Writer of data formed as an XML element to a stream. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00186">xml_stream.h:186</a></div></div>
<div class="ttc" id="classscram_1_1Error_xhtml_ae292929f21fd325c28c28b0ae6c4633b"><div class="ttname"><a href="classscram_1_1Error.xhtml#ae292929f21fd325c28c28b0ae6c4633b">scram::Error::Error</a></div><div class="ttdeci">Error(std::string msg)</div><div class="ttdoc">Constructs a new error with a provided message. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00052">error.h:52</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1Indenter_xhtml_aefd5252ea5f975d494de0cdec1cfc369"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1Indenter.xhtml#aefd5252ea5f975d494de0cdec1cfc369">scram::xml::detail::Indenter::Indenter</a></div><div class="ttdeci">Indenter(bool indent=true)</div><div class="ttdoc">Initializes the buffer with enough space characters. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00086">xml_stream.h:86</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1StreamElement_xhtml_a7e3c09c8d2041452e04f31dd332b65a6"><div class="ttname"><a href="classscram_1_1xml_1_1StreamElement.xhtml#a7e3c09c8d2041452e04f31dd332b65a6">scram::xml::StreamElement::AddText</a></div><div class="ttdeci">void AddText(T &amp;&amp;text)</div><div class="ttdoc">Adds text to the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00260">xml_stream.h:260</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1detail_1_1FileStream_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1detail_1_1FileStream.xhtml">scram::xml::detail::FileStream</a></div><div class="ttdoc">Adaptor for stdio FILE stream with write generic interface. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00107">xml_stream.h:107</a></div></div>
<div class="ttc" id="structscram_1_1xml_1_1StreamError_xhtml"><div class="ttname"><a href="structscram_1_1xml_1_1StreamError.xhtml">scram::xml::StreamError</a></div><div class="ttdoc">Errors in using XML streaming facilities. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00037">xml_stream.h:37</a></div></div>
<div class="ttc" id="xml__stream_8h_xhtml_a3b32a9245fe4009c367d82d3f7f11734"><div class="ttname"><a href="xml__stream_8h.xhtml#a3b32a9245fe4009c367d82d3f7f11734">scram::xml::detail::kIndentChar</a></div><div class="ttdeci">const char kIndentChar</div><div class="ttdoc">The whitespace character. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00043">xml_stream.h:43</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Stream_xhtml_aef4e5bae1f92709e708c515a255fb5e4"><div class="ttname"><a href="classscram_1_1xml_1_1Stream.xhtml#aef4e5bae1f92709e708c515a255fb5e4">scram::xml::Stream::root</a></div><div class="ttdeci">StreamElement root(const char *name)</div><div class="ttdoc">Creates a root element for the document. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00396">xml_stream.h:396</a></div></div>
<div class="ttc" id="structscram_1_1xml_1_1Error_xhtml"><div class="ttname"><a href="structscram_1_1xml_1_1Error.xhtml">scram::xml::Error</a></div><div class="ttdoc">The base for all XML related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00133">error.h:133</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1StreamElement_xhtml_a2ccc523bc42f71b81f42fac3b13936dd"><div class="ttname"><a href="classscram_1_1xml_1_1StreamElement.xhtml#a2ccc523bc42f71b81f42fac3b13936dd">scram::xml::StreamElement::~StreamElement</a></div><div class="ttdeci">~StreamElement() noexcept</div><div class="ttdoc">Puts the closing tag. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00209">xml_stream.h:209</a></div></div>
<div class="ttc" id="xml__stream_8h_xhtml_acaf4491eacb351481983550f1002e68b"><div class="ttname"><a href="xml__stream_8h.xhtml#acaf4491eacb351481983550f1002e68b">scram::xml::detail::kMaxIndent</a></div><div class="ttdeci">const int kMaxIndent</div><div class="ttdoc">The maximum number of characters. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00044">xml_stream.h:44</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
