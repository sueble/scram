<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>xml.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xml.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xml_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2018 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// XML helper facilities to work with libxml2.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// Adaptors and helper functions provide read-only facilities.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">/// @note All strings and characters are UTF-8 unless otherwise documented.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">/// @note The facilities are designed specifically for SCRAM use cases.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">///       The XML assumed to be well formed and simple.</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/// @note libxml2 older versions are not const correct in API.</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">/// @warning Complex XML features are not handled or expected,</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">///          for example, DTD, namespaces, entries.</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;optional&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;string_view&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_at_line.hpp&gt;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_errno.hpp&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_file_name.hpp&gt;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;boost/exception/errinfo_file_open_mode.hpp&gt;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &lt;boost/iterator/iterator_facade.hpp&gt;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &lt;boost/range/adaptor/filtered.hpp&gt;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &lt;libxml/parser.h&gt;</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &lt;libxml/relaxng.h&gt;</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#include &lt;libxml/tree.h&gt;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram_1_1xml.xhtml">scram::xml</a> {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">namespace </span>detail {  <span class="comment">// Internal XML helper functions.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/// Gets a number from an XML value.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">/// @tparam T  Numeric type.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// @param[in] value  The non-empty value string.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// @returns The interpreted value.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// @throws ValidityError  Casting is unsuccessful.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;, T&gt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<a class="code" href="xml_8h.xhtml#a316de1d751e833589416f25477aeb00e">CastValue</a>(<span class="keyword">const</span> std::string_view&amp; value);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">/// Specialization for integer values.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a9c7743912ad73f052c132ee39c90f5ed">   78</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> CastValue&lt;int&gt;(<span class="keyword">const</span> std::string_view&amp; value) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordtype">char</span>* end_char = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  std::int64_t ret = std::strtoll(value.data(), &amp;end_char, 10);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordtype">int</span> len = end_char - value.data();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">if</span> (len != value.size() || ret &gt; std::numeric_limits&lt;int&gt;::max() ||</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      ret &lt; std::numeric_limits&lt;int&gt;::min())</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1xml_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Failed to interpret &#39;&quot;</span> + std::string(value) +</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                              <span class="stringliteral">&quot;&#39; to &#39;int&#39;.&quot;</span>));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">/// Specialization for floating point numbers.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#ae7f77e0c7588a65f908e21cba9f74745">   91</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">double</span> CastValue&lt;double&gt;(<span class="keyword">const</span> std::string_view&amp; value) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordtype">char</span>* end_char = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordtype">double</span> ret = std::strtod(value.data(), &amp;end_char);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordtype">int</span> len = end_char - value.data();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="keywordflow">if</span> (len != value.size() || ret == HUGE_VAL || ret == -HUGE_VAL)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1xml_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Failed to interpret &#39;&quot;</span> + std::string(value) +</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                              <span class="stringliteral">&quot;&#39; to &#39;double&#39;.&quot;</span>));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">/// Specialization for Boolean values.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a8b323ea692275c375075bcfd1561a0d3">  103</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> CastValue&lt;bool&gt;(<span class="keyword">const</span> std::string_view&amp; value) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordflow">if</span> (value == <span class="stringliteral">&quot;true&quot;</span> || value == <span class="stringliteral">&quot;1&quot;</span>)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keywordflow">if</span> (value == <span class="stringliteral">&quot;false&quot;</span> || value == <span class="stringliteral">&quot;0&quot;</span>)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(<a class="code" href="structscram_1_1xml_1_1ValidityError.xhtml">ValidityError</a>(<span class="stringliteral">&quot;Failed to interpret &#39;&quot;</span> + std::string(value) +</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                            <span class="stringliteral">&quot;&#39; to &#39;bool&#39;.&quot;</span>));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/// Reinterprets the XML library UTF-8 string into C string.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">/// @param[in] xml_string  The string provided by the XML library.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">/// @returns The same string adapted for use as C string.</span></div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a188df83c90c899c3118efb43cf912245">  117</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="xml_8h.xhtml#a188df83c90c899c3118efb43cf912245">from_utf8</a>(<span class="keyword">const</span> xmlChar* xml_string) noexcept {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  assert(xml_string);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(xml_string);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/// Reinterprets C string as XML library UTF-8 string.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">/// @param[in] c_string  The C byte-array encoding the XML string.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">/// @returns The same string adapted for use in XML library functions.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">/// @pre The C string has UTF-8 encoding.</span></div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#aa92019ad4a75c4c80954681887d4d8a1">  129</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">const</span> xmlChar* <a class="code" href="xml_8h.xhtml#aa92019ad4a75c4c80954681887d4d8a1">to_utf8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* c_string) noexcept {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  assert(c_string);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>xmlChar*<span class="keyword">&gt;</span>(c_string);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/// Removes leading and trailing space characters from XML value string.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/// @param[in] text  The text in XML attribute or text nodes.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">/// @returns View to the trimmed substring.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">/// @pre The string is normalized by the XML parser.</span></div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#ac1d3e45096e6f0253bc238de7d3bdfe2">  141</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::string_view <a class="code" href="xml_8h.xhtml#ac1d3e45096e6f0253bc238de7d3bdfe2">trim</a>(<span class="keyword">const</span> std::string_view&amp; text) noexcept {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keyword">auto</span> pos_first = text.find_first_not_of(<span class="charliteral">&#39; &#39;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordflow">if</span> (pos_first == std::string_view::npos)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keyword">auto</span> pos_last = text.find_last_not_of(<span class="charliteral">&#39; &#39;</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">auto</span> len = pos_last - pos_first + 1;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keywordflow">return</span> std::string_view(text.data() + pos_first, len);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/// Gets the last XML error converted from the library error codes.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/// @tparam T  The SCRAM error type to convert XML error into.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">/// @param[in] xml_error  The error to translate.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">///                       nullptr to retrieve the latest error in the library.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/// @returns The exception object to be thrown.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a4a73fb8293c3d457ed6d6fb868e75c02">  161</a></span>&#160;T <a class="code" href="xml_8h.xhtml#a4a73fb8293c3d457ed6d6fb868e75c02">GetError</a>(xmlErrorPtr xml_error = <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordflow">if</span> (!xml_error)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    xml_error = xmlGetLastError();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  assert(xml_error &amp;&amp; <span class="stringliteral">&quot;No XML error is available.&quot;</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  T throw_error(xml_error-&gt;message);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordflow">if</span> (xml_error-&gt;file)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    throw_error &lt;&lt; boost::errinfo_file_name(xml_error-&gt;file);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">if</span> (xml_error-&gt;line)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    throw_error &lt;&lt; boost::errinfo_at_line(xml_error-&gt;line);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">return</span> throw_error;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}  <span class="comment">// namespace detail</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">/// XML Element adaptor.</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml">  176</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a> {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// The range for elements.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  /// This is a simple view adaptor</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  /// to the linked list XML elements.</span></div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">  181</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">Range</a> {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;   <span class="keyword">public</span>:</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a99b73c03de738209cfb5ff6ea1f76abc">  183</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">value_type</a> = <a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a>;  <span class="comment">///&lt; Minimal container for Element type.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">    /// Iterator over range elements.</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">  186</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        : <span class="keyword">public</span> boost::iterator_facade&lt;iterator, Element,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                        std::forward_iterator_tag, Element&gt; {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span>boost::iterator_core_access;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;     <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">      /// @param[in] element  The starting element in the list.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">      ///                     nullptr signifies the end.</span></div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml#a837aaa6571d0e04e9260721671c09c81">  194</a></span>&#160;<span class="comment"></span>      <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml#a837aaa6571d0e04e9260721671c09c81">iterator</a>(<span class="keyword">const</span> xmlElement* element = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;          : element_(element) {}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;     <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">      /// Standard iterator functionality required by the facade facilities.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">      /// @{</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span>      <span class="keywordtype">void</span> increment() {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        assert(element_ &amp;&amp; <span class="stringliteral">&quot;Incrementing end iterator!&quot;</span>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        element_ = Range::findElement(element_-&gt;next);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      <span class="keywordtype">bool</span> equal(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a>&amp; other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">return</span> element_ == other.element_;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a> dereference()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a>(element_); }<span class="comment"></span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">      /// @}</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      <span class="keyword">const</span> xmlElement* element_;  <span class="comment">///&lt; The current element.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a7e08b3d5970c00ce639cb5de45a6f349">  213</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">const_iterator</a> = <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a>;  <span class="comment">///&lt; The container is immutable.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">    /// Constructs the range for the intrusive list of XML Element nodes.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">    /// @param[in] head  The head node of the list (may be non-Element node!).</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">    ///                  nullptr if the list is empty.</span></div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae62801e3dcfe48b2e349dd3ad6f5216d">  219</a></span>&#160;<span class="comment"></span>    <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae62801e3dcfe48b2e349dd3ad6f5216d">Range</a>(<span class="keyword">const</span> xmlNode* head) : begin_(findElement(head)) {}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">    /// The range begin and end iterators.</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">    /// @{</span></div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">  223</a></span>&#160;<span class="comment"></span>    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> begin_; }</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a587b8312cc0bfbd5d9b6e8c73890c99e">  224</a></span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a587b8312cc0bfbd5d9b6e8c73890c99e">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a>(); }</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a014449ba65e98a1aa089e8e9e809227a">  225</a></span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a014449ba65e98a1aa089e8e9e809227a">cbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> begin_; }</div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ad8246812626d57a193d74be15a412b90">  226</a></span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ad8246812626d57a193d74be15a412b90">cend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a>(); }<span class="comment"></span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /// @}</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">    /// @return true if the range contains no elements.</span></div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#aea4c55beafe82e8dc72329f579b23a8c">  230</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#aea4c55beafe82e8dc72329f579b23a8c">empty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>() == <a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>(); }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">    /// @returns The number of Elements in the list.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">    /// @note O(N) complexity.</span></div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a15c9f933f38716821303393ddcb6ef72">  235</a></span>&#160;<span class="comment"></span>    std::size_t <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a15c9f933f38716821303393ddcb6ef72">size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> std::distance(<a class="code" href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>(), <a class="code" href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>()); }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;   <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">    /// Finds the first Element node in the list.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">    /// @param[in] node  The starting node.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">    ///                  nullptr for the end node.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">    /// @returns The first Element type node.</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">    ///          nullptr if the list does not contain any Element nodes.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"></span>    <span class="keyword">static</span> <span class="keyword">const</span> xmlElement* findElement(<span class="keyword">const</span> xmlNode* node) noexcept {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      <span class="keywordflow">while</span> (node &amp;&amp; node-&gt;type != XML_ELEMENT_NODE)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        node = node-&gt;next;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>xmlElement*<span class="keyword">&gt;</span>(node);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">iterator</a> begin_;  <span class="comment">///&lt; The first node with XML Element.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span>  };</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">  /// @param[in] element  The element in the XML document.</span></div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a6d0e810583d2e8ed86cf9fbe8dc1719e">  255</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a6d0e810583d2e8ed86cf9fbe8dc1719e">Element</a>(<span class="keyword">const</span> xmlElement* element) : element_(element) {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    assert(element_);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">  /// @returns The URI of the file containing the element.</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">  /// @pre The document has been loaded from a file.</span></div><div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a959df73174a6e363f71ffb7772abbe20">  262</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a959df73174a6e363f71ffb7772abbe20">filename</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> detail::from_utf8(element_-&gt;doc-&gt;URL); }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">  /// @returns The line number of the element.</span></div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">  265</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">line</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> XML_GET_LINE(to_node()); }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">  /// @returns The name of the XML element.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// @pre The element has a name.</span></div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">  270</a></span>&#160;<span class="comment"></span>  std::string_view <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> detail::from_utf8(element_-&gt;name); }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">  /// Retrieves the XML element&#39;s attribute values.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// @param[in] name  The name of the requested attribute.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">  /// @returns The attribute value or</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  ///          empty string if no attribute (optional attribute).</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">  /// @pre XML attributes never contain empty strings.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">  /// @pre XML attribute values are simple texts w/o DTD processing.</span></div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">  281</a></span>&#160;<span class="comment"></span>  std::string_view <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">attribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name)<span class="keyword"> const </span>{</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> xmlAttr* <span class="keyword">property</span> = xmlHasProp(to_node(), detail::to_utf8(name));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">if</span> (!property)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> xmlNode* text_node = <span class="keyword">property</span>-&gt;children;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    assert(text_node &amp;&amp; text_node-&gt;type == XML_TEXT_NODE);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    assert(text_node-&gt;content);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> detail::trim(detail::from_utf8(text_node-&gt;content));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">  /// Queries element attribute existence.</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">  /// @param[in] name  The non-empty attribute name.</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">  /// @returns true if the element has an attribute with the given name.</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">  /// @note This is an inefficient way to work with optional attributes.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">  ///       Use the ``attribute(name)`` member function directly for optionals.</span></div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#ae722d4816c427429833f90a5c8c1cd30">  299</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml#ae722d4816c427429833f90a5c8c1cd30">has_attribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name)<span class="keyword"> const </span>{</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> xmlHasProp(to_node(), detail::to_utf8(name)) != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">  /// @returns The XML element&#39;s text.</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">  /// @pre The Element has text.</span></div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a0c8e5b4dc681b9f83e3563ad08d168e1">  306</a></span>&#160;<span class="comment"></span>  std::string_view <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a0c8e5b4dc681b9f83e3563ad08d168e1">text</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">const</span> xmlNode* text_node = element_-&gt;children;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">while</span> (text_node &amp;&amp; text_node-&gt;type != XML_TEXT_NODE)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      text_node = text_node-&gt;next;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    assert(text_node &amp;&amp; <span class="stringliteral">&quot;Element does not have text.&quot;</span>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    assert(text_node-&gt;content &amp;&amp; <span class="stringliteral">&quot;Missing text in Element.&quot;</span>);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">return</span> detail::trim(detail::from_utf8(text_node-&gt;content));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">  /// Generic attribute value extraction following XML data types.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">  /// @tparam T  The attribute value type (numeric).</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">  /// @param[in] name  The name of the attribute.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">  /// @returns The value of type T interpreted from attribute value.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">  ///          None if the attribute doesn&#39;t exists (optional).</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">  /// @throws ValidityError  Casting is unsuccessful.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;, std::optional&lt;T&gt;&gt;</div><div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#aedf9baaf529830c6e7ed07b65b933ab5">  327</a></span>&#160;  <a class="code" href="classscram_1_1xml_1_1Element.xhtml#aedf9baaf529830c6e7ed07b65b933ab5">attribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name)<span class="keyword"> const </span>{</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    std::string_view value = attribute(name);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">if</span> (value.empty())</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      <span class="keywordflow">return</span> detail::CastValue&lt;T&gt;(value);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1xml_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      err &lt;&lt; <a class="code" href="error_8h.xhtml#a7067a7f3834bc3c1d8fa25ba70d30011">errinfo_element</a>(std::string(<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">Element::name</a>()))</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;          &lt;&lt; <a class="code" href="error_8h.xhtml#ab766600dc63390a9ad23e8818a2e509f">errinfo_attribute</a>(name) &lt;&lt; boost::errinfo_at_line(line())</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;          &lt;&lt; boost::errinfo_file_name(filename());</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">  /// Generic text value extraction following XML data types.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">  /// @tparam T  The attribute value type (numeric).</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">  /// @returns The value of type T interpreted from attribute value.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">  /// @pre The text is not empty.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">  /// @throws ValidityError  Casting is unsuccessful.</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a7f33738d58d87af59c1c3d08b4b23469">  351</a></span>&#160;  std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;, T&gt; <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a7f33738d58d87af59c1c3d08b4b23469">text</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;      <span class="keywordflow">return</span> detail::CastValue&lt;T&gt;(text());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1xml_1_1ValidityError.xhtml">ValidityError</a>&amp; err) {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;      err &lt;&lt; <a class="code" href="error_8h.xhtml#a7067a7f3834bc3c1d8fa25ba70d30011">errinfo_element</a>(std::string(name()))</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;          &lt;&lt; boost::errinfo_at_line(line())</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;          &lt;&lt; boost::errinfo_file_name(filename());</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    }</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">  /// @param[in] name  The name of the child element.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="comment">  ///                  Empty string to request any first child element.</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">  /// @returns The first child element (with the given name).</span></div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">  366</a></span>&#160;<span class="comment"></span>  std::optional&lt;Element&gt; <a class="code" href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">child</a>(std::string_view name = <span class="stringliteral">&quot;&quot;</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a> element : children()) {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;      <span class="keywordflow">if</span> (name.empty() || name == element.name())</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">return</span> element;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  }</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">  /// @returns All the Element children.</span></div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">  375</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">Range</a> <a class="code" href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">children</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classscram_1_1xml_1_1Element_1_1Range.xhtml">Range</a>(element_-&gt;children); }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">  /// @param[in] name  The name to filter children elements.</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">  /// @returns The range of Element children with the given name.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">  /// @pre The name must live at least as long as the returned range lives.</span></div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Element.xhtml#accf1b8ff3d357b2ce4e885b7b28561ad">  382</a></span>&#160;<span class="comment"></span>  <span class="keyword">auto</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml#accf1b8ff3d357b2ce4e885b7b28561ad">children</a>(std::string_view name)<span class="keyword"> const </span>{</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">return</span> children() |</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;           boost::adaptors::filtered([name](<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a>&amp; element) {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;             <span class="keywordflow">return</span> element.<a class="code" href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">name</a>() == name;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;           });</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">  /// Converts the data to its base.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment"></span>  xmlNode* to_node()<span class="keyword"> const </span>{</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>xmlNode*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>xmlElement*<span class="keyword">&gt;</span>(element_));</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keyword">const</span> xmlElement* element_;  <span class="comment">///&lt; The main data location.</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">/// The parser options passed to the library parser.</span></div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a857dbaf973585577354019c3792590ba">  399</a></span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="xml_8h.xhtml#a857dbaf973585577354019c3792590ba">kParserOptions</a> = XML_PARSE_XINCLUDE | XML_PARSE_NOBASEFIX |</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                           XML_PARSE_NONET | XML_PARSE_NOXINCNODE |</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                           XML_PARSE_COMPACT | XML_PARSE_HUGE;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Validator.xhtml">Validator</a>;  <span class="comment">// Forward declaration for validation upon DOM constructions.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">/// XML DOM tree document.</span></div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Document.xhtml">  406</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Document.xhtml">Document</a> {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">  /// Parses XML input document.</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">  /// All XInclude directives are processed into the final document.</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">  /// @param[in] file_path  The path to the document file.</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">  /// @param[in] validator  Optional validator against the RNG schema.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">  /// @returns The initialized document.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">  /// @throws IOError  The file is not available.</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">  /// @throws ParseError  There are XML parsing failures.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">  /// @throws XIncludeError  XInclude resolution has failed.</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">  /// @throws ValidityError  The XML file is not valid.</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1Document.xhtml">Document</a>(<span class="keyword">const</span> std::string&amp; file_path,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                    <a class="code" href="classscram_1_1xml_1_1Validator.xhtml">Validator</a>* validator = <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// @returns The root element of the document.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">  /// @pre The document has a root node.</span></div><div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Document.xhtml#a4ac45d9407199ac54ebea609595cf942">  426</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a> <a class="code" href="classscram_1_1xml_1_1Document.xhtml#a4ac45d9407199ac54ebea609595cf942">root</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1xml_1_1Element.xhtml">Element</a>(</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        reinterpret_cast&lt;const xmlElement*&gt;(xmlDocGetRootElement(doc_.get())));</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">  /// @returns The underlying data document.</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Document.xhtml#afcabff07e31e1f4947f5c393364a1ea7">  433</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> xmlDoc* <span class="keyword">get</span>() <span class="keyword">const</span> { <span class="keywordflow">return</span> doc_.get(); }</div><div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Document.xhtml#a9bd5b30f51ad3a84fe5ab8b0037fb91b">  434</a></span>&#160;  xmlDoc* <span class="keyword">get</span>() { <span class="keywordflow">return</span> doc_.get(); }<span class="comment"></span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  std::unique_ptr&lt;xmlDoc, decltype(&amp;xmlFreeDoc)&gt; doc_;  <span class="comment">///&lt; The DOM document.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">/// RelaxNG validator.</span></div><div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Validator.xhtml">  442</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1xml_1_1Validator.xhtml">Validator</a> {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">  /// @param[in] rng_file  The path to the schema file.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">  /// @throws ParseError  RNG file parsing has failed.</span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">  /// @throws LogicError  The XML library functions have failed internally.</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1xml_1_1Validator.xhtml">Validator</a>(<span class="keyword">const</span> std::string&amp; rng_file);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">  /// Validates XML DOM documents against the schema.</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">  /// @param[in] doc  The initialized XML DOM document.</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">  /// @throws ValidityError  The document failed schema validation.</span></div><div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="classscram_1_1xml_1_1Validator.xhtml#ad1626f649d58bab2db7a077f4b6b061e">  455</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1xml_1_1Validator.xhtml#ad1626f649d58bab2db7a077f4b6b061e">validate</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1xml_1_1Document.xhtml">Document</a>&amp; doc) {</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    xmlResetLastError();</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordtype">int</span> ret = xmlRelaxNGValidateDoc(valid_ctxt_.get(),</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                    <span class="keyword">const_cast&lt;</span>xmlDoc*<span class="keyword">&gt;</span>(doc.<a class="code" href="classscram_1_1xml_1_1Document.xhtml#afcabff07e31e1f4947f5c393364a1ea7">get</a>()));</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">if</span> (ret != 0)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;      <a class="code" href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a>(detail::GetError&lt;ValidityError&gt;());</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  }</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">  /// The schema used by the validation context.</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;xmlRelaxNG, decltype(&amp;xmlRelaxNGFree)&gt; schema_;<span class="comment"></span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">  /// The validation context.</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment"></span>  std::unique_ptr&lt;xmlRelaxNGValidCtxt, decltype(&amp;xmlRelaxNGFreeValidCtxt)&gt;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;      valid_ctxt_;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;};</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}  <span class="comment">// namespace scram::xml</span></div><div class="ttc" id="classscram_1_1xml_1_1Document_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Document.xhtml">scram::xml::Document</a></div><div class="ttdoc">XML DOM tree document. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00406">xml.h:406</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_a587b8312cc0bfbd5d9b6e8c73890c99e"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a587b8312cc0bfbd5d9b6e8c73890c99e">scram::xml::Element::Range::end</a></div><div class="ttdeci">iterator end() const </div><div class="ttdoc">The range begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00224">xml.h:224</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_1_1iterator_xhtml_a837aaa6571d0e04e9260721671c09c81"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml#a837aaa6571d0e04e9260721671c09c81">scram::xml::Element::Range::iterator::iterator</a></div><div class="ttdeci">iterator(const xmlElement *element=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00194">xml.h:194</a></div></div>
<div class="ttc" id="error_8h_xhtml_a7067a7f3834bc3c1d8fa25ba70d30011"><div class="ttname"><a href="error_8h.xhtml#a7067a7f3834bc3c1d8fa25ba70d30011">scram::xml::errinfo_element</a></div><div class="ttdeci">boost::error_info&lt; struct tag_xml_element, std::string &gt; errinfo_element</div><div class="ttdoc">The XML element name. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00157">error.h:157</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_ae722d4816c427429833f90a5c8c1cd30"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#ae722d4816c427429833f90a5c8c1cd30">scram::xml::Element::has_attribute</a></div><div class="ttdeci">bool has_attribute(const char *name) const </div><div class="ttdoc">Queries element attribute existence. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00299">xml.h:299</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml">scram::xml::Element</a></div><div class="ttdoc">XML Element adaptor. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00176">xml.h:176</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_1_1iterator_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range_1_1iterator.xhtml">scram::xml::Element::Range::iterator</a></div><div class="ttdoc">Iterator over range elements. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00186">xml.h:186</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a6d0e810583d2e8ed86cf9fbe8dc1719e"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a6d0e810583d2e8ed86cf9fbe8dc1719e">scram::xml::Element::Element</a></div><div class="ttdeci">Element(const xmlElement *element)</div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00255">xml.h:255</a></div></div>
<div class="ttc" id="namespacescram_1_1xml_xhtml"><div class="ttname"><a href="namespacescram_1_1xml.xhtml">scram::xml</a></div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00130">error.h:130</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Validator_xhtml_ad1626f649d58bab2db7a077f4b6b061e"><div class="ttname"><a href="classscram_1_1xml_1_1Validator.xhtml#ad1626f649d58bab2db7a077f4b6b061e">scram::xml::Validator::validate</a></div><div class="ttdeci">void validate(const Document &amp;doc)</div><div class="ttdoc">Validates XML DOM documents against the schema. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00455">xml.h:455</a></div></div>
<div class="ttc" id="xml_8h_xhtml_aa92019ad4a75c4c80954681887d4d8a1"><div class="ttname"><a href="xml_8h.xhtml#aa92019ad4a75c4c80954681887d4d8a1">scram::xml::detail::to_utf8</a></div><div class="ttdeci">const xmlChar * to_utf8(const char *c_string) noexcept</div><div class="ttdoc">Reinterprets C string as XML library UTF-8 string. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00129">xml.h:129</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a4a447a4146a0131bc1461762d55f6482"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a4a447a4146a0131bc1461762d55f6482">scram::xml::Element::line</a></div><div class="ttdeci">int line() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00265">xml.h:265</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_ab164f33b4aa86b74b853b87126bc8ff8"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#ab164f33b4aa86b74b853b87126bc8ff8">scram::xml::Element::child</a></div><div class="ttdeci">std::optional&lt; Element &gt; child(std::string_view name=&quot;&quot;) const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00366">xml.h:366</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_ae2f0368ee0072083b59665e30c1f4949"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae2f0368ee0072083b59665e30c1f4949">scram::xml::Element::Range::begin</a></div><div class="ttdeci">iterator begin() const </div><div class="ttdoc">The range begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00223">xml.h:223</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a57646bebfb4ea93e00a11d2f7ef4fabf"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a57646bebfb4ea93e00a11d2f7ef4fabf">scram::xml::Element::children</a></div><div class="ttdeci">Range children() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00375">xml.h:375</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a0c8e5b4dc681b9f83e3563ad08d168e1"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a0c8e5b4dc681b9f83e3563ad08d168e1">scram::xml::Element::text</a></div><div class="ttdeci">std::string_view text() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00306">xml.h:306</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="pdag_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00881">pdag.cc:881</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a60d62e931d3865a3c76b4e1be95e1d11"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a60d62e931d3865a3c76b4e1be95e1d11">scram::xml::Element::attribute</a></div><div class="ttdeci">std::string_view attribute(const char *name) const </div><div class="ttdoc">Retrieves the XML element&amp;#39;s attribute values. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00281">xml.h:281</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a316de1d751e833589416f25477aeb00e"><div class="ttname"><a href="xml_8h.xhtml#a316de1d751e833589416f25477aeb00e">scram::xml::detail::CastValue</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt;, T &gt; CastValue(const std::string_view &amp;value)</div><div class="ttdoc">Gets a number from an XML value. </div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_aedf9baaf529830c6e7ed07b65b933ab5"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#aedf9baaf529830c6e7ed07b65b933ab5">scram::xml::Element::attribute</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt;, std::optional&lt; T &gt; &gt; attribute(const char *name) const </div><div class="ttdoc">Generic attribute value extraction following XML data types. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00327">xml.h:327</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_aea4c55beafe82e8dc72329f579b23a8c"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#aea4c55beafe82e8dc72329f579b23a8c">scram::xml::Element::Range::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00230">xml.h:230</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_ae62801e3dcfe48b2e349dd3ad6f5216d"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ae62801e3dcfe48b2e349dd3ad6f5216d">scram::xml::Element::Range::Range</a></div><div class="ttdeci">Range(const xmlNode *head)</div><div class="ttdoc">Constructs the range for the intrusive list of XML Element nodes. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00219">xml.h:219</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a58abc717fb3ff89dcbd4f1cf392855e5"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a58abc717fb3ff89dcbd4f1cf392855e5">scram::xml::Element::name</a></div><div class="ttdeci">std::string_view name() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00270">xml.h:270</a></div></div>
<div class="ttc" id="error_8h_xhtml_a766d8477fec3466ae1d75208fe0554e7"><div class="ttname"><a href="error_8h.xhtml#a766d8477fec3466ae1d75208fe0554e7">SCRAM_THROW</a></div><div class="ttdeci">#define SCRAM_THROW(err)</div><div class="ttdoc">Convenience macro to throw SCRAM exceptions. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00038">error.h:38</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Document_xhtml_afcabff07e31e1f4947f5c393364a1ea7"><div class="ttname"><a href="classscram_1_1xml_1_1Document.xhtml#afcabff07e31e1f4947f5c393364a1ea7">scram::xml::Document::get</a></div><div class="ttdeci">const xmlDoc * get() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00433">xml.h:433</a></div></div>
<div class="ttc" id="pdag_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="pdag_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="pdag_8cc_source.xhtml#l00883">pdag.cc:883</a></div></div>
<div class="ttc" id="xml_8h_xhtml_ac1d3e45096e6f0253bc238de7d3bdfe2"><div class="ttname"><a href="xml_8h.xhtml#ac1d3e45096e6f0253bc238de7d3bdfe2">scram::xml::detail::trim</a></div><div class="ttdeci">std::string_view trim(const std::string_view &amp;text) noexcept</div><div class="ttdoc">Removes leading and trailing space characters from XML value string. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00141">xml.h:141</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Validator_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Validator.xhtml">scram::xml::Validator</a></div><div class="ttdoc">RelaxNG validator. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00442">xml.h:442</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_accf1b8ff3d357b2ce4e885b7b28561ad"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#accf1b8ff3d357b2ce4e885b7b28561ad">scram::xml::Element::children</a></div><div class="ttdeci">auto children(std::string_view name) const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00382">xml.h:382</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_a15c9f933f38716821303393ddcb6ef72"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a15c9f933f38716821303393ddcb6ef72">scram::xml::Element::Range::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00235">xml.h:235</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a857dbaf973585577354019c3792590ba"><div class="ttname"><a href="xml_8h.xhtml#a857dbaf973585577354019c3792590ba">scram::xml::kParserOptions</a></div><div class="ttdeci">const int kParserOptions</div><div class="ttdoc">The parser options passed to the library parser. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00399">xml.h:399</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a7f33738d58d87af59c1c3d08b4b23469"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a7f33738d58d87af59c1c3d08b4b23469">scram::xml::Element::text</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_arithmetic_v&lt; T &gt;, T &gt; text() const </div><div class="ttdoc">Generic text value extraction following XML data types. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00351">xml.h:351</a></div></div>
<div class="ttc" id="structscram_1_1xml_1_1ValidityError_xhtml"><div class="ttname"><a href="structscram_1_1xml_1_1ValidityError.xhtml">scram::xml::ValidityError</a></div><div class="ttdoc">XML document validity errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00148">error.h:148</a></div></div>
<div class="ttc" id="error_8h_xhtml_ab766600dc63390a9ad23e8818a2e509f"><div class="ttname"><a href="error_8h.xhtml#ab766600dc63390a9ad23e8818a2e509f">scram::xml::errinfo_attribute</a></div><div class="ttdeci">boost::error_info&lt; struct tag_xml_attribute, std::string &gt; errinfo_attribute</div><div class="ttdoc">The XML attribute name. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00154">error.h:154</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a4a73fb8293c3d457ed6d6fb868e75c02"><div class="ttname"><a href="xml_8h.xhtml#a4a73fb8293c3d457ed6d6fb868e75c02">scram::xml::detail::GetError</a></div><div class="ttdeci">T GetError(xmlErrorPtr xml_error=nullptr)</div><div class="ttdoc">Gets the last XML error converted from the library error codes. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00161">xml.h:161</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_xhtml_a959df73174a6e363f71ffb7772abbe20"><div class="ttname"><a href="classscram_1_1xml_1_1Element.xhtml#a959df73174a6e363f71ffb7772abbe20">scram::xml::Element::filename</a></div><div class="ttdeci">const char * filename() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00262">xml.h:262</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_ad8246812626d57a193d74be15a412b90"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#ad8246812626d57a193d74be15a412b90">scram::xml::Element::Range::cend</a></div><div class="ttdeci">iterator cend() const </div><div class="ttdoc">The range begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00226">xml.h:226</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml_a014449ba65e98a1aa089e8e9e809227a"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml#a014449ba65e98a1aa089e8e9e809227a">scram::xml::Element::Range::cbegin</a></div><div class="ttdeci">iterator cbegin() const </div><div class="ttdoc">The range begin and end iterators. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00225">xml.h:225</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Element_1_1Range_xhtml"><div class="ttname"><a href="classscram_1_1xml_1_1Element_1_1Range.xhtml">scram::xml::Element::Range</a></div><div class="ttdoc">The range for elements. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00181">xml.h:181</a></div></div>
<div class="ttc" id="classscram_1_1xml_1_1Document_xhtml_a4ac45d9407199ac54ebea609595cf942"><div class="ttname"><a href="classscram_1_1xml_1_1Document.xhtml#a4ac45d9407199ac54ebea609595cf942">scram::xml::Document::root</a></div><div class="ttdeci">Element root() const </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00426">xml.h:426</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a188df83c90c899c3118efb43cf912245"><div class="ttname"><a href="xml_8h.xhtml#a188df83c90c899c3118efb43cf912245">scram::xml::detail::from_utf8</a></div><div class="ttdeci">const char * from_utf8(const xmlChar *xml_string) noexcept</div><div class="ttdoc">Reinterprets the XML library UTF-8 string into C string. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00117">xml.h:117</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 10 2018 02:44:37 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
